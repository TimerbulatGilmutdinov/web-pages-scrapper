<!DOCTYPE html>

<html lang="ru">
<head>
<title>Concurrency в Spring Boot приложениях: как сделать правильный выбор / Хабр</title>
</head>
<body>
<div id="mount"><div data-async-called="true" id="app"><div class="tm-layout__wrapper"><!--[--><!-- --><div></div><!-- --><header class="tm-header" data-test-id="header"><div class="tm-page-width"><!--[--><div class="tm-header__container"><!-- --><span class="tm-header__logo-wrap"><a class="tm-header__logo tm-header__logo_hl-ru tm-header__logo" href="/ru/"><svg class="tm-svg-img tm-header__icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a><span class="tm-header__beta-sign" style="display:none;">β</span></span><!--[--><div class="tm-dropdown tm-header__projects"><div class="tm-dropdown__head"><!--[--><button class="tm-header__dropdown-toggle"><svg class="tm-svg-img tm-header__icon tm-header__icon_dropdown" height="16" width="16"><title>Открыть список</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#arrow-down"></use></svg></button><!--]--></div><!-- --></div><a class="tm-header__become-author-btn" href="/ru/sandbox/start/">Как стать автором</a><div class="tm-feature tm-feature tm-feature_variant-inline tm-header__feature"><!-- --></div><!-- --><!--]--><!-- --></div><!--]--></div></header><div class="tm-layout"><div class="tm-page-progress-bar"></div><div class="tm-base-layout__header_is-sticky tm-base-layout__header" data-menu-sticky="true"><div class="tm-page-width"><!--[--><div class="tm-base-layout__header-wrapper"><div class="tm-main-menu"><div class="tm-main-menu__section"><nav class="tm-main-menu__section-content"><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/feed/">Моя лента</a><!--]--><!--[--><a class="tm-main-menu__item" href="/ru/articles/">Все потоки</a><!--]--><!--[--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/develop/">Разработка</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/admin/">Администрирование</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/design/">Дизайн</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/management/">Менеджмент</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/marketing/">Маркетинг</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/popsci/">Научпоп</a><!--]--><!--]--></nav></div></div><div class="tm-header-user-menu tm-base-layout__user-menu"><a class="tm-header-user-menu__item tm-header-user-menu__search" data-test-id="search-button" href="/ru/search/"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_search tm-header-user-menu__icon_dark" height="24" width="24"><title>Поиск</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#search"></use></svg></a><!-- --><!-- --><div class="tm-header-user-menu__item tm-header-user-menu__write"><div><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_write tm-header-user-menu__icon_dark" height="24" width="24"><title>Написать публикацию</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#write"></use></svg></div><!-- --></div><!--[--><div class="tm-header-user-menu__item"><button class="tm-header-user-menu__toggle" data-test-id="user-menu-settings"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_dark" height="24" width="24"><title>Настройки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#page-settings"></use></svg></button></div><a class="tm-header-user-menu__item" href="https://habr.com/kek/v1/auth/habrahabr/?back=/ru/companies/spring_aio/articles/862950/&amp;hl=ru" rel="nofollow"><!--[--><button class="btn btn_solid btn_small tm-header-user-menu__login" type="button"><!--[-->Войти<!--]--></button><!--]--></a><!--]--><!-- --><!--teleport start--><!--teleport end--><!-- --></div></div><!--]--></div></div><!-- --><div class="tm-page-width"><!--[--><!--]--></div><main class="tm-layout__container"><div class="tm-page" companyname="spring_aio" data-async-called="true" hl="ru" style="--0c809c5a:16px;--a086013e:100%;--7c457026:0;"><div class="tm-page-width"><!--[--><div class="tm-page__header"><!--[--><!--]--></div><div class="tm-page__wrapper"><div class="tm-page__main_has-sidebar tm-page__main"><div class="pull-down"><!-- --><div class="pull-down__header" style="height:0px;"><div class="pull-down__content" style="bottom:10px;"><svg class="tm-svg-img pull-down__icon pull-down__arrow" height="24" width="24"><title>Обновить</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#pull-arrow"></use></svg></div></div><!--[--><!--[--><div class="tm-article-presenter"><!--[--><!--[--><!-- --><div class="tm-company-profile-card tm-company-article__profile-card"><div class="tm-company-card tm-company-profile-card__info"><div class="tm-company-card__header"><a class="tm-company-card__avatar" href="/ru/companies/spring_aio/profile/"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="48" src="//habrastorage.org/getpro/habr/company/8f1/91a/458/8f191a4584b8fab12d15af23e447a1d5.png" width="48"/></div></a><!--[--><!-- --><div class="tm-counter-container tm-company-card__rating"><div class="tm-counter-container__header"><!--[--><!--[--><!--]--><div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!-- --><div class="tm-votes-lever__score tm-votes-lever__score_appearance-rating tm-votes-lever__score"><!--[--><span><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter_rating tm-votes-lever__score-counter" data-test-id="votes-score-counter">77.73</span></span><!--]--></div><!-- --></div><!--]--></div><div class="tm-counter-container__footer"><!--[--><span class="tm-rating__text tm-rating__text">Рейтинг</span><!--]--></div></div><!-- --><!--]--></div><div class="tm-company-card__info"><a class="tm-company-card__name" href="/ru/companies/spring_aio/profile/"><span>Spring АйО</span></a><!-- --></div></div><div class="tm-company-profile-card__buttons"><div class="tm-button-follow tm-company-profile-card__button tm-company-profile-card__button_follow"><!-- --><button class="tm-button-follow__button tm-button-follow__button_big" data-test-id="follow-button" type="button">Подписаться</button></div><!-- --><!-- --><!-- --></div></div><!-- --><!--]--><!--]--><div class="tm-article-presenter__body" data-test-id="article-body"><div class="tm-misprint-area"><div class="tm-misprint-area__wrapper"><!--[--><article class="tm-article-presenter__content tm-article-presenter__content_narrow"><!--[--><div class="tm-article-presenter__header"><!--[--><!--]--><div class="tm-article-snippet tm-article-snippet tm-article-presenter__snippet"><!--[--><!--]--><div class="tm-article-snippet__meta-container"><div class="tm-article-snippet__meta"><span class="tm-user-info tm-article-snippet__author"><a class="tm-user-info__userpic" data-test-id="user-info-pic" href="/ru/users/spring_aio/" title="spring_aio"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="24" src="//habrastorage.org/r/w48/getpro/habr/avatars/8e0/5e8/a1c/8e05e8a1c5fd4560f661efb2cb00e77e.png" width="24"/></div></a><span class="tm-user-info__user tm-user-info__user_appearance-default" data-test-id="user-info-description"><a class="tm-user-info__username" href="/ru/users/spring_aio/">spring_aio <!-- --></a><!--[--><span class="tm-article-datetime-published"><time datetime="2024-12-06T12:38:38.000Z" title="2024-12-06, 15:38">6  дек  2024 в 15:38</time></span><!--]--></span></span></div><!-- --></div><h1 class="tm-title tm-title_h1" data-test-id="articleTitle" lang="ru"><span>Concurrency в Spring Boot приложениях: как сделать правильный выбор</span></h1><div class="tm-article-snippet__stats" data-test-id="articleStats"><div class="tm-article-complexity tm-article-complexity_complexity-low"><span class="tm-svg-icon__wrapper tm-article-complexity__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Уровень сложности</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#complexity-low"></use></svg></span><span class="tm-article-complexity__label">Простой</span></div><div class="tm-article-reading-time"><span class="tm-svg-icon__wrapper tm-article-reading-time__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Время на прочтение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#clock"></use></svg></span><span class="tm-article-reading-time__label">18 мин</span></div><span class="tm-icon-counter tm-data-icons__item"><svg class="tm-svg-img tm-icon-counter__icon" height="24" width="24"><title>Количество просмотров</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-views"></use></svg><span class="tm-icon-counter__value" title="14461">14K</span></span></div><div class="tm-publication-hubs__container" data-test-id="articleHubsList"><div class="tm-publication-hubs"><!--[--><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/companies/spring_aio/articles/"><!--[--><span>Блог компании Spring АйО</span><!-- --><!--]--></a></span><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/hubs/programming/"><!--[--><span>Программирование</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/hubs/java/"><!--[--><span>Java</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/hubs/kotlin/"><!--[--><span>Kotlin</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><!--]--></div></div><div class="tm-article-labels" data-test-id="articleLabels"><div class="tm-article-labels__container"><div class="tm-publication-label tm-publication-label_variant-review"><span>Обзор</span></div><!--[--><div class="tm-publication-label tm-publication-label_variant-translation"><span>Перевод</span></div><!--]--></div></div><!-- --><!-- --></div></div><!--[--><div class="tm-article-presenter__origin"><a class="tm-article-presenter__origin-link" href="https://www.youtube.com/watch?v=vhHDlSV_0zg" target="_blank">Автор оригинала: <span>Андрей Шакирин</span></a></div><div class="tm-article-body" data-gallery-root="" lang="ru"><div><!--[--><!--]--></div><div id="post-content-body"><div><div class="article-formatted-body article-formatted-body article-formatted-body_version-2"><div xmlns="http://www.w3.org/1999/xhtml"><p>Команда <a href="https://t.me/+QmrKn0wA8CdkNjAy">Spring АйО</a> перевела и адаптировала доклад «<a href="https://www.youtube.com/watch?v=vhHDlSV_0zg">Concurrency in Spring Boot Applications: Making the Right Choice</a>» Андрея Шакирина с последнего Devoxx Belgium. </p><p>В докладе автор рассказал про различные подходы по работе с concurrency в целом, а также именно в Spring Boot приложениях.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/fd2/627/2fc/fd26272fc39b752397e38f23d05bb5cc.png" height="900" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/fd2/627/2fc/fd26272fc39b752397e38f23d05bb5cc.png" width="1600"/></figure><p>Главная цель этой статьи состоит не в том, чтобы глубоко погружаться в разные подходы к concurrency. Это, скорее, общий обзор, дающий представление о том, какие подходы к concurrency лучше соответствуют различным сценариям использования в рамках разных типов приложений.</p><p>Прежде всего мы пройдемся по самым распространенным вопросам о concurrency, таким как: почему нам нужна concurrency, почему вообще нужно запускать что-то в параллельном режиме и какие сценарии использования concurrency существуют в мире разработки ПО.</p><p>Затем мы перечислим и опишем опции, которые существуют в Java и в Spring Boot, а также достоинства и недостатки каждого подхода. В конце мы проанализируем, почему и какой сценарий использования лучше подходит тому или иному подходу к concurrency.</p><p>Итак, почему мы должны выбирать один или другой подход к concurrency для специфических сценариев использования? </p><h3>Сценарии использования concurrency</h3><h4>Веб-сервер</h4><p>Первый очень распространенный сценарий, который встречается в приложениях на практике — это бэкенд собственной разработки, своего рода веб-сервер, включающий удаленное API. Данный веб-сервер обслуживает не один запрос в секунду, он принимает многочисленные запросы, и написанные под данный сервер клиентские приложения должны быть структурированы таким образом, чтобы работать с этим сервером в режиме concurrency.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/f6d/a98/e35/f6da98e3568f62775fa8a2ff8af4a49f.png" height="276" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/f6d/a98/e35/f6da98e3568f62775fa8a2ff8af4a49f.png" width="1098"/></figure><p>Обычно в этом сценарии программист может повлиять не на многое: он только конфигурирует, сколько потоков и какого типа производит веб-приложение, но не реализует сам механизм.</p><p>Следующий сценарий, весьма похожий на первый, — это когда приложение прослушивает какую-то очередь, какую-то систему, выдающую сообщения.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/6d5/167/666/6d51676667f1ab00c4eff04b88cbe5be.png" height="246" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/6d5/167/666/6d51676667f1ab00c4eff04b88cbe5be.png" width="1019"/></figure><p>Как и в предыдущем случае, мы принимаем какие-то сообщения, и мы не обязаны делать это последовательно. Напротив, мы можем создавать несколько потоков, несколько слушателей, которые будут работать параллельно, так что мы можем потреблять сообщения также в параллельном режиме. Опять-таки, наш код должен подходить для этого. Но, как правило, мы не контролируем и этот механизм. </p><p>Так каковы же основные сценарии применения concurrency внутри нашей бизнес-логики? Довольно типичный случай — это Fork and Join.</p><h4>Fork and Join</h4><p>Если наша задача может быть выполнена какими-то чанками параллельно то мы можем распараллелить некоторые операции и затем подождать выполнения этих задач и потом выполнить агрегирование результатов этих операций.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/276/de9/4c3/276de94c306ab95fa9646b18e43a31af.png" height="441" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/276/de9/4c3/276de94c306ab95fa9646b18e43a31af.png" width="871"/></figure><p><br/></p><p>Этот сценарий можно разбить на несколько подвариантов. Итак, в одном случае у нас также есть вот это: </p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/703/8e9/dcc/7038e9dccfa76ca8aa5bbfbdf2a8124b.png" height="481" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/703/8e9/dcc/7038e9dccfa76ca8aa5bbfbdf2a8124b.png" width="1068"/></figure><p>В данном случае у нас есть некая задача, требовательная к ресурсам CPU, например, операции асимметричного шифрования или сжатия видео.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/47d/dc0/aeb/47ddc0aeb4808c5359cf804b61a0a668.png" height="496" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/47d/dc0/aeb/47ddc0aeb4808c5359cf804b61a0a668.png" width="1116"/></figure><p>Примером Fork and Join также могут быть операции, так или иначе связанные с вводом-выводом (input/output). В рамках таких операций мы можем делать запросы в базу данных, чтобы получать результаты этих запросов, мы можем вызвать удаленный сервис, можем работать с файловой системой или с брокером сообщений. </p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/d3e/33f/06f/d3e33f06f2b556a492c268d7b233e28e.png" height="475" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/d3e/33f/06f/d3e33f06f2b556a492c268d7b233e28e.png" width="1166"/></figure><p>Существует также подвариант, включающий сложную логику. Представьте себе, что у нас есть потоки данных (data streams). В проекте, состоящем из фронтенда и бэкенда, возможно реализовать функциональность щелчка мышью по представлению таких потоков в интерфейсе, но при этом вся логика по обработке такого события реализована на бэкенде, что требует аккуратного сопоставления id потоков в обоих компонентах приложения в реальном времени. </p><p>Еще один подвариант этого случая. Иногда наши задачи взаимосвязаны. </p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/a56/1a4/ad9/a561a4ad90a0a987764217cce29f4bdd.png" height="461" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/a56/1a4/ad9/a561a4ad90a0a987764217cce29f4bdd.png" width="1010"/></figure><p>Понятие взаимосвязанности по сути означет следующее: если одна из задач закончилась неудачей, не имеет смысла продолжать выполнение другой задачи, надо прервать и ее тоже. </p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/1f5/a5d/1db/1f5a5d1dba4c3fea75976af79be99bed.png" height="456" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/1f5/a5d/1db/1f5a5d1dba4c3fea75976af79be99bed.png" width="1007"/></figure><p>Либо наоборот,  если одна из задач успешна, тогда тоже нет смысла продолжать, если результат уже понятен. </p><h3>Fire and Forget</h3><p>Еще один, третий, случай concurrency — это fire and forget, то есть мы просто посылаем email или нотификацию, посылаем сообщение в брокер, но нас не интересует, когда и как законится этот процесс, и мы не используем результат этой отправки в нашем основном рабочем процессе. Наш основной рабочий алгоритм просто работает независимо от ее результата.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/ed3/675/d80/ed3675d80dd73bb023e5f7ec9ee8e06b.png" height="396" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/ed3/675/d80/ed3675d80dd73bb023e5f7ec9ee8e06b.png" width="945"/></figure><p> </p><p>Таковы наиболее распространенные сценарии использования concurrency в приложениях. Давайте теперь посмотрим на то, какие опции по concurrency мы имеем в настоящее время в Java и в Spring Boot. </p><h3>Java и Spring Boot опции для concurrency</h3><p>Прежде всего мы, конечно, можем использовать <strong>Executors и Futures</strong>. Это не так часто происходит в проектах, но все же многие люди используют классическое Future. Мы  также можем применить <strong>Completable Future</strong>, что является более современной, а значит, более предпочтительной опцией. Spring Boot имеет аннотацию<strong> @Async</strong> для обоих случаев, что помогает реализовать требуемый функционал меньшим количеством кода.</p><p>Кроме того, мы имеем<strong> Reactive Paradigm</strong>, Reactive Programming, и эту парадигму также все еще можно использовать.Кроме того, начиная с Java 21, у нас есть <strong>виртуальные потоки</strong> и в будущем у нас появится <strong>Structured concurrency</strong>. </p><p>Давайте пройдемся по каждой опции и посмотрим, какие есть достоинства и недостатки у каждой из них и как они соотносятся с упомянутыми выше сценариями использования.</p><h4>Futures &amp; Executors</h4><p>Давайте начнем с классических Futures &amp; Executors. В Spring Boot у нас есть возможность конфигурировать их как бины, так что я могу сконфигурировать разные виды executors. Например, здесь для одного бина я установил большое количество параметров, а для другого просто использую стандартный фиксированный пул executor’ов.</p><pre><code class="java">@Configuration
public class AsyncConfig {
    @Bean(name = “taskExecutor")
    public Executor taskExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        executor.setCorePoolSize(3); // Number of core threads
        executor.setMaxPoolSize(S); // Maximum number of threads
        executor.setQueueCapacity(10); // Queve capacity before rejecting tasks
        executor.setThreadNamePrefix("Async-");
        executor.initialize();
        return executor;
    }
    
    @Bean(name = "executorService")
    public ExecutorService executorService(){
        // Configure a thread pool with a fixed number of threads
        return Executors.newFixedThreadPool(3);
    }
}</code></pre><p>Когда нам необходимо отправить нашу задачу на исполнение в executor, мы можем сделать это вручную, то есть, по сути, объявить executor, заинжектировать его в сервис и отправить задачу на исполнение. Альтернативное решение — использовать аннотацию @Async из Spring Boot. </p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/c08/3cb/b1e/c083cbb1eae10f759c0ce570eb34c0de.png" height="478" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/c08/3cb/b1e/c083cbb1eae10f759c0ce570eb34c0de.png" width="1109"/></figure><p>Она сделает эту работу за нас. В этом случае достаточно аннотировать наш метод аннотацией <code>@Async</code> и отправить сообщение во <code>Future</code>. В этом случае переменная типа <code>AsyncResult</code> будет являться оберткой для результата в <code>Future</code>. Этот вариант является deprecated, и сейчас принято использовать <code>CompletableFuture</code>, но такой устаревший код все еще часто встречается на проектах.</p><h4>Как выполнять задачи в параллельном режиме </h4><pre><code class="java">@GetMapping("/run-tasks-future")
public String runTasksFuture() throws InterruptedException, 
ExecutionException {
	Future &lt; String &gt; task1 = taskServiceFuture.processTask1();
	Future &lt; String &gt; task2 = taskServiceFuture.processTask2();
	Future &lt; String &gt; task3 = taskServiceFuture.processTask3();
	
    String result = task1.get();
	String result2 = task2.get();
	String result3 = task3.get();
	
    return "Results: " + resultl + ", " + result2 + ", " + result3;
}</code></pre><p>Мы создаем задачу, используя сервис, и затем вызываем метод <code>get()</code>. Он блокирует ее до тех пор, пока не закончится другая задача или пока другая задача не упадет с неудачным завершением. И даже если <code>task1</code> займет больше времени, чем <code>task2</code> и <code>task3</code> — <code>task2</code> и <code>task3</code> могут уже завершиться — блокировка сохранится. </p><h4>CompletableFuture</h4><p>Это немного более современный способ работать с concurrency, и в этом случае executors те же самые. Мы также можем отправить наши задачи на выполнение вручную с помощью метода <code>supplyAsync()</code>.</p><pre><code class="java">@Service
public class TaskServiceStandalone {
	public CompletableFuture &lt; String &gt; processTaski() {
		return CompletableFuture.supplyAsync(() - &gt; {
			try {
				Thread.sleep(2000);
				return "Task 1 completed";
			} catch (InterruptedException e) {
				throw new RuntimeException(e);
			}
		});
	}</code></pre><p>Но мы также можем использовать ключевое слово <code>@Async</code>:</p><pre><code class="java">@Service
public class TaskService {
	@Async
	public CompletableFuture &lt; String &gt; processTask1() throws InterruptedException {
		Thread.steep(2000);
		return CompletableFuture.completedFuture("Task 1 completed");
	}
	
    @Async
	public CompletableFuture &lt; String &gt; processTask2() throws InterruptedException {
		Thread.sleep(3000);
		return CompletableFuture.completedFuture("Task 2 completed");
	}
  }</code></pre><p>В этом случае будет возвращен результат типа <code>CompletableFuture</code>. </p><p>Что действительно приятно с CompletableFuture, мы можем комбинировать задачи, как нам хочется, используя операции combine и compose (как вы можете видеть на иллюстрации, соответствующие методы в коде называются <code>thenCombine()</code> и <code>thenCompose()</code>). </p><p>Например, в первом случае, где применяется <code>thenCombine()</code>, три задачи будут выполнены параллельно.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/28e/4b4/cb2/28e4b4cb201ae2fc1e3dadc0ec94b506.png" height="495" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/28e/4b4/cb2/28e4b4cb201ae2fc1e3dadc0ec94b506.png" width="1038"/></figure><p>Далее мы агрегируем результаты двух первых задач и затем агрегируем результат третьей задачи. Если же говорить о <code>thenCompose()</code>, как показано во втором примере, три задачи будут выполнены параллельно, а четвертая будет выполнена последовательно и будет использовать результат предыдущих вызовов.  </p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/666/889/6d6/6668896d6e25e559f11433cd20ad8a7c.png" height="518" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/666/889/6d6/6668896d6e25e559f11433cd20ad8a7c.png" width="1119"/></figure><p>Также интересно, что у обоих методов есть версия с ключевым словом Async в названии.   </p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/ac0/cc0/ed0/ac0cc0ed0954b7ca9559709daf5c6d6a.png" height="447" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/ac0/cc0/ed0/ac0cc0ed0954b7ca9559709daf5c6d6a.png" width="881"/></figure><p>То есть, мы можем выполнять операции <code>thenCombineAsync()</code> и <code>thenComposeAsync()</code>. Но ведь мы и так запускаем наши процессы в параллельном режиме, зачем нам нужно еще больше асинхронности?</p><p>По крайней мере, для случая операции Compose это немного более понятно, потому что мы запускаем ее последовательно, но для Combine у нас уже есть параллельный запуск, так зачем же нам нужен дополнительный Async? </p><p>На самом деле все просто. Ключевое слово Async просто говорит нам в случае с Compose, что наша последовательная задача определенно будет использовать другой поток, так что мы берем поток из executor’а, который мы передаем, и делаем запуск в другом потоке, чтобы не влиять на основной поток. А в случае с Combine в отдельном потоке будет работать агрегирующая функциональность. И мы можем предоставить для этого executor.</p><p>Так что, если мы посмотрим на то, как это работает, в случае с просто Compose, worker используется повторно,мы запускаем две последовательные задачи и используем один и тот же поток.  </p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/e5d/34b/1a4/e5d34b1a46cc004aef14c6c00bb848f4.png" height="165" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/e5d/34b/1a4/e5d34b1a46cc004aef14c6c00bb848f4.png" width="1144"/></figure><p>Если же мы делаем это в режиме Async, вторая задача все еще последовательная, но она запускается в другом потоке. </p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/047/151/682/047151682c3b85207bce6d41d55dbc6a.png" height="165" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/047/151/682/047151682c3b85207bce6d41d55dbc6a.png" width="1125"/></figure><p>В случае с Combine опять-таки, если мы используем просто Combine, один поток, worker-поток, будет переиспользоваться.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/82d/4a0/105/82d4a01055c84568fc9ce5ad7b127277.png" height="150" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/82d/4a0/105/82d4a01055c84568fc9ce5ad7b127277.png" width="1176"/></figure><p>А в случае с Async берется другой поток для выполнения операции комбинирования.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/b9d/9d1/fc2/b9d9d1fc2b1362c9c7ebd302e96e191d.png" height="146" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/b9d/9d1/fc2/b9d9d1fc2b1362c9c7ebd302e96e191d.png" width="1176"/></figure><p>Теперь уясним, каковы сценарии использования для Future, CompletableFuture и Async. Также следует понимать, что при использовании аннотации <code>@Async</code> Spring Boot выполняет не только <code>submit()</code> или <code>supplyAsync()</code>, он может также ловить исключения и передавать их в <code>CompletableFuture</code> при неудачном завершении последнего.</p><p>Главные сценарии использования в этом случае  — это задачи типа fork &amp; join или fire &amp; forget, для которых требуется, чтобы мы могли создавать и запускать задачи в режиме concurrency.</p><p>Spring Boot аннотация <code>@Async</code> помогает отлавливать исключения и также оборачивает шаблонный код (boilerplate code), чтобы отправлять задачи на исполнение, поэтому мы очень рекомендуем к ней присмотреться, если вы еще не используете эту аннотацию.</p><p>Используя Future, мы получаем механизм для запуска и получения результата, но CompletableFuture — это более современный и предпочтительный стиль для программирования операция Combine и Compose для задач. Это все, что можно сказать о сценариях использования для опции Futures and Executors, поэтому двигаемся дальше. </p><h3>Проблема блокирования ввода/вывода</h3><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/926/7ff/b65/9267ffb654dcf268d356d206a369febc.png" height="296" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/926/7ff/b65/9267ffb654dcf268d356d206a369febc.png" width="853"/></figure><p>Существует проблема, которую трудно решить, используя подход Future или Completable Future. В чем она состоит? Представьте себе, что у нас три задачи, как на иллюстрации выше, и каждая задача прикреплена к платформенному потоку. С третьей задачей все довольно просто, это просто задача на вычисление, и поток используется достаточно хорошо, но с первой и второй задачей все несколько сложнее, потому что мы должны подождать ответа от базы данных или от удаленного API, и в этом случае платформенный поток здесь блокируется. Мы просто ждем, но ничего не происходит. </p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/f8c/d13/5d0/f8cd135d02329c1cd8c0e7ec1af4631d.png" height="433" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/f8c/d13/5d0/f8cd135d02329c1cd8c0e7ec1af4631d.png" width="1021"/></figure><p>Как решить эту проблему? В этом случае использование платформенного потока обходится весьма дорого и не является оптимальным, поэтому возможное решение для проблемы следующее: мы можем разделить нашу длинную обязательную задачу в несколько маленьких лямбд (callback’ов), и задача фреймворка в этом случае — организовать эти callback’и оптимальным образом и минимизировать использование платформенного потока.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/8c7/394/529/8c73945297f2d6c383f0803bebbf7dd8.png" height="315" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/8c7/394/529/8c73945297f2d6c383f0803bebbf7dd8.png" width="927"/></figure><p>Если платформенный поток ждет, он может в это же время сделать что-то, относящееся к другому callback’у или к другому вычислению.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/d33/920/f28/d33920f2837f626fe28f1df8916ca669.png" height="507" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/d33/920/f28/d33920f2837f626fe28f1df8916ca669.png" width="1072"/></figure><p>Идем дальше.</p><h3>Reactive Paradigm</h3><p>Имплементацией вышеупомянутого фреймворка является Reactive Paradigm. Как это работает в Reactive Paradigm? </p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/484/db5/19a/484db519a5614387f27fb3ef6404314a.png" height="302" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/484/db5/19a/484db519a5614387f27fb3ef6404314a.png" width="687"/></figure><p>У нас есть события, у нас есть publisher и subscriber, где мы в основном регистрируем наши лямбды (callback’и). События могут приходить в publisher из разных источников. Они могут прийти в результате завершения вызова удаленного API. Или наш запрос к базе данных завершен, и у события есть результат. </p><p> </p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/184/317/9d6/1843179d67d175c298279b849d123032.png" height="323" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/184/317/9d6/1843179d67d175c298279b849d123032.png" width="678"/></figure><p>Может также существовать некий поток (stream) данных, который мы обрабатываем. Очень важная часть Reactive Paradigm — это цикл событий, который получает события из очереди и распределяет их между callbacks и publisher.</p><p> </p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/e8d/1b1/876/e8d1b1876ba0d066ea02a6ded5e9b2bf.png" height="342" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/e8d/1b1/876/e8d1b1876ba0d066ea02a6ded5e9b2bf.png" width="703"/></figure><p>Также интересной функцией Reactive Paradigm является контроль backpressure. </p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/c69/2b8/4e6/c692b84e61ca69145d4f9bc7a6a1d73f.png" height="447" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/c69/2b8/4e6/c692b84e61ca69145d4f9bc7a6a1d73f.png" width="703"/></figure><p>Subscriber может сказать: «Да, здесь очень много данных, и я не могу продолжать с этим работать, так что, пожалуйста, либо проведите буферизацию, либо замедлите продакшен». Это то, что представляет собой Reactive.</p><h4>Пример Reactive  — Rest controller</h4><p>Давайте посмотрим на то, как реализовать Reactive в Spring Boot. </p><pre><code class="java">@RestController
public class UserClickController {
	private final UserClickService userClickService;
	
    public UserClickController(UserClickService userClickService) {
		this.userClickService = userClickService;
	}
	
    @GetMapping("/user-groups/{userGroupId}/clicks")
	public Flux &lt; UserClicks &gt; getUserClicks(@PathVariable String userGroupId) {
		return userClickService.getUserGroupClicks(userGroupId);
	}
  }</code></pre><p>Когда мы работаем с Reactive стеком, очень важно следить за тем, чтобы весь стек был Reactive. Поэтому, если у нас, например, контроллер, не является Reactive, или база данных не является Reactive, это не имеет смысла, потому что где-то происходит блокировка, и цикл событий будет ждать в блокировке. Поэтому здесь мы используем WebFlux, мы просто возвращаем <code>Flux</code>, то есть потоки (streams) от контроллера и репозиторий.</p><pre><code class="java">package com.example.async.demo.reactive;

import com.example.async.demo.reactive.model.User;
import org.springframework.data.repository.reactive.ReactiveCrudRepository;
import reactor.core.publisher.Flux;

public interface UserRepository extends ReactiveCrudRepository &lt; User, String &gt; {
	Flux &lt; User &gt; findByUserGroup(String userGroup);
}</code></pre><p>В этом случае мы реализовали Reactive репозиторий для базы данных, и в качестве бизнес логики в этом случае мы имеем поток (stream) данных о пользователях из репозитория, события Click, и есть некоторая логика для использования <code>flatMap</code>, чтобы объединить эти потоки (streams) вместе.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/675/7a2/633/6757a2633b791bf0c47b307426d6eecc.png" height="393" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/675/7a2/633/6757a2633b791bf0c47b307426d6eecc.png" width="1094"/></figure><p>То есть, мы, базируясь на ID, коррелируем потоки и объединяем их, и это называется Reactive. </p><p>В Spring Boot есть очень хорошая поддержка стека Reactive, уровень API предоставляет WebFlux контроллеры и клиенты. Через бизнес-логику вы также можете использовать zip, flatMap, filter и другую функциональность.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/c98/4b0/ed8/c984b0ed824f4c82462a7906d3f0bb89.png" height="508" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/c98/4b0/ed8/c984b0ed824f4c82462a7906d3f0bb89.png" width="1023"/></figure><p>Также для работы с базами данных в Spring Boot присутствует хорошая поддержка многочисленных драйверов СУБД, таких как Redis, Neo4j и другие. То же самое можно сказать и о поддержке брокеров сообщений, есть очень хорошая поддержка стека Reactive, достаточно просто запустить драйвер, и он работает из коробки.</p><p>Подытожим. Reactive Paradigm может решить множество проблем, как например асинхронная обработка без блокирования, более эффективное использование платформенных потоков, она довольно хорошо масштабируется и обеспечивает контроль backpressure.</p><p>Но есть и обратная сторона вопроса. Любая опция, имеющая свои преимущества, обязательно будет иметь и какие-то недостатки.</p><p>Главным недостатком Reactive Paradigm по праву считается сложный код. Отладка этого кода тоже очень сложная, так что работа с реактивным кодом занимает больше времени, чем работа с другими опциями, и все еще вы будете находить многочисленные ошибки при отладке и запуске приложения.</p><p>Кроме того, необходимо, чтобы все зависимости тоже были reactive, чтобы готовое решение можно было запустить. И если у вас присутствуют только задачи, требовательные к ресурсам CPU, то подход, основанный на Reactive Paradigm, не имеет особого смысла. </p><p>Соответственно, использовать стек Reactive рекомендуется только если у вас есть требования объединять ваши потоки данных, у вас есть очень сложная логика комбинирования Kafka потоков (streams) или Kafka таблиц (tables). </p><h3>Виртуальные потоки (Virtual Threads) </h3><p>И вот вопрос: зачем нам разделять наш код, наши императивные задачи на маленькие callbacks и организовывать все это в циклы событий, превращая простой код  в сложный? Не может ли виртуальная машина Java взять на себя немножко больше ответственности, чтобы сделать это самостоятельно?</p><p>И ответом на этот вопрос является использование виртуальных потоков. Как это работает? По умолчанию используются платформенные потоки Java Virtual Machine, базирующиеся на корутинах платформы, и они весьма дорогостоящие, поэтому этот вариант годится только для того, чтобы зарезервировать стек между половиной мегабайта и мегабайтом. При использовании же виртуальных потоков JVM создает легковесные потоки, которые стоят только один-два килобайта.</p><p>По итогу стандартный ноутбук может управлять миллионом виртуальных потоков. И действительно приятной возможностью является то, что виртуальные потоки могут закрепляться за платформенными потоками, но как только виртуальный поток вызывает какую-то блокирующую I/O операцию, связанную с базой данных или удаленным API, он будет немедленно откреплен.</p><p>Поскольку эти потоки весят так мало, не имеет смысла создавать пул потоков, так что мы можем очень легко создавать и удалять их по мере необходимости. В этом случае открепленный виртуальный поток просто автоматически удаляется. И когда в этом возникнет необходимость, новый виртуальный поток будет создан и прикреплен, возможно, уже к другому платформенному потоку. </p><p>Это помогает использовать наши платформенные потоки рациональнее. Они не должны ждать I/O операций, и как только наш результат готов, виртуальный поток будет снова прикреплен к платформенному потоку и сможет продолжать.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/e89/d4e/718/e89d4e718a90815fa3da0e0afa5bffa1.png" height="616" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/e89/d4e/718/e89d4e718a90815fa3da0e0afa5bffa1.png" width="1084"/></figure><p>Активация виртуальных потоков в Spring Boot очень простая.</p><pre><code class="java">@Configuration
public class AsyncConfigVT {
	
  @Bean(name = "executorService")
  public ExecutorService executorService() {
		return Executors.newVirtualThreadPerTaskExecutor();
	}
}</code></pre><p>Нам лишь надо создать и предоставить другой executor для виртуального потока.</p><h4>Compose &amp; Combine</h4><p>Вопрос состоит в том, нужны ли нам Future и CompletableFuture при работе с виртуальными потоками. Решает это нашу проблему или нет? Нужны ли они нам при выборе опции виртуальных потоков? </p><p>Итак, если у вас есть виртуальные потоки и все, которые виртуальная машина делает за нас, надо ли нам создавать наши задачи и отправлять их на выполнение в executors? Или мы можем просто написать блок кода, и будет работать? </p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/f62/4fd/173/f624fd173c6e436ce6989afe188bc538.png" height="414" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/f62/4fd/173/f624fd173c6e436ce6989afe188bc538.png" width="1049"/></figure><pre><code class="java">@GetMapping("/run-tasks-vt")
public String runTasks() throws InterruptedException, ExecutionException {
	Future &lt; String &gt; taskl = taskService.processTask1();
	Future &lt; String &gt; task2 = taskService.processTask2();
	Future &lt; String &gt; task3 = taskService.processTask3();
	
    String combinedResult = task1.get() + "," + task2.get() + "," + task3.get();
	
    String composedResult = taskService.processTask4(combinedResult).get();
	return "Results: " + combinedResult + "; " + composedResult;
}</code></pre><p>В целом в данном коде присутствует все то же самое, что и раньше, то есть это не просто какая-то магия, присутствующая в виртуальных потоках. Так что давайте посмотрим на другой код, давайте вообразим, что у нас есть два репозитория: репозиторий пользователей и репозиторий задач, и нам необходимо получить пользователей из репозитория, получить задачу и отправить ее на выполнение во внешний сервис.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/f3e/ad4/dc2/f3ead4dc27e359a13a1b28b6e84ef1d0.png" height="550" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/f3e/ad4/dc2/f3ead4dc27e359a13a1b28b6e84ef1d0.png" width="668"/></figure><pre><code class="java">@Service
public class TaskServiceVT {
	private final UserRepositry userRepositry;
	private final TaskRepositry taskRepository;
	private final TaskExternalService taskExternalService;
	
    public TaskServiceVT(UserRepository userRepository, 
                         TaskRepository taskRepository, 
                         TaskExternalService taskExternalService) {
		this.userRepositry = userRepository;
		this.taskRepository = taskRepository;
		this.taskExternalService = taskExternalService;
	}
  }</code></pre><pre><code class="java">@Async
public CompletableFuture &lt; List &lt; String &gt;&gt; submitTasks(String userGroupId) {
	List &lt; Users &gt; users = userRepositry.findByGroupId(userGroupId);
	List &lt; Task &gt; tasks = taskRepository.findActiveTasks(userGroupId);
	List &lt; String &gt; ids = taskExternalService.submitTasks(users, tasks);
	return CompletableFuture.completedFuture(ids);
}</code></pre><p>Даже если мы активируем виртуальные потоки, это не будет автоматически распараллеливать наш запуск, он будет последовательным. Возможно, имеет смысл распараллелить все эти запросы, потому что они полностью независимые, они просто используют групповой ID и извлекают пользователей, а задачи работают полностью независимо, но переход к параллельному выполнению не произойдет “из коробки” только потому, что мы теперь работаем с виртуальными потоками, то есть они все еще выполнят их последовательно. </p><p>При этом, как только у нас появится блокирующий API в репозитории базы данных или во внешнем сервисе, платформенный поток будет откреплен и не сможет быть использован для другой задачи, так что, если наше приложение содержит много запросов и ограниченное количество платформенных потоков, оно будет работать эффективно, потому что такое же количество платформенных потоков будет обслуживать больше запросов от пользователей. Однако сам по себе одиночный запрос не станет быстрее.</p><figure class=""><img data-src="https://habrastorage.org/getpro/habr/upload_files/8ed/1cc/863/8ed1cc863408b901c1c6346866180046.png" height="256" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/8ed/1cc/863/8ed1cc863408b901c1c6346866180046.png" width="472"/></figure><p>Он даже может стать немного медленнее, но в целом использование платформенных потоков будет организовано более оптимально при использовании виртуальных потоков.</p><p>Так что переход к использованию виртуальных потоков не будет являться замещением для наших Futures и CompletableFutures. Это лишь способ, позволяющий использовать платформенные потоки в приложении наилучшим образом.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/611/ddc/cff/611ddccff48892fce5e22509450dffee.png" height="481" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/611/ddc/cff/611ddccff48892fce5e22509450dffee.png" width="1055"/></figure><p>В Spring Boot также возможно активировать виртуальные потоки в Tomcat. Нам надо только задать свойства. Это очень просто, надо лишь сказать приложению, что  “свойство включено” (как на иллюстрации выше), и Tomcat, как и в целом все наше приложение, вся бизнес-логика, будет использовать виртуальные потоки из коробки. </p><p>К сожалению, виртуальные потоки тоже имеют некоторые недостатки, определенные  скрытые ловушки. Во-первых, они не очень эффективны, когда у нас есть только задачи, требовательные к ресурсам CPU. Они очень хороши, когда у вас есть какие-то блокирующие вводы/выводы, что-то вроде вызовов базы данных, вызовов брокера сообщений или внешних сервисов.</p><p>Также бывают ситуации, когда виртуальный поток прикреплен к платформенному потоку и не может быть откреплен. Это случается с нативными вызовами и, к сожалению, это может случиться внутри синхронизированного блока. Так что, если у вас есть библиотека, написанная третьей стороной, синхронизированный блок может стать проблемой, открепление виртуального потока может оказаться невозможным. </p><p>Этот очень интересный эффект. Например, Jackson использует ThreadLocal, чтобы закешировать некоторые данные в потоке, потому что платформенный поток возвращен в пул, и потом он берет этот поток из пула в следующий раз, и он мог бы повторно использовать эту закешированную информацию, и это не работало бы с виртуальным потоком, потому что виртуальные потоки не помещаются в пул. Они создаются заново каждый раз.</p><p>И некоторые библиотеки могут даже показывать худшую производительность на виртуальных потоках. </p><p>Что интересно, иногда также возникает ситуация, вызывающая deadlock, которую находят в пулах подключений к базе данных. Идея состоит в том, что если пулы подключений опустошаются, а платформенный поток блокируется, чтобы дождаться, когда подключение вернется, но подключение принадлежит виртуальному потоку, а виртуальный поток ждет платформенного потока, чтобы прикрепиться к нему, и эти два блокера образуют deadlock.</p><p>Виртуальные потоки также могут не работать из коробки с некоторыми библиотеками, такими как HttpRequest и Apache HttpClient, потому что иногда эти библиотеки создают платформенный поток в явном виде, который не работает с виртуальным потоком или имеет синхронизированный блокер.  </p><p>Еще один побочный эффект, который может проявиться в существующих проектах, связан с повышением нагрузки, потому что приложения работают лучше с платформенными потоками. При переходе на виртуальные потоки приложения начинают производить гораздо больше вызовов к внешней системе за то же время, и это может стать проблемой для этих внешних систем. </p><p>Поэтому рекомендации для виртуальных потоков следующие:</p><ul><li><p>Избегать синхронизированных блокеров, используя вместо них ReentrantLock</p></li><li><p>Защищать или как минимум проверять внешние сервисы на способность выживать в условиях превышений по нагрузке</p></li><li><p>Иногда ThreadPools используются как ограничители (throttling), позволяющие иметь только три или пять или 10 или 20 параллельных потоков, но эта концепция не будет работать с виртуальными потоками, для этого нам нужен другой механизм</p></li><li><p>Главный случай применения виртуальных потоков — это блокирующие задачи со вводом/выводом, либо просто задачи, требовательные к ресурсам процессора без ввода/вывода; мы все еще можем переключать контекст, используя yield() или разбивать задачу на несколько независимых подзадач. При этом существует возможность делать это параллельно. </p></li></ul><p>Еще одна рекомендация состоит в том, чтобы мигрировать операционное приложение на виртуальные потоки не сразу, а итерациями и использовать нагрузочные тесты, стресс-тесты, canary-релизы, blue-green deployment, поскольку иногда не обходится без побочных эффектов. Поэтому очень важно хорошо тестировать приложение и быть осторожными в продакшен, когда мы активируем виртуальные потоки и помещаем их в настоящий продакшен под реальную прод нагрузку. Если вы хотите узнать больше о виртуальных потоках, можно обратиться к материалам от <a href="https://www.youtube.com/channel/UC_RV_tw0mK1aStb6h1eX77g"><u>Виктора</u></a> и <a href="https://hanno.codes/"><u>Ханно</u></a> (Victor Rentea и Hanno Embregts), они оба являются спикерами на Devoxx, у них обоих есть очень хороший подкаст, а также видео и статьи на тему виртуальных потоков.</p><h3>Structured Concurrency</h3><p>Эта опция появится в Java и Spring Boot лишь в будущем, но уже очень скоро, и будет использоваться как раз для взаимосвязанных задач, когда, например, первая задача завершилась неудачей, и не имеет смысла продолжать выполнять следующую задачу, и у нас есть над этим контроль. Или наоборот, случай успеха. Первая задача завершилась успешно, и мы можем остановиться и прервать другие потоки, так как желаемый результат уже получен. Именно таков основной сценарий применения Structured concurrency.</p><h3>Применение concurrency в приложениях</h3><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/70f/45f/9d6/70f45f9d62695cfe9bc2ef4b93f5c29e.png" height="554" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/70f/45f/9d6/70f45f9d62695cfe9bc2ef4b93f5c29e.png" width="1132"/></figure><p>Давайте просуммируем все сказанное и посмотрим, как и когда применять все описанные выше подходы к concurrency. Вкратце процесс принятия решения о выборе наилучшего подхода показан на блок-схеме на иллюстрации. Если же описывать его словами, то это будет выглядеть как описано ниже.</p><p>Представим себе, что у нас есть fork &amp; join задачи, и в первую очередь мы проверим, если у нас есть некоторые сложные данные для объединения потоков (streams). Если они у нас есть, возможно, мы можем использовать Reactive Paradigm. Затем проверяем, если ли у нас блокирующий ввод/вывод, что значит, что приложение много работает с вызовами внешних сервисов, баз данных. Если ответ «да», то определенно используем виртуальные потоки, это хороший выбор, но делаем мы это у учетом всех описанных выше недостатков данного подхода, а значит, действуем осторожно. Работаем с итерациями при миграции и осуществляем регулярные проверки через нагрузочные тесты и стресс-тесты. </p><p>Если ответ «нет», тогда у нас есть выбор, либо остаться с платформенными потоками, это абсолютно нормально, с Future, CompletableFuture и <code>@Async</code>, либо все еще используем виртуальные потоки, но немного разбиваем свои задачи, либо с помощью chunks, либо используя <code>yield()</code>, при этом обеспечивая возможность открепления виртуального потока от платформенного потока и давая возможность для другого потока работать в параллельном режиме.</p><p>Для задач типа fire and forget мы можем идти напрямую к последней проверке, потому что вряд ли мы тут имеем какое-то объединение данных, у нас нет интереса к результату при работе с задачами типа fire and forget. </p><p>И еще одна маленькая ветка, не поместившаяся в основную блок-схему: если у нас есть взаимосвязанные задачи, тогда это случай для Structed Concurrency, которая появится в следующем году. </p><figure class=""><img data-src="https://habrastorage.org/getpro/habr/upload_files/72c/f4b/08d/72cf4b08d04e112697c9804b38632273.png" height="274" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/72c/f4b/08d/72cf4b08d04e112697c9804b38632273.png" width="502"/></figure><p>На этом все 😀.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/5fd/388/92f/5fd38892fb3e4b89b881f0b93c384eb8.png" height="334" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/5fd/388/92f/5fd38892fb3e4b89b881f0b93c384eb8.png" width="1560"/></figure><p>Присоединяйтесь к русскоязычному сообществу разработчиков на Spring Boot в телеграм — <a href="https://t.me/+oBwACbkvJ19iODAy">Spring АйО</a>, чтобы быть в курсе последних новостей из мира разработки на Spring Boot и всего, что с ним связано.</p><p></p></div></div></div><!-- --><!-- --></div><!-- --><!-- --></div><!--]--><!-- --><div class="tm-article-presenter__meta" data-test-id="article-meta-links"><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Теги:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[java]"><span>java</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[spring]"><span>spring</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[kotlin]"><span>kotlin</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[spring+boot]"><span>spring boot</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[spring-boot]"><span>spring-boot</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[concurrency]"><span>concurrency</span></a><!--]--></li><!--]--><!-- --></ul></div><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Хабы:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/companies/spring_aio/articles/"><!--[--><span>Блог компании Spring АйО</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/hubs/programming/"><!--[--><span>Программирование</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/hubs/java/"><!--[--><span>Java</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/hubs/kotlin/"><!--[--><span>Kotlin</span><!--]--></a><!--]--></li><!--]--><!-- --></ul></div></div><!-- --><!--]--></article><!--]--></div><!-- --></div><div class="tm-article-sticky-panel" data-test-id="article-sticky-panel" style=""><div class="tm-data-icons tm-data-icons tm-data-icons_space-big tm-article-sticky-panel__icons" data-test-id="article-stats-icons"><div class="tm-article-rating tm-data-icons__item"><div class="tm-votes-meter tm-article-rating__votes-switcher"><svg class="tm-svg-img tm-votes-meter__icon tm-votes-meter__icon tm-votes-meter__icon_appearance-article" height="24" width="24"><title>Всего голосов 24: ↑24 и ↓0</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-rating"></use></svg><span class="tm-votes-meter__value tm-votes-meter__value_positive tm-votes-meter__value_appearance-article tm-votes-meter__value_rating tm-votes-meter__value" data-test-id="votes-meter-value" title="Всего голосов 24: ↑24 и ↓0">+25</span></div><!--teleport start--><!--teleport end--><!-- --></div><!-- --><!-- --><button class="bookmarks-button tm-data-icons__item" title="Добавить в закладки" type="button"><span class="tm-svg-icon__wrapper bookmarks-button__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Добавить в закладки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-favorite"></use></svg></span><span class="bookmarks-button__counter" title="Количество пользователей, добавивших публикацию в закладки">121</span></button><div class="tm-sharing tm-data-icons__item" title="Поделиться"><button class="tm-sharing__button" type="button"><svg class="tm-sharing__icon" viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M13.8 13.8V18l7.2-6.6L13.8 5v3.9C5 8.9 3 18.6 3 18.6c2.5-4.4 6-4.8 10.8-4.8z" fill="currentColor"></path></svg></button><!--teleport start--><!--teleport end--></div><div class="tm-article-comments-counter-link tm-data-icons__item" title="Читать комментарии"><a class="tm-article-comments-counter-link__link" data-test-id="counter-comments" href="/ru/companies/spring_aio/articles/862950/comments/"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value">6</span><!--]--></a><!-- --></div><!--[--><!--[--><!--[--><!-- --><!--]--><!--]--><!--]--><!--teleport start--><!--teleport end--><!-- --></div></div></div><!--[--><!--]--><div class="tm-article-presenter__footer"><!--[--><!--[--><div class="tm-article-blocks"><!-- --><!--[--><section class="tm-block tm-block tm-block_spacing-bottom"><!-- --><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-balanced"><!--[--><div class="tm-article-author" data-test-id="article-author-info"><!--[--><!--[--><div class="tm-article-author__company"><div class="tm-article-author__company-card"><div class="tm-company-snippet"><a class="tm-company-snippet__logo-link" href="/ru/companies/spring_aio/profile/"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="40" src="//habrastorage.org/getpro/habr/company/8f1/91a/458/8f191a4584b8fab12d15af23e447a1d5.png" width="40"/></div></a><div class="tm-company-snippet__info"><a class="tm-company-snippet__title" data-test-id="company-title" href="/ru/companies/spring_aio/profile/"><span>Spring АйО</span></a><div class="tm-company-snippet__description">Компания</div></div></div><div class="tm-article-author__buttons"><!-- --><!-- --></div></div><div class="tm-article-author__company-contacts"><!--[--><a class="tm-article-author__contact" href="https://telegram.me/spring_aio" rel="noopener" target="_blank">Telegram</a><a class="tm-article-author__contact" href="https://www.springnow.ru" rel="noopener" target="_blank">Сайт</a><!--]--></div><div class="tm-article-author__separator"></div></div><!--]--><!--]--><div class="tm-user-card tm-user-card tm-user-card_variant-article tm-article-author__user-card" data-async-called="true"><div class="tm-user-card__info-container"><div class="tm-user-card__header"><div class="tm-user-card__header-data"><a class="tm-user-card__userpic tm-user-card__userpic_size-40" href="/ru/users/spring_aio/"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" src="//habrastorage.org/getpro/habr/avatars/8e0/5e8/a1c/8e05e8a1c5fd4560f661efb2cb00e77e.png"/></div></a><div class="tm-user-card__meta"><div class="tm-counter-container tm-karma tm-karma" title=" 85 голосов "><div class="tm-counter-container__header"><!--[--><div class="karma-display positive" data-v-7635202e="">45</div><!-- --><!--]--></div><div class="tm-counter-container__footer"><!--[--><div class="tm-karma__text">Карма</div><!--teleport start--><!--teleport end--><!--]--></div></div><div class="tm-counter-container" title="Рейтинг пользователя"><div class="tm-counter-container__header"><!--[--><!--[--><!--]--><div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!-- --><div class="tm-votes-lever__score tm-votes-lever__score_appearance-rating tm-votes-lever__score_no-margin tm-votes-lever__score"><!--[--><span><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter_rating tm-votes-lever__score-counter" data-test-id="votes-score-counter">105.9</span></span><!--]--></div><!-- --></div><!--]--></div><div class="tm-counter-container__footer"><!--[--><span class="tm-rating__text tm-rating__text">Рейтинг</span><!--]--></div></div></div></div></div><div class="tm-user-card__info tm-user-card__info_variant-article tm-user-card__info"><div class="tm-user-card__title tm-user-card__title_variant-article tm-user-card__title"><span class="tm-user-card__name tm-user-card__name_variant-article tm-user-card__name">Spring АйО</span><a class="tm-user-card__nickname tm-user-card__nickname tm-user-card__nickname_variant-article" href="/ru/users/spring_aio/"> @spring_aio</a><!-- --></div><p class="tm-user-card__short-info tm-user-card__short-info_variant-article tm-user-card__short-info" data-test-id="user-card-speciality">Главный по Spring</p></div></div><div class="tm-user-card__buttons tm-user-card__buttons_variant-article tm-user-card__buttons"><!-- --><div class="tm-user-card__button"><div class="tm-button-follow tm-user-card__button-follow"><!-- --><button class="tm-button-follow__button tm-button-follow__button_big" data-test-id="follow-button" type="button">Подписаться</button></div></div><!-- --><div class="tm-user-card__button tm-user-card__button_write" data-test-id="user-card-conversations"><svg class="tm-svg-img tm-user-card__button-icon" height="16" width="16"><title>Отправить сообщение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#mail"></use></svg></div><!-- --></div><!-- --></div><!-- --></div><!--]--></div><!--]--><!-- --></section><!-- --><!--[--><!--]--><!--]--><div class="tm-article-blocks__comments"><div class="tm-article-page-comments" id="publication-comments"><div><!--[--><div class="tm-article-comments-counter-link tm-article-comments-counter-button"><a class="tm-article-comments-counter-link__link tm-article-comments-counter-link__link_button-style" data-test-id="counter-comments" href="/ru/companies/spring_aio/articles/862950/comments/"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon tm-article-comments-counter-link__icon_contrasted" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value tm-article-comments-counter-link__value_contrasted"> Комментарии 6 </span><!--]--></a><!-- --></div><!--]--></div></div></div><!--[--><!--[--><!--]--><section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title tm-block__title_variant-large">Публикации</h2><!--[--><!--]--></div><!-- --></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-condensed-slim"><!--[--><!--[--><div class="tm-tabs tm-tabs"><div class=""><!--[--><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_active tm-tabs__tab-link_slim tm-tabs__tab-link">Лучшие за сутки</button></span><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_slim tm-tabs__tab-link">Похожие</button></span><!--]--></div><!-- --></div><div class="similar-and-daily__tab-view"><div class="placeholder-wrapper"><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><div class="tm-placeholder-article-cards"><!--[--><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><!--]--></div><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --></div><!-- --></div><!--]--><!--]--></div><!--]--><!-- --></section><!--[--><!--]--><!-- --><!--[--><!--]--><!--]--></div><!--]--><!--]--></div></div><!--]--><!--]--></div></div><div class="tm-page__sidebar"><!--[--><div class="tm-layout-sidebar"><div class="tm-layout-sidebar__placeholder_initial"></div><div class="tm-sexy-sidebar_initial tm-sexy-sidebar" style="margin-top:0px;"><!--[--><!--]--><!-- --><div class="tm-layout-sidebar__placeholder_initial"></div><!--[--><section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Информация</h2><!--[--><!--]--></div><!-- --></header><!--[--><div class="tm-block__body tm-block__body"><!--[--><div class="tm-company-basic-info"><dl class="tm-description-list tm-description-list tm-description-list_variant-columns-nowrap"><dt class="tm-description-list__title tm-description-list__title_variant-columns-nowrap tm-description-list__title">Сайт</dt><dd class="tm-description-list__body tm-description-list__body_variant-columns-nowrap tm-description-list__body"><!--[--><a class="tm-company-basic-info__link" href="https://t.me/spring_aio" target="_blank">t.me</a><!--]--></dd></dl><dl class="tm-description-list tm-description-list tm-description-list_variant-columns-nowrap"><dt class="tm-description-list__title tm-description-list__title_variant-columns-nowrap tm-description-list__title">Дата регистрации</dt><dd class="tm-description-list__body tm-description-list__body_variant-columns-nowrap tm-description-list__body"><!--[--><time datetime="2024-05-27T07:08:22.000Z" title="2024-05-27, 10:08">27  мая  2024</time><!--]--></dd></dl><!-- --><dl class="tm-description-list tm-description-list tm-description-list_variant-columns-nowrap"><dt class="tm-description-list__title tm-description-list__title_variant-columns-nowrap tm-description-list__title">Численность</dt><dd class="tm-description-list__body tm-description-list__body_variant-columns-nowrap tm-description-list__body"><!--[-->11–30 человек<!--]--></dd></dl><!-- --><!-- --></div><!--]--></div><!--]--><!-- --></section><div class="tm-company-widgets"><!--[--><!--]--></div><!-- --><!-- --><!--]--><!-- --></div></div><!--]--></div></div><!-- --><!--]--></div></div></main><!-- --></div><div class="tm-footer-menu"><div class="tm-page-width"><!--[--><div class="tm-footer-menu__container"><!--[--><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Ваш аккаунт</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a href="/kek/v1/auth/habrahabr/?back=/ru/companies/spring_aio/articles/862950/&amp;hl=ru" rel="nofollow" target="_self">Войти</a></li><li class="tm-footer-menu__list-item"><a href="/kek/v1/auth/habrahabr-register/?back=/ru/companies/spring_aio/articles/862950/&amp;hl=ru" rel="nofollow" target="_self">Регистрация</a></li><!--]--></ul></div></div><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Разделы</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/articles/">Статьи</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/news/">Новости</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/hubs/">Хабы</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/companies/">Компании</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/users/">Авторы</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/sandbox/">Песочница</a></li><!--]--></ul></div></div><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Информация</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/help/">Устройство сайта</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/authors/codex/">Для авторов</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/companies/corpblogs/">Для компаний</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/docs/transparency/">Документы</a></li><li class="tm-footer-menu__list-item"><a href="https://account.habr.com/info/agreement/?hl=ru_RU" target="_blank">Соглашение</a></li><li class="tm-footer-menu__list-item"><a href="https://account.habr.com/info/confidential/?hl=ru_RU" target="_blank">Конфиденциальность</a></li><!--]--></ul></div></div><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Услуги</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/corporate-blogs/" target="_blank">Корпоративный блог</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/advertising/" target="_blank">Медийная реклама</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/native-special/" target="_blank">Нативные проекты</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/education-programs/" target="_blank">Образовательные программы</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/hello-startup/" target="_blank">Стартапам</a></li><!--]--></ul></div></div><!--]--></div><!--]--></div></div><div class="tm-footer"><div class="tm-page-width"><!--[--><div class="tm-footer__container"><!-- --><div class="tm-footer__social"><!--[--><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.facebook.com/habrahabr.ru" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Facebook</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-facebook"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://twitter.com/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Twitter</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-twitter"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://vk.com/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>VK</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-vk"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://telegram.me/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Telegram</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-telegram"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.youtube.com/channel/UCd_sTwKqVrweTt4oAKY5y4w" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Youtube</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-youtube"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://dzen.ru/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Яндекс Дзен</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-dzen"></use></svg></a><!--]--></div><!--teleport start--><!--teleport end--><button class="tm-footer__link"><!-- --> Настройка языка</button><a class="tm-footer__link" href="/ru/feedback/">Техническая поддержка</a><div class="tm-footer-copyright"><span class="tm-copyright"><span class="tm-copyright__years">© 2006–2025, </span><span class="tm-copyright__name"><a class="tm-copyright__link" href="https://company.habr.com/" rel="noopener" target="_blank">Habr</a></span></span></div></div><!--]--></div></div><!-- --><!--]--></div><!-- --></div></div>
<div id="overlays"><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--></div>
</body>
</html>
