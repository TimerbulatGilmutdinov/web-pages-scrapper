<!DOCTYPE html>

<html lang="ru">
<head>
<title>Паттерны применения многопоточности на коммерческом проекте (на примере Java) / Хабр</title>
</head>
<body>
<div id="mount"><div data-async-called="true" id="app"><div class="tm-layout__wrapper"><!--[--><!-- --><div></div><!-- --><header class="tm-header" data-test-id="header"><div class="tm-page-width"><!--[--><div class="tm-header__container"><!-- --><span class="tm-header__logo-wrap"><a class="tm-header__logo tm-header__logo_hl-ru tm-header__logo" href="/ru/"><svg class="tm-svg-img tm-header__icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a><span class="tm-header__beta-sign" style="display:none;">β</span></span><!--[--><div class="tm-dropdown tm-header__projects"><div class="tm-dropdown__head"><!--[--><button class="tm-header__dropdown-toggle"><svg class="tm-svg-img tm-header__icon tm-header__icon_dropdown" height="16" width="16"><title>Открыть список</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#arrow-down"></use></svg></button><!--]--></div><!-- --></div><a class="tm-header__become-author-btn" href="/ru/sandbox/start/">Как стать автором</a><div class="tm-feature tm-feature tm-feature_variant-inline tm-header__feature"><!-- --></div><!-- --><!--]--><!-- --></div><!--]--></div></header><div class="tm-layout"><div class="tm-page-progress-bar"></div><div class="tm-base-layout__header_is-sticky tm-base-layout__header" data-menu-sticky="true"><div class="tm-page-width"><!--[--><div class="tm-base-layout__header-wrapper"><div class="tm-main-menu"><div class="tm-main-menu__section"><nav class="tm-main-menu__section-content"><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/feed/">Моя лента</a><!--]--><!--[--><a class="tm-main-menu__item" href="/ru/articles/">Все потоки</a><!--]--><!--[--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/develop/">Разработка</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/admin/">Администрирование</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/design/">Дизайн</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/management/">Менеджмент</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/marketing/">Маркетинг</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/popsci/">Научпоп</a><!--]--><!--]--></nav></div></div><div class="tm-header-user-menu tm-base-layout__user-menu"><a class="tm-header-user-menu__item tm-header-user-menu__search" data-test-id="search-button" href="/ru/search/"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_search tm-header-user-menu__icon_dark" height="24" width="24"><title>Поиск</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#search"></use></svg></a><!-- --><!-- --><div class="tm-header-user-menu__item tm-header-user-menu__write"><div><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_write tm-header-user-menu__icon_dark" height="24" width="24"><title>Написать публикацию</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#write"></use></svg></div><!-- --></div><!--[--><div class="tm-header-user-menu__item"><button class="tm-header-user-menu__toggle" data-test-id="user-menu-settings"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_dark" height="24" width="24"><title>Настройки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#page-settings"></use></svg></button></div><a class="tm-header-user-menu__item" href="https://habr.com/kek/v1/auth/habrahabr/?back=/ru/articles/838402/&amp;hl=ru" rel="nofollow"><!--[--><button class="btn btn_solid btn_small tm-header-user-menu__login" type="button"><!--[-->Войти<!--]--></button><!--]--></a><!--]--><!-- --><!--teleport start--><!--teleport end--><!-- --></div></div><!--]--></div></div><!-- --><div class="tm-page-width"><!--[--><!--]--></div><main class="tm-layout__container"><div class="tm-page" data-async-called="true" hl="ru" style="--0c809c5a:16px;--a086013e:100%;--7c457026:0;"><div class="tm-page-width"><!--[--><!-- --><div class="tm-page__wrapper"><div class="tm-page__main_has-sidebar tm-page__main"><div class="pull-down"><!-- --><div class="pull-down__header" style="height:0px;"><div class="pull-down__content" style="bottom:10px;"><svg class="tm-svg-img pull-down__icon pull-down__arrow" height="24" width="24"><title>Обновить</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#pull-arrow"></use></svg></div></div><!--[--><!--[--><!-- --><div class="tm-article-presenter"><!--[--><!--]--><div class="tm-article-presenter__body" data-test-id="article-body"><div class="tm-misprint-area"><div class="tm-misprint-area__wrapper"><!--[--><article class="tm-article-presenter__content tm-article-presenter__content_narrow"><!--[--><div class="tm-article-presenter__header"><!--[--><!--]--><div class="tm-article-snippet tm-article-snippet tm-article-presenter__snippet"><!--[--><!--]--><div class="tm-article-snippet__meta-container"><div class="tm-article-snippet__meta"><span class="tm-user-info tm-article-snippet__author"><a class="tm-user-info__userpic" data-test-id="user-info-pic" href="/ru/users/panyukovnikolay/" title="panyukovnikolay"><div class="tm-entity-image"><!--[--><img alt="" class="tm-entity-image__pic" height="24" src="https://assets.habr.com/habr-web/img/avatars/053.png" width="24"/><!--]--></div></a><span class="tm-user-info__user tm-user-info__user_appearance-default" data-test-id="user-info-description"><a class="tm-user-info__username" href="/ru/users/panyukovnikolay/">panyukovnikolay <!-- --></a><!--[--><span class="tm-article-datetime-published"><time datetime="2024-09-30T09:00:10.000Z" title="2024-09-30, 12:00">30  сен  2024 в 12:00</time></span><!--]--></span></span></div><!-- --></div><h1 class="tm-title tm-title_h1" data-test-id="articleTitle" lang="ru"><span>Паттерны применения многопоточности на коммерческом проекте (на примере Java)</span></h1><div class="tm-article-snippet__stats" data-test-id="articleStats"><div class="tm-article-complexity tm-article-complexity_complexity-medium"><span class="tm-svg-icon__wrapper tm-article-complexity__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Уровень сложности</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#complexity-medium"></use></svg></span><span class="tm-article-complexity__label">Средний</span></div><div class="tm-article-reading-time"><span class="tm-svg-icon__wrapper tm-article-reading-time__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Время на прочтение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#clock"></use></svg></span><span class="tm-article-reading-time__label">22 мин</span></div><span class="tm-icon-counter tm-data-icons__item"><svg class="tm-svg-img tm-icon-counter__icon" height="24" width="24"><title>Количество просмотров</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-views"></use></svg><span class="tm-icon-counter__value" title="6906">6.9K</span></span></div><div class="tm-publication-hubs__container" data-test-id="articleHubsList"><div class="tm-publication-hubs"><!--[--><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/hubs/java/"><!--[--><span>Java</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/hubs/kotlin/"><!--[--><span>Kotlin</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><!--]--></div></div><div class="tm-article-labels" data-test-id="articleLabels"><div class="tm-article-labels__container"><div class="tm-publication-label tm-publication-label_variant-tutorial"><span>Туториал</span></div><!--[--><!--]--></div></div><!-- --><!-- --></div></div><!--[--><!-- --><div class="tm-article-body" data-gallery-root="" lang="ru"><div><!--[--><!--]--></div><div id="post-content-body"><div><div class="article-formatted-body article-formatted-body article-formatted-body_version-2"><div xmlns="http://www.w3.org/1999/xhtml"><p>Данная статья написана по мотивам одной из лекций, которые я читаю на своем курсе, подробности можете найти в <a href="https://t.me/panyukovnikolay" rel="noopener noreferrer nofollow">моем телеграм канале</a></p><p>Также в данной статье будут отсылки к моим прошлым статьям по многопоточности, поскольку они дополняют друг друга</p><p>Код из статьи можно найти <a href="https://github.com/PanyukovNN/multithreading-mentoring" rel="noopener noreferrer nofollow">в репозитории на GitHub</a></p><h2>Для чего нужна многопоточность</h2><p>Многопоточность неразрывно связана с отзывчивостью вашего приложения под нагрузкой. Если нагрузки нет, скажем 5 запросов в час, то и о многопоточности можно особо не задумываться</p><p>На коммерческих проектах чаще встречается ситуация, когда вашим приложением пользуются сотни и даже тысячи клиентов одновременно, в такие моменты без многопоточности никуда, при этом приложение должно работать эффективно, не расходуя лишние ресурсы</p><p>Я собрал самые часто встречаемые паттерны работы с многопоточностью из своей практики, которые помогают писать отказоустойчивые и надежные приложения</p><blockquote><p>В данной статье будем рассматривать многопоточность без применения webflux, однако если будет спрос, то распишу те же паттерны на webflux'е, там они выглядят более органично</p><p>Также не буду затрагивать Project Loom, поскольку мне не приходилось отлаживать и поддерживать код с использованием Loom на коммерческом проекте (Java 21 еще не используем), но когда-нибудь я напишу подробную и понятную статью по Loom</p></blockquote><h2>Стоимость потоков в Java и пулы потоков</h2><p>Про стоимость потоков в Java я расписал в предыдущей статье <a href="https://habr.com/ru/articles/811289/" rel="noopener noreferrer nofollow">про webflux</a>, поэтому здесь напишу тезисно. Потоки используют следующие ресурсы:</p><ul><li><p>CPU - переключение между потоками, их создание и завершение требует процессорного времени, при этом если количество потоков становится слишком большим, примерно &gt; 3-4 тысяч (зависит от мощностей сервера и возможностей системы), то процессор начинает тратить значительное количество времени на переключение между ними, производительность приложения перестает расти и даже падает</p></li><li><p>RAM - стек потока занимает место в оперативной памяти</p></li><li><p>Количество потоков ограничено возможностями Операционной системы</p></li></ul><p>Для решения этих проблем мы должны создавать ограниченное число потоков, при этом если количество задач превышает количество созданных потоков, они должны помещаться в очередь, где будут дожидаться своего выполнения. Для этого предназначены пулы потоков - ExecutorService'ы</p><p>Подробно про ExecutorService'ы я рассказал в <a href="https://habr.com/ru/articles/802113/" rel="noopener noreferrer nofollow">другой своей статье</a>, там я разобрал как правильно создавать эластичные пулы потоков и объяснил почему не стоит использовать стандартные пулы из фабрики Executors</p><p>Для демонстрации паттернов нам понадобятся executorService’ы, создавать мы их будем по такому образцу:</p><details class="spoiler"><summary>Создание executorService:</summary><div class="spoiler__content"><pre><code class="java">@Bean(destroyMethod = "shutdown")
public ExecutorService elasticExecutor() {
    return createElasticExecutor(10, 100);
}

private ThreadPoolExecutor createElasticExecutor(int threads, int queueCapacity) {
    BlockingQueue&lt;Runnable&gt; queue = new ArrayBlockingQueue&lt;&gt;(queueCapacity);

    ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(
        threads, threads,
        60L, TimeUnit.SECONDS,
        queue, new ThreadPoolExecutor.AbortPolicy());

    threadPoolExecutor.allowCoreThreadTimeOut(true);

    return threadPoolExecutor;
}</code></pre><p></p></div></details><p>Теперь, когда мы поняли, что нужно использовать пулы потоков для эффективного управления ресурсами, можем переходить непосредственно к разбору паттернов</p><h2>Какие паттерны мы рассмотрим</h2><ul><li><p>Запуск асинхронного процесса по сигналу</p></li><li><p>Параллельное выполнение задач без ожидания результата</p></li><li><p>Ограничение количества потоков для вызова внешнего сервиса</p></li><li><p>Выполнение Scheduled задач</p></li><li><p>Параллельное обращение к разным источникам, с последующим объединением результатов</p></li><li><p>Контекст</p></li><li><p>Ожидание асинхронного ответа</p></li></ul><h2>Запуск асинхронного процесса по сигналу</h2><p>Пожалуй это наиболее простой паттерн с которого стоит начать</p><p>Сигналом может выступать любое событие, которое не дожидается результата выполнения сценария, а лишь запускает его, например:</p><ul><li><p>HTTP сообщение - приходит HTTP запрос на составление аналитического отчета, сам отчет будет формироваться несколько минут, при этом клиентский сервис не хочет ждать так долго, ему нужно лишь запустить процесс</p></li><li><p>Сообщение из брокера (Kafka, IBM MQ, RabbitMQ) - мы не всегда хотим обрабатывать сообщение в том же потоке, в котором оно поступает, при высоких нагрузках лучше переключиться на отдельный пул потоков, чтобы не блокировать чтение новых сообщений (в той же kafka количество читающих потоков равно количеству партиций, на которые подписался экземпляр приложения, а их, как правило, мало)</p></li><li><p>Запуск события по времени - например выполнить перерасчет данных в бд</p></li></ul><p>Для запуска асинхронного выполнения какого-то процесса необходимо его передать пулу потоков, сделать это можно несколькими способами:</p><ul><li><p>Напрямую вызвать <code>executorService.execute(() -&gt; { … })</code>:</p></li></ul><pre><code class="java">public void runWithStraightExecuteMethod() {
    runAsyncTasksElasticExecutor.execute(() -&gt; {
        executeLongOperation();
    });
}</code></pre><ul><li><p>Через аннотацию @Async:</p></li></ul><pre><code class="java">@Async("runAsyncTasksElasticExecutor")
public void runWithAnnotation() {
    executeLongOperation();
}</code></pre><ul><li><p>Через CompletableFuture с передачей executorService'а в качестве параметра метода:</p></li></ul><pre><code class="java">public void runWithCompletableFuture() {
    CompletableFuture.runAsync(() -&gt; {
            executeLongOperation();
        },
        runAsyncTasksElasticExecutor);
}</code></pre><p>Все три вышеприведенных куска кода идентичны в плане поведения</p><p>Если запустить любой из них, то вызывающий поток будет отпущен, а выполнение метода <code>executeLongOperation()</code> начнется в потоке executorService’а</p><h2>Параллельное выполнение задач без ожидания результата</h2><p>Данный паттерн является альтернативным вариантом предыдущего, но все же заслуживает рассмотрения, т.к. часто встречается на практике</p><p>Допустим вам поступило сообщение, которое нужно отправить в разные внешние источники по HTTP или другому протоколу. При этом нам не важен порядок в котором будет выполняться отправка, а также результаты каждой отправки не зависят от результатов предыдущих (независимы)</p><p>Это означает, что данные задачи могут выполняться в параллельных потоках</p><p>Для начала создадим интерфейс с единственным методом, назначением которого будет отправить сообщение во внешний сервис:</p><pre><code class="java">public interface MessageSender {
	void send(Message message);
}</code></pre><p>При этом может быть сколько угодно сервисов, реализующих данный интерфейс</p><details class="spoiler"><summary>Демонстрационный пример такого сервиса:</summary><div class="spoiler__content"><pre><code class="java">@Slf4j
@Service
public class MessageSender1implements MessageSender {

    @Override
	public void send(Message message) {
        // Выполнение операции отправки
        MentoringUtil.sleep(1500);

        log.info("Сообщение отправлено в источник #1");
    }
}</code></pre><p></p></div></details><p>Напишем класс, который будет передавать обработку сразу нескольким MessageSender’ам в разных потоках:</p><pre><code class="java">@Service
@RequiredArgsConstructor
public class SendInParallelExample {

    private final List&lt;MessageSender&gt; messageSenders;
	private final ExecutorService runParallelTasksElasticExecutor;

	public void sendMessageToSeveralTargets(Message message) {
        messageSenders.forEach(messageSender -&gt;
            CompletableFuture.runAsync(() -&gt; 
    		    messageSender.send(message), runParallelTasksElasticExecutor)
        );
    }
}</code></pre><p>Пояснения к коду:</p><ol><li><p>Импортируем коллекцию бинов, реализующих интерфейс MessageSender и бин ExecutorService, в котором будет происходить выполнение кода отправщиков</p></li><li><p>Итерируемся по бинам MessageSender’ам, и для каждого выполняем асинхронный вызов <code>CompletableFuture.runAsync(…)</code>, без ожидания результата, вторым параметром передаем ExecutorService, чтобы выполнение происходило в его потоках</p></li></ol><p>Таким способом мы можем запустить параллельные задачи. При этом мы можем пользоваться и другими подходами, приведенными в предыдущем паттерне (прямой вызов <code>executorService.execute(…)</code> или аннотация @Async)</p><blockquote><p>Пару слов про parallelStream. Мы могли бы сделать то же самое через .parallelStream().forEach(…), без использования CompletableFuture, но данный подход не подойдет для параллельного выполнения блокирующих операций (таких как внешние Rest вызовы), поскольку parallelStream использует ForkJoinPool, количество рабочих потоков которого ограниченно количеством ядер процессора, что может приводить к низкой производительности</p></blockquote><h2>Ограничение количества потоков для вызова внешнего сервиса</h2><p>В микросервисной архитектуре желательно ограничивать количество одновременных вызовов внешних микросервисов, чтобы предотвратить возможные перегрузки. Если внешний сервис начинает деградировать, то и вызывающие сервисы могут начать деградировать вслед за ним, поскольку заканчиваются их потоки</p><blockquote><p>Особенно остро данная проблема проявляется при работе с WebFlux, когда нет явного ограничения количеством потоков и ничто не мешает сделать одновременно десятки тысяч вызовов</p></blockquote><p>Такая ситуация называется <strong>Chain Of Failures,</strong> когда деградация одного микросервиса приводит к каскадной деградации остальных, и ограничение количества вызовов позволяет предотвратить падение</p><blockquote><p>Дополнительным решением данной проблемы является паттерн Circuit Breaker, но он скорее относится к паттернам микросервисов и не имеет отношения к многопоточности, поэтому здесь рассмотрен не будет</p></blockquote><p>Варианты ограничения потоков в Java:</p><ul><li><p>Semaphore</p></li><li><p>CompletableFuture с выделенным пулом потоков</p></li><li><p>Готовые инструменты библиотеки resilience4j: @Bulkhead и @RateLimiter</p></li></ul><h3>Semaphore</h3><p>Исторически, для ограничения количества потоков, применяется класс Semaphore</p><p>Пример использования:</p><pre><code class="java">private final Semaphore semaphore = new Semaphore(10);

public String parsePageWithSemaphoreRateLimiting() {
	boolean isAcquired;
	try {
        isAcquired = semaphore.tryAcquire(2, TimeUnit.SECONDS);
    } catch (InterruptedException e) {
		throw new CustomAppException(e);
    }

	if (!isAcquired) {
		log.info("Не удалось захватить поток семафора");

		return "fallback result";
    }

	try {
		return marketPlaceParser.parsePage();
    } catch (Exception e) {
		return "fallback result";
    } finally {
        semaphore.release();
    }
}</code></pre><p>Пояснения к коду:</p><ol><li><p>Создаем семафор на 10 разрешений</p></li><li><p>В течение двух секунд поток пытается захватить разрешение семафора</p></li><li><p>Если захватить не удалось, то прекращаем выполнение метода, возвращая заготовленный ответ (так называемый "fallback")</p></li><li><p>Если удалось захватить, то выполняем внешний вызов с помощью метода <code>marketPlaceParser.parsePage()</code></p></li><li><p>Обязательно отпускаем разрешение семафора в блоке finally</p></li><li><p>Также в случае возникновения исключений при обращении к внешнему сервису возвращаем fallback</p></li></ol><p>У данного решения есть несколько недостатков:</p><ul><li><p>код выглядит громоздко</p></li><li><p>выполнение и ожидание происходит в вызывающих потоках, а значит мы можем заставить ждать все вызывающие потоки, сильно ухудшая производительность системы</p></li><li><p>нет гибкости при ожидании результата выполнения, которую нам дает CompletableFuture</p></li></ul><h3>CompletableFuture с выделенным пулом потоков</h3><p>В качестве более продвинутого подхода можно использовать CompletableFuture с выделенным пулом потоков (мы его уже видели ранее)</p><p>Благодаря CompletableFuture вы можете более гибко управлять результатом, дожидаясь его при необходимости, выставляя таймаут и обрабатывая ошибки</p><p>Решение:</p><pre><code class="java">public CompletableFuture&lt;String&gt; parsePageWithRateLimitingCompletableFuture() {
	try {
		return CompletableFuture.supplyAsync(marketPlaceParser::parsePage, parserElasticExecutor)
            .orTimeout(4, TimeUnit.SECONDS)
            .exceptionally(e -&gt; {
                log.warn("Ошибка при вызове внешнего сервиса", e);

				return "fallback result";
            });
    } catch (RejectedExecutionException e) {
        log.warn("Переполнена очередь выполонения задач на вызов внешнего сервиса");

		return CompletableFuture.completedFuture("fallback result");
    }
}</code></pre><p>Пояснения к коду:</p><ol><li><p>Передаем вызов внешнего сервиса выделенному пулу потоков, с помощью явного указания пула вторым параметром в методе <code>CompletableFuture.supplyAsync(…, parserElasticExecutor)</code></p></li><li><p>Выставляем таймаут в 4 секунды на ожидание ответа</p></li><li><p>В операторе <code>.exceptionally(…)</code> отлавливаем возможные исключения при вызове сервиса и возвращаем fallback</p></li><li><p>Оборачиваем весь код в try-catch, поскольку если очередь задач parserElasticExecutor’а будет переполнена, то при попытке вызвать <code>supplyAsync(..)</code> будет выброшено исключение RejectedExecutionException, в таком случае мы также возвращаем fallback</p></li></ol><p>Данный подход лучше семафора по следующим параметрам:</p><ul><li><p>есть таймаут на вызов внешнего сервиса</p></li><li><p>fallback результат в случае ошибок</p></li><li><p>вызовы внешнего сервиса происходят в потоках выделенного executorService’а, в котором мы можем регулировать как максимальное количество потоков, так и глубину очереди задач</p></li></ul><p>Благодаря этому мы получаем ожидаемое поведение и можем гибко контроллировать подаваемую нагрузку, однако всё еще код выглядит громоздко</p><h3>Готовые инструменты библиотеки resilience4j: @Bulkhead и @RateLimiter</h3><p>Для использования resilience4j добавим зависимость:</p><pre><code class="java">implementation "io.github.resilience4j:resilience4j-spring-boot2:2.2.0"</code></pre><h4>Bulkhead</h4><p>Имеет две реализации SEMAPHORE (по умолчанию) и THREADPOOL, которые по сути предлагают те же самые решения, что были продемонстрированы выше</p><p><strong>Bulkhead semaphore</strong></p><p>Добавим конфигурацию в application.yml:</p><pre><code class="yaml">resilience4j:
  bulkhead:
    instances:
      parserSemaphore:
        maxConcurrentCalls: 10
        maxWaitDuration: 5s</code></pre><ul><li><p><em>parserSemaphore</em> - название конфигурации</p></li><li><p><em>maxConcurrentCalls</em> - количество разрешений семафора</p></li><li><p><em>maxWaitDuration</em> - время в течение которого поток будет ждать разрешения от семафора, если таймаут превышен, то будет выброшено исключение BulkheadFullException</p></li></ul><p>Решение:</p><pre><code class="java">@Bulkhead(name = "parserSemaphore", fallbackMethod = "fallbackMethod")
public String parsePageWithSemaphoreBulkheadResilience4j() {
	return marketPlaceParser.parsePage();
}

public String fallbackMethod(Exception e) {
    log.warn("Ошибка при вызове внешнего сервиса", e);

	return "fallback result";
}</code></pre><p>Пояснения к коду:</p><ol><li><p>Используем аннотацию @Bulkhead, в поле name указываем наименование конфигурации, а также указываем наименование fallback метода</p></li><li><p>Вызываем внешний сервис</p></li><li><p>Объявляем fallback метод - он должен быть публичным, принимать исключение в качестве аргумента и возвращать тот же тип данных в результате, что и основной метод</p></li></ol><p>Все исключения при выполнении метода будут отловлены с помощью fallback-метода</p><p>По сути это более удобная запись того что было продемонстрировано ранее с классическим семафором, поэтому остается проблема с ожиданием разрешений семафора в вызывающих потоках</p><p><strong>Bulkhead theadpool</strong></p><p>Опишем конфигурацию:</p><pre><code class="yaml">resilience4j:
  bulkhead:
    instances:
      parserThreadPool:
        coreThreadPoolSize: 10
				maxThreadPoolSize: 10
        queueCapacity: 100</code></pre><p>Конфигурация представляет собой стандартные настройки, которые используются для создания ThreadPoolExecutor:</p><ul><li><p><em>coreThreadPoolSize</em> - количество core потоков пула</p></li><li><p><em>maxThreadPoolSize</em> - максимальное число потоков пула</p></li><li><p><em>queueCapacity</em> - глубина очереди задач</p></li></ul><p>Также нам понадобиться @TimeLimiter для корректной работы таймаута:</p><pre><code class="yaml">resilience4j:
  ...
  timelimiter:
    instances:
      parserThreadPool:
        timeoutDuration: 3s</code></pre><p>Решение:</p><pre><code class="java">@TimeLimiter(name = "parserThreadPool", fallbackMethod = "fallbackMethodCompletableFuture")
@Bulkhead(name = "parserThreadPool", fallbackMethod = "fallbackMethodCompletableFuture", type = Bulkhead.Type.THREADPOOL)
public CompletableFuture&lt;String&gt; parsePageWithThreadPoolBulkheadAndTimeLimiterResilience4j() {
	String response = marketPlaceParser.parsePage();

	return CompletableFuture.completedFuture(response);
}

public CompletableFuture&lt;String&gt; fallbackMethodCompletableFuture(Exception e) {
    log.warn("Ошибка при вызове внешнего сервиса", e);

	return CompletableFuture.completedFuture("fallback result");
}</code></pre><p>Пояснения к коду:</p><ol><li><p>В аннотации @Bulkhead указываем тип Bulkhead.Type.THREADPOOL</p></li><li><p>Указываем @TimeLimiter</p></li><li><p>Вызываем внешний сервис внутри метода, при этом выполнение будет происходить в пуле потоков, созданном в @Bulkhead</p></li><li><p>Возвращаем CompletableFuture.completedFuture(…), во-первых возврат CompletableFuture в результате является обязательным для аннотаций @Bulkhead (с типом THREADPOOL) и @TimeLimiter, во-вторых это позволяет нам гибко управлять ожиданием результата</p></li><li><p>Объявляем fallback метод</p></li></ol><p>При вышеуказанном подходе, мы получаем то же самое поведение, что было описано выше с использованием выделенного пула потоков и CompletableFuture</p><p>Здесь также добавлен TimeLimiter, поскольку если указать оператор <code>.orTimeout(…)</code> в CompletableFuture, то таймаут будет работать некорректно - все потоки, ожидающие в очереди executorService’а bulkhead’а не увидят оператор <code>.orTimeout()</code>, поэтому будут ожидать своей очереди бесконечно долго</p><blockquote><p>Будьте внимательны. Стандартный threadPool, который создается внутри кода resilience4j, будет использовать core потоки до тех пор, пока очередь задач не заполнится до конца, и только потом начнет увеличивать количество потоков до значения maxThreadPoolSize, что может приводить к нежелательному поведению. Для пресечения такого поведения я рекомендую создавать количество core потоков равное maxThreadPoolSize, и при этом их должно быть немного, поскольку они не будут завершаться</p></blockquote><h4>RateLimiter</h4><p>Bulkhead паттерн ограничивает максимальное количество одновременно вызывающих потоков, однако этого не всегда достаточно. Представим что внешний сервис отвечает очень быстро - за 10мс каждый ответ, и мы использовали простое ограничение количества одновременных вызовов 10-ю штуками, тогда мы столкнемся с проблемой, что за секунду может выполняться до 1000 запросов (каждый поток по 100 вызовов в секунду), тем самым ограничение вроде бы есть, но нагрузки все равно могут быть высокими</p><p>Эту проблему решает RateLimiter. Он похож на Bulkhead, но при этом добавляет “скользящее окно”, с помощью которого ограничивается количество вызовов за определенное время, например не более 100 запросов за последние 10 секунд</p><p>Т.е. если в первую секунду выполниться 100 вызовов, то в остальные 9 секунд все дальнейшие запросы будут возвращать fallback (или обрабатываться с ошибкой RequestNotPermitted, если fallback не настроен)</p><p>Получается что данный паттерн дает нам более правильное поведение для сдерживания подаваемой нагрузки на внешний сервис</p><p>Реализовывать такой паттерн самостоятельно будет сложно, поэтому воспользуемся готовым решением от resilience4j</p><p>Конфигурация:</p><pre><code class="yaml">resilience4j:
  rateLimiter:
    instances:
      parser:
        timeoutDuration: 5s
        limitRefreshPeriod: 1s
        limitForPeriod: 10</code></pre><ul><li><p><em>timeoutDuration</em> - время в течение которого поток ждет разрешения</p></li><li><p><em>limitRefreshPeriod</em> - период за который ограничивается число вызовов</p></li><li><p><em>limitForPeriod</em> - предельное число вызовов за время указанное в limitRefreshPeriod</p></li></ul><p>Решение:</p><pre><code class="java">@RateLimiter(name = "parser", fallbackMethod = "fallbackMethodCompletableFuture")
public CompletableFuture&lt;String&gt; parsePageWithRateLimitingResilience4jCompletableFuture() {
	return CompletableFuture.supplyAsync(marketPlaceParser::parsePage, parserElasticExecutor)
        .orTimeout(2, TimeUnit.SECONDS);
}

public CompletableFuture&lt;String&gt; fallbackMethodCompletableFuture(Exception e) {
    log.warn("Ошибка при вызове внешнего сервиса", e);

	return CompletableFuture.completedFuture("fallback result");
}</code></pre><p>Пояснения к коду:</p><ol><li><p>Используем аннотацию @RateLimiter, указываем имя конфигурации и fallback метод</p></li><li><p>Передаем вызовы внешнего сервиса отдельному executorService’у с помощью метода <code>CompletableFuture.supplyAsync(…)</code></p></li><li><p>Выставляем таймаут</p></li><li><p>Объявляем fallback метод</p></li></ol><p>Что мы получаем:</p><ul><li><p>код выглядит лаконично</p></li><li><p>есть таймаут на вызов внешнего сервиса</p></li><li><p>возвращаем fallback результат в случае ошибок</p></li><li><p>вызовы внешнего сервиса происходят в потоках выделенного executorService’а</p></li><li><p>в ответе возвращается CompletableFuture, благодаря чему мы можем гибко управлять результатом</p></li></ul><p>Таким образом, мы получаем сплошные преимущества от такого подхода, поэтому я рекомендую применять именно RateLimiter для ограничения количества вызовов внешнего сервиса</p><h2>Выполнение Scheduled задач</h2><p>Данное решение я разобрал в другой <a href="https://habr.com/ru/articles/771112/" rel="noopener noreferrer nofollow">статье</a>, с более подробными примерами, здесь изложу подход более кратко</p><p>По умолчанию аннотация @Scheduled использует один и тот же поток для выполнения всех методов, помеченных данной аннотацией. В связи с этим могут возникать конфликты, когда один из @Scheduled методов еще не закончил свое выполнение, и пришло время выполнять другой @Scheduled метод, в таком случае второй метод просто не будет запущен, т.к. поток занят</p><p>Для решения следует использоваться связку аннотаций @Scheduled + <a href="https://www.notion.so/users/async" rel="noopener noreferrer nofollow">@</a>Async, тогда при запуске @Scheduled задачи она будет передаваться на выполнение пулу потоков, указанному в <a href="https://www.notion.so/users/async" rel="noopener noreferrer nofollow">@</a>Async, а единственный @Scheduled поток будет отпущен</p><p>При этом чаще всего нам подойдет поведение, когда в аннотации @Async используется executorService на 1 поток, но для разных @Scheduled методов используются разные executorService'ы. Тогда мы получаем следующее поведение - каждый @Scheduled метод будет выполняться в своем потоке, при этом повторные запуски метода будут игнорироваться, если предыдущий запуск не завершил свою работу</p><p>Создадим executorService на один поток:</p><pre><code class="java">@Bean(destroyMethod = "shutdown")
public ExecutorService refreshCacheSingleExecutor() {
	return Executors.newSingleThreadExecutor();
}</code></pre><blockquote><p>Обратите внимание. Executors.newSingleThreadExecutor() имеет важный недостаток - его очередь задач неограниченна, что может приводить к утечкам памяти, в случаях когда задачи в него поступают чаще, чем успевают выполняться</p></blockquote><p>Пример правильного создания executorService’а на один поток:</p><pre><code class="java">@Bean(destroyMethod = "shutdown")
public ExecutorService correctSingleExecutor() {
	return new ThreadPoolExecutor(
		1, 1, 
		0L, TimeUnit.MILLISECONDS,
		new ArrayBlockingQueue&lt;&gt;(1), new ThreadPoolExecutor.DiscardPolicy());
}</code></pre><p>При попытке добавить новую задачу в такой executorService, она будет проигнорирована, если он занят другой задачей, поскольку мы использовали политику переполнения DiscardPolicy, которая тихо игнорирует добавление новой задачи в executorService. Если же вы хотите явно видеть ошибку о том, что пул потоков занят на момент добавления новой задачи, используйте политику AbortPolicy</p><p>Применим executorService с помощью аннотации @Async к @Scheduled задаче:</p><pre><code class="java">@Async("refreshCacheSingleExecutor")
@Scheduled(cron = "*/2 * * * * *")
public void refreshCache() {
	// долгая операция

    log.info("Кеш обновлен");
}</code></pre><p>Таким образом мы получаем поведение, которое и ожидали:</p><ul><li><p>плановая задача запускается всегда в нужное время при наличии конфликтов</p></li><li><p>и в то же время она не будет запущена, если предыдущий запуск этой же задачи не завершил свое выполнение</p></li></ul><h2>Параллельное обращение к разным источникам, с последующим объединением результатов</h2><p>Часто встречается ситуация, когда необходимо обратиться в несколько микросервисов, полученные ответы объединить и в таком виде вернуть результат</p><p>Для наглядности допустим внешние сервисы довольно медлительны, первый возвращает ответ за 2 секунды, второй за 3 секунды</p><p>Напишем простой код с последовательным вызовом внешних сервисов:</p><pre><code class="java">public ProductPageResponse sequentialExecution(UUID productId) {
    ProductInfo productInfo = productInfoClient.fetchProductInfo(productId);
    List&lt;Feedback&gt; feedbacks = feedbacksClient.fetchFeedbacks(productId);

    ProductPageResponse productPage = productMapper.toPage(productInfo, feedbacks);

    log.info("Страница продукта: {}", productPage);

	return productPage;
}</code></pre><p>Пояснения к коду:</p><ol><li><p><code>productInfoClient.fetchProductInfo(…)</code> - вызывает сервис получения информации по товару, выполняется 2 секунды</p></li><li><p><code>feedbacksClient.fetchFeedbacks(…)</code> - вызывает сервис получения отзывов о товаре, выполняется 3 секунды</p></li><li><p><code>productMapper.toPage(productInfo, feedbacks)</code> - объединяет ответы в один результат</p></li></ol><p>Запустим код:</p><pre><code class="bash">: Время выполнения: 6132</code></pre><p>Результат превышает суммарное время вызовов внешних микросервисов, но мы хотим сэкономить время и распараллелить их</p><p>Перепишем данный метод с использованием CompletableFuture:</p><pre><code class="java">public CompletableFuture&lt;ProductPageResponse&gt; parallelExecution(UUID productId) {
	CompletableFuture&lt;ProductInfo&gt; productInfoCompletableFuture = CompletableFuture.supplyAsync(() -&gt; productInfoClient.fetchProductInfo(productId), productInfoElasticExecutor);
    CompletableFuture&lt;List&lt;Feedback&gt;&gt; feedbacksCompletableFuture = CompletableFuture.supplyAsync(() -&gt; feedbacksClient.fetchFeedbacks(productId), feedbacksElasticExecutor);

	return CompletableFuture.allOf(productInfoCompletableFuture, feedbacksCompletableFuture)
        .thenApply(ignore -&gt; {
            ProductInfo productInfo = productInfoCompletableFuture.getNow(new ProductInfo());
            List&lt;Feedback&gt; feedbacks = feedbacksCompletableFuture.getNow(List.of());

            ProductPageResponse productPage = productMapper.toPage(productInfo, feedbacks);

            log.info("Страница продукта: {}", productPage);

			return productPage;
        });
}</code></pre><p>Пояснения к коду:</p><ol><li><p>Запускаем параллельные вызовы сервисов при помощи <code>CompletableFuture.supplyAsync(…, elasticExecutor)</code> - вызовы клиентов начнутся в тот же момент, когда мы создаем CompletableFuture</p></li><li><p>Объединяем созданные CompletableFuture с помощью оператора <code>.allOf(...)</code></p></li><li><p>К сожалению нет такого оператора, который бы позволял сразу получить результаты выполнения CompletableFuture после оператора <code>.allOf(…)</code>, поэтому нам приходится внутри оператора <code>.thenApply()</code> вызывать методы <code>.getNow()</code> у исходных CompletableFuture, поскольку они оба уже завершили свое выполнение, а значит их результаты могут быть получены немедленно</p></li><li><p>Затем объединяем результаты запросов и возвращаем ответ</p></li></ol><blockquote><p>Обратите внимание, при вызове <code>.supplyAsync(…, elasticExecutor)</code> без передачи executorService’а вторым параметром, мы бы запустили выполнение кода в common ForkJoinPool из CompletableFuture. Ранее я уже объяснил почему FJP не подходит для выполнения блокирующих вызовов. Поэтому следует передавать вторым параметром executorService</p></blockquote><p>Запустим код:</p><pre><code class="bash">: Время выполнения: 4297</code></pre><p>Результат в районе 4х секунд, а значит он меньше суммарного времени обращения к внешним микросервисам, тем самым мы получили ожидаемое поведение, при этом объединив результат вызова двух сервисов</p><h2>Контекст</h2><p>Бывает двух типов:</p><ul><li><p>ограниченный одним потоком</p></li><li><p>доступный из разных потоков</p></li></ul><blockquote><p>Также бывает распределенный контекст (кеш) между несколькими микросервисами (redis, hazelcast), но это уже ближе к паттернам микросервисов</p></blockquote><h3>Контекст, ограниченный одним потоком</h3><p>Контекст в рамках одного потока основывается на механизме ThreadLocal, который позволяет привязать объект к текущему потоку, тем самым данный объект будет невидим для остальных потоков</p><h4>ThreadLocal</h4><p>Создадим класс, который будет инкапсулировать в себе ThreadLocal:</p><pre><code class="java">@Component
public class ThreadContextHolder {

	private final ThreadLocal&lt;Map&lt;String,String&gt;&gt; threadLocalContext = ThreadLocal.withInitial(HashMap::new);

	public static void put(String key,String value) {
        threadLocalContext.get().put(key, value);
    }

	public static String get(String key) {
		return threadLocalContext.get().get(key);
    }
}</code></pre><p>Пояснения к коду:</p><ol><li><p>Создаем ThreadLocal, в который помещаем пустую HashMap, в нашем случае достаточно иметь в качестве значения строку, но обычно используется Object, чтобы хранить любые объекты</p></li><li><p>Создаем методы put и get, для более удобного использования контекста</p></li></ol><p>Создадим web фильтр, в котором будем имитировать парсинг JWT:</p><pre><code class="java">@Component
public class ParseJwtThreadLocalFilterextends HttpFilter {

    @Override
	protected void doFilter(HttpServletRequest request,
                            HttpServletResponse response,
                            FilterChain chain) throws IOException, ServletException {
		String authorizationHeader = request.getHeader(HttpHeaders.AUTHORIZATION);
        JwtParams jwtParams = parseJwt(authorizationHeader);

        ThreadContextHolder.put("username", jwtParams.getUsername());

        chain.doFilter(request, response);
    }

	private JwtParams parseJwt(String authorizationHeader) {
        // здесь должен быть парсинг JWT
    }
}</code></pre><p>Пояснения к коду:</p><ol><li><p>Создаем бин - наследник HttpFilter, который будет вызываться на каждый входящий HTTP запрос</p></li><li><p>Парсим jwt из заголовка Authorization</p></li><li><p>Кладем в контекст имя пользователя</p></li><li><p>Вызываем следующий фильтр по цепочке</p></li></ol><p>Теперь мы можем извлекать данные из контекста в любом месте, где используется данный поток:</p><pre><code class="java">@Slf4j
@RestController
@RequestMapping("/api/v1/thread-context")
public class ThreadContextController {

    @GetMapping
	public String getUsername() {
		return "Имя пользователя из контекста потока: " + ThreadContextHolder.get("username");
    }
}</code></pre><p>Пояснения к коду:</p><ol><li><p>В методе контроллера обращаемся к контексту - поскольку наш HttpFilter будет вызываться в том же потоке что и метод контроллера, мы можем извлечь нужные данные из контекста</p></li></ol><p>Чтобы не писать свою обертку над ThreadLocal можно воспользоваться готовым решением - MDC контекстом</p><h4>MDC контекст</h4><p>Данный класс поставляется вместе с библиотеками логгирования, в Spring по умолчанию это logback</p><p>Перепишем предыдущее решение с использованием MDC</p><details class="spoiler"><summary>HttpFilter:</summary><div class="spoiler__content"><pre><code class="java">@Component
public class ParseJwtMdcFilterextends HttpFilter {

    @Override
	protected void doFilter(HttpServletRequest request,
                            HttpServletResponse response,
                            FilterChain chain)throws IOException, ServletException {
		String authorizationHeader = request.getHeader(HttpHeaders.AUTHORIZATION);
        JwtParams jwtParams = parseJwt(authorizationHeader);

        MDC.put("username", jwtParams.getUsername());

        chain.doFilter(request, response);
    }

	private JwtParams parseJwt(String authorizationHeader) {
        // здесь должен быть парсинг JWT
    }
}</code></pre><p></p></div></details><details class="spoiler"><summary>Контроллер:</summary><div class="spoiler__content"><pre><code class="java">@Slf4j
@RestController
@RequestMapping("/api/v1/thread-context")
@RequiredArgsConstructor
public class MDCExampleController {

    @GetMapping
	public String getUsername() {
		return "Имя пользователя из контекста потока: " + MDC.get("username");
    }
}</code></pre><p></p></div></details><p>Поведение будет полностью идентичным предыдущему примеру</p><p>Отличительной чертой MDC контекста является то, что его поля доступны при записи логов. Благодаря нему к логам добавляются разные параметры, например уникальный идентификатор входящего запроса для последующего поиска логов, принадлежащих одному запросу</p><p>В продемонстрированных примерах с ThreadLocal и MDC есть важный аспект - потоки томката переиспользуются для выполнения запросов разных клиентов (после выполнения запроса клиента, в этом же потоке начинает выполняться следующий запрос, т.е. типичное поведение ExecutorService’а), из-за чего в ThreadLocal контексте может оставаться информация из предыдущих запросов</p><p>Поэтому такой контекст необходимо очищать в момент завершения бизнес логики, либо перед началом его использования</p><blockquote><p>Подход с контекстом в рамках одного потока очень удобен для традиционного синхронного приложения, где обработка каждого запроса клиента происходит в своем потоке. И не подходит для реактивных приложений на webflux, поскольку там разные потоки могут выполнять разные части одного запроса</p></blockquote><h3>Контекст, доступный из разных потоков</h3><p>Возможные варианты реализации контекста:</p><ul><li><p>volatile или Atomic переменная</p></li><li><p>Конкурентная коллекция - ConcurrentHashMap</p></li><li><p>Готовые реализации - Caffeine, Spring Cache</p></li></ul><p>Здесь покажу только пример с ручным созданием кеша Caffeine</p><p>Работа с конкурентными коллекциями и volatile/Atomic переменными очень проста и почти не отличается от взаимодействия с обычной коллекцией или переменной</p><p>А если расписывать применение Spring Cache то статья начинает сильно уходить от основной темы</p><h4>Кеш с использованием Caffeine</h4><p>Импортируем библиотеку:</p><pre><code class="java">implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'</code></pre><p>Решение:</p><pre><code class="java">@Slf4j
@Service
public class CaffeineExampleService {

	private final Cache&lt;String,String&gt; cache = Caffeine.newBuilder()
        .expireAfterAccess(Duration.ofMinutes(1))
        .maximumSize(100)
        .build();

	public String process(String request) {
		String cachedResult = cache.getIfPresent(request);
		if (cachedResult != null) {
            log.info("Возвращаю закешированный результат");

			return cachedResult;
        }

        MentoringUtil.sleep(1000);

		String response = "test response";
        cache.put(request, response);

		return response;
    }
}</code></pre><p>Пояснения к коду:</p><ol><li><p>Создаем кеш (данный интерфейс похож на Map), выставляем время жизни и максимальное количество записей в кеше</p></li><li><p>Реализуем простой метод с кешированием результата выполнения</p></li></ol><p>Благодаря возможности выставлять время жизни и размер кеша, мы предотвращаем возможные утечки памяти</p><h2>Ожидание асинхронного ответа</h2><p>Иногда встречается необходимость в ожидании асинхронного ответа от внешнего сервиса, например мы отправляем запрос в один топик kafka, и хотим дождаться ответа из другого топика (прослушивание топика происходит в отдельном потоке)</p><p>В качестве решения нам потребуется хранить в контексте callback для каждого отправленного сообщения</p><p>Также есть важное условие, мы будем отправлять в запросе уникальный идентификатор, и этот же идентификатор должен быть передан внешним сервисом в ответе, чтобы мы могли сопоставить запрос и ответ</p><p>Создадим класс с контекстом:</p><pre><code class="java">@Service
public class KafkaMessageContext {

    private final Cache&lt;String, CompletableFuture&lt;KafkaResponse&gt;&gt; messageContext = Caffeine.newBuilder()
        .expireAfterAccess(Duration.ofMinutes(1))
        .maximumSize(1000)
        .build();

    public CompletableFuture&lt;KafkaResponse&gt; createMessageCompletableFuture(String id) {
        CompletableFuture&lt;KafkaResponse&gt; completableFuture = new CompletableFuture&lt;&gt;();
        messageContext.put(id, completableFuture);

        return completableFuture;
    }

    public CompletableFuture&lt;KafkaResponse&gt; findById(String id) {
        return messageContext.getIfPresent(id);
    }

    public void removeById(String id) {
        messageContext.invalidate(id);
    }
}</code></pre><p>Пояснения к коду:</p><ol><li><p>Создаем кеш, где в качестве ключа будет выступать уникальный идентификатор, а в качестве значения callback в виде CompletableFuture, также указываем время жизни и размер кеша, чтобы предотвратить возможные утечки памяти</p></li><li><p>Добавляем метод создания callback’а, и добавления его в контекст, callback создаем через <code>new CompletableFuture&lt;&gt;()</code>, который позволит нам подписаться на него для ожидания ответа</p></li><li><p>Добавляем методы findById и removeById</p></li></ol><p>Реализуем сервис обмена сообщениями с ожиданием ответа:</p><pre><code class="java">@Service
@RequiredArgsConstructor
public class AwaitAsyncRequestService {

    private final KafkaProducer kafkaProducer;
    private final KafkaMessageContext kafkaMessageContext;

    public KafkaResponse sendAndReceive(KafkaRequest request) {
        CompletableFuture&lt;KafkaResponse&gt; responseCompletableFuture = kafkaMessageContext.createMessageCompletableFuture(request.getId());

        kafkaProducer.send(request);

        try {
            return responseCompletableFuture
                .get(5000, TimeUnit.MILLISECONDS);
        } catch (TimeoutException | ExecutionException | InterruptedException e) {
            throw new CustomAppException(e);
        } finally {
            kafkaMessageContext.removeById(request.getId());
        }
    }
}</code></pre><p>Пояснения к коду:</p><ol><li><p>Вызываем метод создания callback’а</p></li><li><p>Выполняем отправку в kafka</p></li><li><p>Ожидаем ответ от callback’а в течение 5 секунд</p></li><li><p>Обрабатываем возможные исключения, удаляем запись из кеша в блоке finally</p></li></ol><p>Создадим класс слушателя ответного топика:</p><pre><code class="java">@Slf4j
@Service
@RequiredArgsConstructor
public class KafkaConsumer {

    private final JsonUtil jsonUtil;
    private final KafkaMessageContext kafkaMessageContext;

    @KafkaListener(topics = "${app.kafka.topicOut}", groupId = "test")
    public void receiveResponse(ConsumerRecord&lt;String, String&gt; consumerRecord) {
        KafkaResponse response = jsonUtil.fromJson(consumerRecord.value(), KafkaResponse.class);

        CompletableFuture&lt;KafkaResponse&gt; responseCompletableFuture = kafkaMessageContext.findById(response.getId());

        if (responseCompletableFuture == null) {
            log.info("Получено сообщение в ответный топик для которого не найден callback: {}", response);
        } else {
            responseCompletableFuture.complete(response);
        }
    }
}</code></pre><p>Пояснения к коду:</p><ol><li><p>Слушаем исходящий топик</p></li><li><p>По идентификатору входящего сообщения пытаемся найти callback в контексте</p></li><li><p>Если callback найден, то вызываем метод complete, с этого момента продолжается выполнение кода в методе sendAndReceive класса AwaitAsyncRequestService</p></li></ol><p>С помощью данного решения мы можем дождаться любого асинхронного ответа</p><blockquote><p>В случае с kafka есть одна особенность, которую надо обязательно учитывать, если у вашего приложения будет больше одного экземпляра, то необходимо чтобы каждый экземпляр приложения получал все сообщения из ответного топика, поскольку есть вероятность, что ответ будет прочитан другим экземпляром и тогда ваш ответ будет потерян</p></blockquote><h3>Итог</h3><p>В данной статье я постарался показать практические примеры, с которыми сталкивался в работе, не касаясь низкоуровневых инструментов volatile, synchronized, барьеров и др.</p><p>Представленные паттерны являются лишь кирпичиками, из которых складывается общая работа приложения</p><p>Правильное их применение требует внимательности и тщательного тестирования, обдумывайте и проверяйте возможные корнер кейсы, особенно если ваше приложение работает с повышенными нагрузками</p><p>Надеюсь вам неоднократно пригодится материал данной статьи на реальном проекте, спасибо что дочитали</p><p></p></div></div></div><!-- --><!-- --></div><!-- --><!-- --></div><!--]--><!-- --><div class="tm-article-presenter__meta" data-test-id="article-meta-links"><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Теги:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[%D0%BC%D0%BD%D0%BE%D0%B3%D0%BE%D0%BF%D0%BE%D1%82%D0%BE%D1%87%D0%BD%D0%BE%D1%81%D1%82%D1%8C]"><span>многопоточность</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[completablefuture]"><span>completablefuture</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[semaphore]"><span>semaphore</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[resilience4j]"><span>resilience4j</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[Java]"><span>Java</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[%D0%BF%D0%B0%D1%82%D1%82%D0%B5%D1%80%D0%BD%D1%8B]"><span>паттерны</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[%D0%BA%D0%B5%D1%88%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5]"><span>кеширование</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[scheduled]"><span>scheduled</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[executorservice]"><span>executorservice</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[async]"><span>async</span></a><!--]--></li><!--]--><!-- --></ul></div><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Хабы:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/hubs/java/"><!--[--><span>Java</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/hubs/kotlin/"><!--[--><span>Kotlin</span><!--]--></a><!--]--></li><!--]--><!-- --></ul></div></div><!-- --><!--]--></article><!--]--></div><!-- --></div><div class="tm-article-sticky-panel" data-test-id="article-sticky-panel" style=""><div class="tm-data-icons tm-data-icons tm-data-icons_space-big tm-article-sticky-panel__icons" data-test-id="article-stats-icons"><div class="tm-article-rating tm-data-icons__item"><div class="tm-votes-meter tm-article-rating__votes-switcher"><svg class="tm-svg-img tm-votes-meter__icon tm-votes-meter__icon tm-votes-meter__icon_appearance-article" height="24" width="24"><title>Всего голосов 10: ↑10 и ↓0</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-rating"></use></svg><span class="tm-votes-meter__value tm-votes-meter__value_positive tm-votes-meter__value_appearance-article tm-votes-meter__value_rating tm-votes-meter__value" data-test-id="votes-meter-value" title="Всего голосов 10: ↑10 и ↓0">+13</span></div><!--teleport start--><!--teleport end--><!-- --></div><!-- --><!-- --><button class="bookmarks-button tm-data-icons__item" title="Добавить в закладки" type="button"><span class="tm-svg-icon__wrapper bookmarks-button__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Добавить в закладки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-favorite"></use></svg></span><span class="bookmarks-button__counter" title="Количество пользователей, добавивших публикацию в закладки">85</span></button><div class="tm-sharing tm-data-icons__item" title="Поделиться"><button class="tm-sharing__button" type="button"><svg class="tm-sharing__icon" viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M13.8 13.8V18l7.2-6.6L13.8 5v3.9C5 8.9 3 18.6 3 18.6c2.5-4.4 6-4.8 10.8-4.8z" fill="currentColor"></path></svg></button><!--teleport start--><!--teleport end--></div><div class="tm-article-comments-counter-link tm-data-icons__item" title="Читать комментарии"><a class="tm-article-comments-counter-link__link" data-test-id="counter-comments" href="/ru/articles/838402/comments/"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value">1</span><!--]--></a><!-- --></div><!--[--><!--[--><!--[--><!-- --><!--]--><!--]--><!--]--><!--teleport start--><!--teleport end--><!-- --></div></div></div><!--[--><!--]--><div class="tm-article-presenter__footer"><!--[--><!--[--><div class="tm-article-blocks"><!-- --><!--[--><section class="tm-block tm-block tm-block_spacing-bottom"><!-- --><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-balanced"><!--[--><div class="tm-article-author" data-test-id="article-author-info"><!--[--><!--]--><div class="tm-user-card tm-user-card tm-user-card_variant-article tm-article-author__user-card" data-async-called="true"><div class="tm-user-card__info-container"><div class="tm-user-card__header"><div class="tm-user-card__header-data"><a class="tm-user-card__userpic tm-user-card__userpic_size-40" href="/ru/users/panyukovnikolay/"><div class="tm-entity-image"><!--[--><img alt="" class="tm-entity-image__pic" src="https://assets.habr.com/habr-web/img/avatars/053.png"/><!--]--></div></a><div class="tm-user-card__meta"><div class="tm-counter-container tm-karma tm-karma" title=" 17 голосов "><div class="tm-counter-container__header"><!--[--><div class="karma-display positive" data-v-7635202e="">13</div><!-- --><!--]--></div><div class="tm-counter-container__footer"><!--[--><div class="tm-karma__text">Карма</div><!--teleport start--><!--teleport end--><!--]--></div></div><div class="tm-counter-container" title="Рейтинг пользователя"><div class="tm-counter-container__header"><!--[--><!--[--><!--]--><div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!-- --><div class="tm-votes-lever__score tm-votes-lever__score_appearance-rating tm-votes-lever__score"><!--[--><span><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter_rating tm-votes-lever__score-counter" data-test-id="votes-score-counter">0</span></span><!--]--></div><!-- --></div><!--]--></div><div class="tm-counter-container__footer"><!--[--><span class="tm-rating__text tm-rating__text">Рейтинг</span><!--]--></div></div></div></div></div><div class="tm-user-card__info tm-user-card__info_variant-article tm-user-card__info"><div class="tm-user-card__title tm-user-card__title_variant-article tm-user-card__title"><!-- --><a class="tm-user-card__nickname tm-user-card__nickname tm-user-card__nickname_variant-article" href="/ru/users/panyukovnikolay/"> @panyukovnikolay</a><!-- --></div><p class="tm-user-card__short-info tm-user-card__short-info_variant-article tm-user-card__short-info" data-test-id="user-card-speciality">Пользователь</p></div></div><div class="tm-user-card__buttons tm-user-card__buttons_variant-article tm-user-card__buttons"><!-- --><div class="tm-user-card__button"><div class="tm-button-follow tm-user-card__button-follow"><!-- --><button class="tm-button-follow__button tm-button-follow__button_big" data-test-id="follow-button" type="button">Подписаться</button></div></div><!-- --><div class="tm-user-card__button tm-user-card__button_write" data-test-id="user-card-conversations"><svg class="tm-svg-img tm-user-card__button-icon" height="16" width="16"><title>Отправить сообщение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#mail"></use></svg></div><!-- --></div><!-- --></div><!-- --></div><!--]--></div><!--]--><!-- --></section><!-- --><!--[--><div class="banner-wrapper leaderboard tm-page-article__banner" data-v-ad758baa="" style="--467224fc:200px;--58ff5eba:auto;"><!--[--><div class="placeholder-wrapper placeholder" data-v-ad758baa=""><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><div class="adfox-banner-placeholder leaderboard" data-v-12f7bcca=""><div class="image loads" data-v-12f7bcca=""></div><div class="lines" data-v-12f7bcca=""><div class="line loads" data-v-12f7bcca=""></div><div class="line loads" data-v-12f7bcca=""></div><div class="line loads" data-v-12f7bcca=""></div></div></div><!-- --></div><div class="tm-adfox-banner" data-v-ad758baa="" id="adfox_164725660339535756"></div><!--]--></div><!--]--><!--]--><div class="tm-article-blocks__comments"><div class="tm-article-page-comments" id="publication-comments"><div><!--[--><div class="tm-article-comments-counter-link tm-article-comments-counter-button"><a class="tm-article-comments-counter-link__link tm-article-comments-counter-link__link_button-style" data-test-id="counter-comments" href="/ru/articles/838402/comments/"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon tm-article-comments-counter-link__icon_contrasted" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value tm-article-comments-counter-link__value_contrasted"> Комментарии 1 </span><!--]--></a><!-- --></div><!--]--></div></div></div><!--[--><!--[--><!--]--><section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title tm-block__title_variant-large">Публикации</h2><!--[--><!--]--></div><!-- --></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-condensed-slim"><!--[--><!--[--><div class="tm-tabs tm-tabs"><div class=""><!--[--><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_active tm-tabs__tab-link_slim tm-tabs__tab-link">Лучшие за сутки</button></span><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_slim tm-tabs__tab-link">Похожие</button></span><!--]--></div><!-- --></div><div class="similar-and-daily__tab-view"><div class="daily-articles-list"><ul class="tm-article-card-list"><!--[--><!--]--><div class="tm-bordered-card"><!-- --><!--[--><!--]--></div></ul><div class="daily-articles-block__button-container"><button class="btn btn_transparent btn_small tm-button tm-button_color-horizon" type="button"><!--[--><!--[-->Показать лучшие за всё время<!--]--><!--]--></button></div></div><!-- --></div><!--]--><!--]--></div><!--]--><!-- --></section><!--[--><div><div class="placeholder-wrapper"><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><div class="tm-placeholder-promo"><div class="tm-placeholder-promo__header"><div class="tm-placeholder__line tm-placeholder__line_promo-title"></div></div><div class="tm-placeholder-promo__body"><div class="tm-placeholder-promo__posts"><div class="tm-placeholder-promo__post"><div class="tm-placeholder-promo__image"></div><div class="tm-placeholder__line tm-placeholder__line_post-title"></div></div><div class="tm-placeholder-promo__post"><div class="tm-placeholder-promo__image"></div><div class="tm-placeholder__line tm-placeholder__line_post-title"></div></div><div class="tm-placeholder-promo__post"><div class="tm-placeholder-promo__image"></div><div class="tm-placeholder__line tm-placeholder__line_post-title"></div></div></div><div class="tm-placeholder-promo__dots"><div class="tm-placeholder-promo__dot"></div><div class="tm-placeholder-promo__dot"></div><div class="tm-placeholder-promo__dot"></div></div></div></div><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --></div></div><div><div class="placeholder-wrapper"><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><div class="tm-placeholder-inset tm-placeholder-salary"><div class="tm-placeholder-inset__header"><div class="tm-placeholder__line tm-placeholder__line_inset-header loads"></div></div><div class="tm-placeholder-salary__body"><div class="tm-placeholder-salary__text"><div class="tm-placeholder__line tm-placeholder__line_salary_average"></div><div class="tm-placeholder-salary__description"><div class="tm-placeholder__line loads"></div><div class="tm-placeholder__line loads"></div><div class="tm-placeholder__line loads"></div><div class="tm-placeholder__line loads"></div></div></div><div class="tm-placeholder-salary__image loads"></div></div><div class="tm-placeholder-inset__footer tm-placeholder-inset__footer_salary"><div class="tm-placeholder__line tm-placeholder__line_inset-footer loads"></div></div></div><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --></div></div><!--]--><!-- --><!--[--><!--]--><!--]--></div><!--]--><!--]--></div></div><!--]--><!--]--></div></div><div class="tm-page__sidebar"><!--[--><div class="tm-layout-sidebar"><div class="tm-layout-sidebar__placeholder_initial"></div><div class="tm-sexy-sidebar_initial tm-sexy-sidebar" style="margin-top:0px;"><!--[--><!--]--><!-- --><div class="tm-layout-sidebar__ads_initial tm-layout-sidebar__ads"><div class="banner-wrapper half-page tm-layout-sidebar__banner tm-layout-sidebar__banner_top" data-v-ad758baa="" style="--467224fc:600px;--58ff5eba:auto;"><!--[--><div class="placeholder-wrapper placeholder" data-v-ad758baa=""><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><div class="adfox-banner-placeholder half-page" data-v-12f7bcca=""><div class="image loads" data-v-12f7bcca=""></div><div class="lines" data-v-12f7bcca=""><div class="line loads" data-v-12f7bcca=""></div><div class="line loads" data-v-12f7bcca=""></div><div class="line loads" data-v-12f7bcca=""></div></div></div><!-- --></div><div class="tm-adfox-banner" data-v-ad758baa="" id="adfox_164725680533065327"></div><!--]--></div></div><!--[--><!-- --><section class="tm-block tm-block tm-block_spacing-around tm-stories-block" data-async-called="true" data-navigatable="" tabindex="0"><header class="tm-block__header tm-block__header"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Истории</h2><!--[--><!--]--></div><!-- --></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-equal"><!--[--><div class="tm-stories-empty"><!--[--><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><!--]--></div><!-- --><!--]--></div><!--]--><!-- --></section><section class="tm-block tm-block tm-block_spacing-around" data-async-called="true"><header class="tm-block__header tm-block__header"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Работа</h2><!--[--><!--]--></div><!-- --></header><!--[--><div class="tm-block__body tm-block__body"><!--[--><!--[--><div class="tm-vacancies-block__item"><a class="tm-vacancies-block__vacancy-title" href="https://career.habr.com/vacancies/java_developer" target="_blank">Java разработчик</a><div class="tm-vacancies-block__vacancies-count">214
    вакансий</div></div><!--]--><!--]--></div><!--]--><footer class="tm-block__footer"><!--[--><a class="tm-block-extralink" href="https://career.habr.com/catalog">Все вакансии</a><!--]--></footer></section><section class="tm-block tm-block tm-block_spacing-around block" data-async-called="true" data-v-ebf6a21b=""><header class="tm-block__header tm-block__header"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Ближайшие события</h2><!--[--><!--]--></div><!-- --></header><!--[--><div class="tm-block__body tm-block__body"><!--[--><div class="swiper-container slider" data-v-ebf6a21b="" style="--swiper-space-between:22px;"><div class="swiper-wrapper"><!--[--><!--[--><div class="swiper-slide" data-v-ebf6a21b=""><!--[--><section class="tm-block tm-block tm-block_spacing-none" data-v-ebf6a21b="" id="588" tabindex="-1"><!-- --><!--[--><div class="tm-event-card tm-event-card_is-widget"><a class="" href="/ru/events/588/"><img alt="" class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png" loading="eager" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png, https://habrastorage.org/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png 2x"/></a><!-- --><div class="tm-event-card__info"><div class="tm-event-card__date"><!-- --><div class="tm-event-card__day"><span>17  февраля   – 24  марта  </span></div></div><a class="tm-event-card__title-link" href="/ru/events/588/"><span>Конкурс «Снежный код» от Хекслета. Три гранта на бесплатное 10-месячное обучение</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!-- --></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a class="tm-event-card__link" href="/ru/events/#588">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><!--]--></div></div></div><!--]--><!-- --></section><!--]--></div><div class="swiper-slide" data-v-ebf6a21b=""><!--[--><section class="tm-block tm-block tm-block_spacing-none" data-v-ebf6a21b="" id="596" tabindex="-1"><!-- --><!--[--><div class="tm-event-card tm-event-card_is-widget"><a class="" href="/ru/events/596/"><img alt="" class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png" loading="eager" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png, https://habrastorage.org/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png 2x"/></a><!-- --><div class="tm-event-card__info"><div class="tm-event-card__date"><!-- --><div class="tm-event-card__day"><span>20  марта  </span></div></div><a class="tm-event-card__title-link" href="/ru/events/596/"><span>Офлайн-конференция Хабр х K-team: как удерживать таланты в 2025 году</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><!-- --></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a class="tm-event-card__link" href="/ru/events/#596">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!-- --></section><!--]--></div><div class="swiper-slide" data-v-ebf6a21b=""><!--[--><section class="tm-block tm-block tm-block_spacing-none" data-v-ebf6a21b="" id="604" tabindex="-1"><!-- --><!--[--><div class="tm-event-card tm-event-card_is-widget"><a class="" href="/ru/events/604/"><img alt="" class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png" loading="eager" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png, https://habrastorage.org/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png 2x"/></a><!-- --><div class="tm-event-card__info"><div class="tm-event-card__date"><!-- --><div class="tm-event-card__day"><span>20  марта  </span></div></div><a class="tm-event-card__title-link" href="/ru/events/604/"><span>IX HappyWorkForum | Аутентичность и ментальное здоровье персонала</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><span class="tm-event-card__places-separator"> • </span></span><span class="tm-event-card__places-item"><span>Онлайн</span><!-- --></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a class="tm-event-card__link" href="/ru/events/#604">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!-- --></section><!--]--></div><div class="swiper-slide" data-v-ebf6a21b=""><!--[--><section class="tm-block tm-block tm-block_spacing-none" data-v-ebf6a21b="" id="612" tabindex="-1"><!-- --><!--[--><div class="tm-event-card tm-event-card_is-widget"><a class="" href="/ru/events/612/"><img alt="" class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png" loading="eager" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png, https://habrastorage.org/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png 2x"/></a><!-- --><div class="tm-event-card__info"><div class="tm-event-card__date"><!-- --><div class="tm-event-card__day"><span>20  марта  </span></div></div><a class="tm-event-card__title-link" href="/ru/events/612/"><span>Вебинар «Мастерская бюджета: как управлять затратами на облачные ресурсы»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!-- --></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a class="tm-event-card__link" href="/ru/events/#612">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-admin"><span>Администрирование</span></div><!--]--></div></div></div><!--]--><!-- --></section><!--]--></div><div class="swiper-slide" data-v-ebf6a21b=""><!--[--><section class="tm-block tm-block tm-block_spacing-none" data-v-ebf6a21b="" id="616" tabindex="-1"><!-- --><!--[--><div class="tm-event-card tm-event-card_is-widget"><a class="" href="/ru/events/616/"><img alt="" class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png" loading="eager" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png, https://habrastorage.org/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png 2x"/></a><!-- --><div class="tm-event-card__info"><div class="tm-event-card__date"><!-- --><div class="tm-event-card__day"><span>21  марта  </span></div></div><a class="tm-event-card__title-link" href="/ru/events/616/"><span>Бизнес-конференция «Digital Brand Day 2025: Орбита 2025»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><!-- --></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a class="tm-event-card__link" href="/ru/events/#616">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-marketing"><span>Маркетинг</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!-- --></section><!--]--></div><div class="swiper-slide" data-v-ebf6a21b=""><!--[--><section class="tm-block tm-block tm-block_spacing-none" data-v-ebf6a21b="" id="606" tabindex="-1"><!-- --><!--[--><div class="tm-event-card tm-event-card_is-widget"><a class="" href="/ru/events/606/"><img alt="" class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/400/0cb/fb8/4000cbfb86e5b97097f11d84cc50f089.png" loading="eager" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/400/0cb/fb8/4000cbfb86e5b97097f11d84cc50f089.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/400/0cb/fb8/4000cbfb86e5b97097f11d84cc50f089.png, https://habrastorage.org/getpro/habr/upload_files/400/0cb/fb8/4000cbfb86e5b97097f11d84cc50f089.png 2x"/></a><!-- --><div class="tm-event-card__info"><div class="tm-event-card__date"><!-- --><div class="tm-event-card__day"><span>24  марта  </span></div></div><a class="tm-event-card__title-link" href="/ru/events/606/"><span>Серия вебинаров «DevOps Middle: AvitoTech vs X5 Tech»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!-- --></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a class="tm-event-card__link" href="/ru/events/#606">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-admin"><span>Администрирование</span></div><!--]--></div></div></div><!--]--><!-- --></section><!--]--></div><div class="swiper-slide" data-v-ebf6a21b=""><!--[--><section class="tm-block tm-block tm-block_spacing-none" data-v-ebf6a21b="" id="608" tabindex="-1"><!-- --><!--[--><div class="tm-event-card tm-event-card_is-widget"><a class="" href="/ru/events/608/"><img alt="" class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png" loading="eager" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png, https://habrastorage.org/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png 2x"/></a><!-- --><div class="tm-event-card__info"><div class="tm-event-card__date"><!-- --><div class="tm-event-card__day"><span>27  марта  </span></div></div><a class="tm-event-card__title-link" href="/ru/events/608/"><span>Вебинар «Контент-маркетинг здорового человека: как привлечь внимание аудитории»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!-- --></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a class="tm-event-card__link" href="/ru/events/#608">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-marketing"><span>Маркетинг</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!-- --></section><!--]--></div><div class="swiper-slide" data-v-ebf6a21b=""><!--[--><section class="tm-block tm-block tm-block_spacing-none" data-v-ebf6a21b="" id="618" tabindex="-1"><!-- --><!--[--><div class="tm-event-card tm-event-card_is-widget"><a class="" href="/ru/events/618/"><img alt="" class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png" loading="eager" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png, https://habrastorage.org/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png 2x"/></a><!-- --><div class="tm-event-card__info"><div class="tm-event-card__date"><!-- --><div class="tm-event-card__day"><span>3  апреля  </span></div></div><a class="tm-event-card__title-link" href="/ru/events/618/"><span>Реалити для разработчиков: узнайте, как строится новое публичное облако MWS</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!-- --></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a class="tm-event-card__link" href="/ru/events/#618">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><!--]--></div></div></div><!--]--><!-- --></section><!--]--></div><div class="swiper-slide" data-v-ebf6a21b=""><!--[--><section class="tm-block tm-block tm-block_spacing-none" data-v-ebf6a21b="" id="620" tabindex="-1"><!-- --><!--[--><div class="tm-event-card tm-event-card_is-widget"><a class="" href="/ru/events/620/"><img alt="" class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg" loading="eager" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg, https://habrastorage.org/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg 2x"/></a><!-- --><div class="tm-event-card__info"><div class="tm-event-card__date"><!-- --><div class="tm-event-card__day"><span>3  апреля  </span></div></div><a class="tm-event-card__title-link" href="/ru/events/620/"><span>Открытая встреча «System Analysis Meetup SberHealth»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><span class="tm-event-card__places-separator"> • </span></span><span class="tm-event-card__places-item"><span>Онлайн</span><!-- --></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a class="tm-event-card__link" href="/ru/events/#620">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-analytics"><span>Аналитика</span></div><!--]--></div></div></div><!--]--><!-- --></section><!--]--></div><div class="swiper-slide" data-v-ebf6a21b=""><!--[--><section class="tm-block tm-block tm-block_spacing-none" data-v-ebf6a21b="" id="590" tabindex="-1"><!-- --><!--[--><div class="tm-event-card tm-event-card_is-widget"><a class="" href="/ru/events/590/"><img alt="" class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png" loading="eager" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png, https://habrastorage.org/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png 2x"/></a><!-- --><div class="tm-event-card__info"><div class="tm-event-card__date"><!-- --><div class="tm-event-card__day"><span>10  апреля  </span></div></div><a class="tm-event-card__title-link" href="/ru/events/590/"><span>«GoCloud 2025» — масштабная IT-конференция про облака и AI</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><span class="tm-event-card__places-separator"> • </span></span><span class="tm-event-card__places-item"><span>Онлайн</span><!-- --></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a class="tm-event-card__link" href="/ru/events/#590">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-admin"><span>Администрирование</span></div><div class="event-category__label event-category__label_type-management"><span>Менеджмент</span></div><!--]--></div></div></div><!--]--><!-- --></section><!--]--></div><div class="swiper-slide" data-v-ebf6a21b=""><!--[--><section class="tm-block tm-block tm-block_spacing-none" data-v-ebf6a21b="" id="516" tabindex="-1"><!-- --><!--[--><div class="tm-event-card tm-event-card_is-widget"><a class="" href="/ru/events/516/"><img alt="" class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg" loading="eager" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg, https://habrastorage.org/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg 2x"/></a><!-- --><div class="tm-event-card__info"><div class="tm-event-card__date"><!-- --><div class="tm-event-card__day"><span>25 – 26  апреля  </span></div></div><a class="tm-event-card__title-link" href="/ru/events/516/"><span>IT-конференция Merge Tatarstan 2025</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Казань</span><!-- --></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a class="tm-event-card__link" href="/ru/events/#516">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-marketing"><span>Маркетинг</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!-- --></section><!--]--></div><div class="swiper-slide" data-v-ebf6a21b=""><!--[--><section class="tm-block tm-block tm-block_spacing-none" data-v-ebf6a21b="" id="610" tabindex="-1"><!-- --><!--[--><div class="tm-event-card tm-event-card_is-widget"><a class="" href="/ru/events/610/"><img alt="" class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png" loading="eager" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png, https://habrastorage.org/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png 2x"/></a><!-- --><div class="tm-event-card__info"><div class="tm-event-card__date"><!-- --><div class="tm-event-card__day"><span>20 – 22  июня  </span></div></div><a class="tm-event-card__title-link" href="/ru/events/610/"><span>Летняя айти-тусовка Summer Merge</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Ульяновская область</span><!-- --></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a class="tm-event-card__link" href="/ru/events/#610">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!-- --></section><!--]--></div><!--]--><!--]--></div><!-- --><!--[--><button class="swiper-button-prev"><span class="tm-svg-icon__wrapper swiper-button-icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Влево</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#arrow-back"></use></svg></span></button><button class="swiper-button-next"><span class="tm-svg-icon__wrapper swiper-button-icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Вправо</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#arrow-back"></use></svg></span></button><!--]--></div><!--]--></div><!--]--><!-- --></section><!--]--><div class="banner-wrapper medium-rectangle tm-layout-sidebar__banner tm-layout-sidebar__banner_bottom" data-v-ad758baa="" style="--467224fc:250px;--58ff5eba:auto;"><!--[--><div class="placeholder-wrapper placeholder" data-v-ad758baa=""><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><div class="adfox-banner-placeholder medium-rectangle" data-v-12f7bcca=""><div class="image loads" data-v-12f7bcca=""></div><div class="lines" data-v-12f7bcca=""><div class="line loads" data-v-12f7bcca=""></div><div class="line loads" data-v-12f7bcca=""></div><div class="line loads" data-v-12f7bcca=""></div></div></div><!-- --></div><div class="tm-adfox-banner" data-v-ad758baa="" id="adfox_164725691003361602"></div><!--]--></div></div></div><!--]--></div></div><!-- --><!--]--></div></div></main><!-- --></div><div class="tm-footer-menu"><div class="tm-page-width"><!--[--><div class="tm-footer-menu__container"><!--[--><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Ваш аккаунт</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a href="/kek/v1/auth/habrahabr/?back=/ru/articles/838402/&amp;hl=ru" rel="nofollow" target="_self">Войти</a></li><li class="tm-footer-menu__list-item"><a href="/kek/v1/auth/habrahabr-register/?back=/ru/articles/838402/&amp;hl=ru" rel="nofollow" target="_self">Регистрация</a></li><!--]--></ul></div></div><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Разделы</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/articles/">Статьи</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/news/">Новости</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/hubs/">Хабы</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/companies/">Компании</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/users/">Авторы</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/sandbox/">Песочница</a></li><!--]--></ul></div></div><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Информация</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/help/">Устройство сайта</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/authors/codex/">Для авторов</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/companies/corpblogs/">Для компаний</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/docs/transparency/">Документы</a></li><li class="tm-footer-menu__list-item"><a href="https://account.habr.com/info/agreement/?hl=ru_RU" target="_blank">Соглашение</a></li><li class="tm-footer-menu__list-item"><a href="https://account.habr.com/info/confidential/?hl=ru_RU" target="_blank">Конфиденциальность</a></li><!--]--></ul></div></div><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Услуги</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/corporate-blogs/" target="_blank">Корпоративный блог</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/advertising/" target="_blank">Медийная реклама</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/native-special/" target="_blank">Нативные проекты</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/education-programs/" target="_blank">Образовательные программы</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/hello-startup/" target="_blank">Стартапам</a></li><!--]--></ul></div></div><!--]--></div><!--]--></div></div><div class="tm-footer"><div class="tm-page-width"><!--[--><div class="tm-footer__container"><!-- --><div class="tm-footer__social"><!--[--><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.facebook.com/habrahabr.ru" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Facebook</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-facebook"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://twitter.com/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Twitter</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-twitter"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://vk.com/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>VK</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-vk"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://telegram.me/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Telegram</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-telegram"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.youtube.com/channel/UCd_sTwKqVrweTt4oAKY5y4w" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Youtube</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-youtube"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://dzen.ru/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Яндекс Дзен</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-dzen"></use></svg></a><!--]--></div><!--teleport start--><!--teleport end--><button class="tm-footer__link"><!-- --> Настройка языка</button><a class="tm-footer__link" href="/ru/feedback/">Техническая поддержка</a><div class="tm-footer-copyright"><span class="tm-copyright"><span class="tm-copyright__years">© 2006–2025, </span><span class="tm-copyright__name"><a class="tm-copyright__link" href="https://company.habr.com/" rel="noopener" target="_blank">Habr</a></span></span></div></div><!--]--></div></div><!-- --><!--]--></div><!-- --></div></div>
<div id="overlays"><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--></div>
</body>
</html>
