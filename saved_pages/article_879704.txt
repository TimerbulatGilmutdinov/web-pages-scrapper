<!DOCTYPE html>

<html lang="ru">
<head>
<title>Spring Security: разберём по полочкам токены, фильтры и авторизацию (с диаграммами!) / Хабр</title>
</head>
<body>
<div id="mount"><div data-async-called="true" id="app"><div class="tm-layout__wrapper"><!--[--><!-- --><div></div><!-- --><header class="tm-header" data-test-id="header"><div class="tm-page-width"><!--[--><div class="tm-header__container"><!-- --><span class="tm-header__logo-wrap"><a class="tm-header__logo tm-header__logo_hl-ru tm-header__logo" href="/ru/"><svg class="tm-svg-img tm-header__icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a><span class="tm-header__beta-sign" style="display:none;">β</span></span><!--[--><div class="tm-dropdown tm-header__projects"><div class="tm-dropdown__head"><!--[--><button class="tm-header__dropdown-toggle"><svg class="tm-svg-img tm-header__icon tm-header__icon_dropdown" height="16" width="16"><title>Открыть список</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#arrow-down"></use></svg></button><!--]--></div><!-- --></div><a class="tm-header__become-author-btn" href="/ru/sandbox/start/">Как стать автором</a><div class="tm-feature tm-feature tm-feature_variant-inline tm-header__feature"><!-- --></div><!-- --><!--]--><!-- --></div><!--]--></div></header><div class="tm-layout"><div class="tm-page-progress-bar"></div><div class="tm-base-layout__header_is-sticky tm-base-layout__header" data-menu-sticky="true"><div class="tm-page-width"><!--[--><div class="tm-base-layout__header-wrapper"><div class="tm-main-menu"><div class="tm-main-menu__section"><nav class="tm-main-menu__section-content"><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/feed/">Моя лента</a><!--]--><!--[--><a class="tm-main-menu__item" href="/ru/articles/">Все потоки</a><!--]--><!--[--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/develop/">Разработка</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/admin/">Администрирование</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/design/">Дизайн</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/management/">Менеджмент</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/marketing/">Маркетинг</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/popsci/">Научпоп</a><!--]--><!--]--></nav></div></div><div class="tm-header-user-menu tm-base-layout__user-menu"><a class="tm-header-user-menu__item tm-header-user-menu__search" data-test-id="search-button" href="/ru/search/"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_search tm-header-user-menu__icon_dark" height="24" width="24"><title>Поиск</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#search"></use></svg></a><!-- --><!-- --><div class="tm-header-user-menu__item tm-header-user-menu__write"><div><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_write tm-header-user-menu__icon_dark" height="24" width="24"><title>Написать публикацию</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#write"></use></svg></div><!-- --></div><!--[--><div class="tm-header-user-menu__item"><button class="tm-header-user-menu__toggle" data-test-id="user-menu-settings"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_dark" height="24" width="24"><title>Настройки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#page-settings"></use></svg></button></div><a class="tm-header-user-menu__item" href="https://habr.com/kek/v1/auth/habrahabr/?back=/ru/companies/spring_aio/articles/879704/&amp;hl=ru" rel="nofollow"><!--[--><button class="btn btn_solid btn_small tm-header-user-menu__login" type="button"><!--[-->Войти<!--]--></button><!--]--></a><!--]--><!-- --><!--teleport start--><!--teleport end--><!-- --></div></div><!--]--></div></div><!-- --><div class="tm-page-width"><!--[--><!--]--></div><main class="tm-layout__container"><div class="tm-page" companyname="spring_aio" data-async-called="true" hl="ru" style="--0c809c5a:16px;--a086013e:100%;--7c457026:0;"><div class="tm-page-width"><!--[--><div class="tm-page__header"><!--[--><!--]--></div><div class="tm-page__wrapper"><div class="tm-page__main_has-sidebar tm-page__main"><div class="pull-down"><!-- --><div class="pull-down__header" style="height:0px;"><div class="pull-down__content" style="bottom:10px;"><svg class="tm-svg-img pull-down__icon pull-down__arrow" height="24" width="24"><title>Обновить</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#pull-arrow"></use></svg></div></div><!--[--><!--[--><div class="tm-article-presenter"><!--[--><!--[--><!-- --><div class="tm-company-profile-card tm-company-article__profile-card"><div class="tm-company-card tm-company-profile-card__info"><div class="tm-company-card__header"><a class="tm-company-card__avatar" href="/ru/companies/spring_aio/profile/"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="48" src="//habrastorage.org/getpro/habr/company/8f1/91a/458/8f191a4584b8fab12d15af23e447a1d5.png" width="48"/></div></a><!--[--><!-- --><div class="tm-counter-container tm-company-card__rating"><div class="tm-counter-container__header"><!--[--><!--[--><!--]--><div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!-- --><div class="tm-votes-lever__score tm-votes-lever__score_appearance-rating tm-votes-lever__score"><!--[--><span><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter_rating tm-votes-lever__score-counter" data-test-id="votes-score-counter">77.73</span></span><!--]--></div><!-- --></div><!--]--></div><div class="tm-counter-container__footer"><!--[--><span class="tm-rating__text tm-rating__text">Рейтинг</span><!--]--></div></div><!-- --><!--]--></div><div class="tm-company-card__info"><a class="tm-company-card__name" href="/ru/companies/spring_aio/profile/"><span>Spring АйО</span></a><!-- --></div></div><div class="tm-company-profile-card__buttons"><div class="tm-button-follow tm-company-profile-card__button tm-company-profile-card__button_follow"><!-- --><button class="tm-button-follow__button tm-button-follow__button_big" data-test-id="follow-button" type="button">Подписаться</button></div><!-- --><!-- --><!-- --></div></div><!-- --><!--]--><!--]--><div class="tm-article-presenter__body" data-test-id="article-body"><div class="tm-misprint-area"><div class="tm-misprint-area__wrapper"><!--[--><article class="tm-article-presenter__content tm-article-presenter__content_narrow"><!--[--><div class="tm-article-presenter__header"><!--[--><!--]--><div class="tm-article-snippet tm-article-snippet tm-article-presenter__snippet"><!--[--><!--]--><div class="tm-article-snippet__meta-container"><div class="tm-article-snippet__meta"><span class="tm-user-info tm-article-snippet__author"><a class="tm-user-info__userpic" data-test-id="user-info-pic" href="/ru/users/spring_aio/" title="spring_aio"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="24" src="//habrastorage.org/r/w48/getpro/habr/avatars/8e0/5e8/a1c/8e05e8a1c5fd4560f661efb2cb00e77e.png" width="24"/></div></a><span class="tm-user-info__user tm-user-info__user_appearance-default" data-test-id="user-info-description"><a class="tm-user-info__username" href="/ru/users/spring_aio/">spring_aio <!-- --></a><!--[--><span class="tm-article-datetime-published"><time datetime="2025-02-05T13:17:20.000Z" title="2025-02-05, 16:17">5  фев   в 16:17</time></span><!--]--></span></span></div><!-- --></div><h1 class="tm-title tm-title_h1" data-test-id="articleTitle" lang="ru"><span>Spring Security: разберём по полочкам токены, фильтры и авторизацию (с диаграммами!)</span></h1><div class="tm-article-snippet__stats" data-test-id="articleStats"><div class="tm-article-complexity tm-article-complexity_complexity-low"><span class="tm-svg-icon__wrapper tm-article-complexity__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Уровень сложности</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#complexity-low"></use></svg></span><span class="tm-article-complexity__label">Простой</span></div><div class="tm-article-reading-time"><span class="tm-svg-icon__wrapper tm-article-reading-time__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Время на прочтение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#clock"></use></svg></span><span class="tm-article-reading-time__label">14 мин</span></div><span class="tm-icon-counter tm-data-icons__item"><svg class="tm-svg-img tm-icon-counter__icon" height="24" width="24"><title>Количество просмотров</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-views"></use></svg><span class="tm-icon-counter__value" title="14094">14K</span></span></div><div class="tm-publication-hubs__container" data-test-id="articleHubsList"><div class="tm-publication-hubs"><!--[--><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/companies/spring_aio/articles/"><!--[--><span>Блог компании Spring АйО</span><!-- --><!--]--></a></span><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/hubs/java/"><!--[--><span>Java</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/hubs/kotlin/"><!--[--><span>Kotlin</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/hubs/programming/"><!--[--><span>Программирование</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><!--]--></div></div><div class="tm-article-labels" data-test-id="articleLabels"><div class="tm-article-labels__container"><div class="tm-publication-label tm-publication-label_variant-review"><span>Обзор</span></div><!--[--><div class="tm-publication-label tm-publication-label_variant-translation"><span>Перевод</span></div><!--]--></div></div><!-- --><!-- --></div></div><!--[--><div class="tm-article-presenter__origin"><a class="tm-article-presenter__origin-link" href="https://www.infoq.com/articles/spring-security-flow-diagrams/" target="_blank">Автор оригинала: <span>Alexandr Manunin</span></a></div><div class="tm-article-body" data-gallery-root="" lang="ru"><div><!--[--><!--]--></div><div id="post-content-body"><div><div class="article-formatted-body article-formatted-body article-formatted-body_version-2"><div xmlns="http://www.w3.org/1999/xhtml"><p>Команда <a href="https://t.me/+QmrKn0wA8CdkNjAy">Spring АйО</a>  перевела статью, в которой подробно рассматривается процесс регистрации и аутентификации пользователей с использованием Spring Security. </p><hr/><h3>Ключевые моменты							</h3><ul><li><p>Spring Security является фреймворком построенным на Java/Jakarta EE, который предоставляет аутентификацию, авторизацию и другие функции безопасности для Enterprise-приложений.</p></li><li><p>Разработчики могут реализовывать полноценные конфигурации в рамках интерфейса <code>SecurityFilterChain</code> для управления защитой CORS и CSRF и фильтрами аутентификации, при этом оставляя доступными отдельные эндпоинты, например для создания учетной записи и входа в систему.</p></li><li><p>Токены доступа и обновления могут использоваться для достижения баланса между мерами безопасности и удобством пользователя, минимизируя риск взлома токена при расширении возможностей для пользователя.</p></li><li><p>Axios можно использовать в клиентских приложениях для эффективной обработки запросов с токенами с помощью интерцепторов, которые управляют сценариями вставки и обновления токенов, обеспечивая безопасное и непрерывное взаимодействие с пользователем.</p></li><li><p>Для лучшего понимания последовательности вызовов API, которые Spring Security выполняет «под капотом», можно использовать диаграммы потоков.</p></li></ul><p>В этой статье мы подробно посмотрим на решение для регистрации и аутентификации пользователя через клиентское JavaScript-приложение с использованием инфраструктуры<a href="https://spring.io/projects/spring-security"> Spring Security</a>, токенов доступа и обновления.</p><p>Существует множество базовых примеров использования Spring Security, поэтому цель данной статьи — более подробно описать возможный процесс с помощью диаграмм.</p><p>Вы можете найти исходный код этих примеров в этом GitHub <a href="https://github.com/manunin/auth-module">репозитории</a>.</p><p><strong>Примечание</strong>: В этой статье мы сосредоточимся на основных успешных сценариях. Обработка ошибок и обработка исключений здесь опущены. </p><h3>Терминология</h3><ul><li><p><strong>Аутентификация (Authentication) </strong>— это процесс проверки личности пользователя. Мы понимаем кто перед нами.</p></li><li><p><strong>Авторизация (Authorization)</strong> — это процесс определения, какие ресурсы или действия должны быть доступны пользователю. </p></li><li><p><strong>Токен доступа (Access Token)</strong> — это набор данных, содержащий информацию, необходимую для идентификации пользователя или предоставления доступа к ограниченным ресурсам. </p></li><li><p><strong>Токен обновления (Refresh Token)</strong> — это технический набор идентификационных данных, который позволяет клиентскому приложению получать новые токены доступа без повторного входа пользователя. Концепция токенов обновления является компромиссом между безопасностью и удобством для пользователя. Долгое время жизни токена доступа создает риск компрометации, частое приглашение пользователя для входа в систему ухудшает пользовательский опыт. Токены обновления решают эту проблему следующим образом:</p><ul><li><p>Разрешение приложению клиента получить новую пару токенов после истечения токена доступа, не требуя нового логина от пользователя.</p></li><li><p>Сокращение периода, в течение которого токен доступа подвержен риску компрометации.</p></li></ul></li></ul><h3>Список базовых процессов и конфигурация Spring Security </h3><p> Система поддерживает следующие базовые сценарии:</p><ol><li><p>Регистрация пользователя.</p></li><li><p>Аутентификация и Авторизация пользователя через форму логина, за которыми следует перенаправление на страницу пользователя.</p></li><li><p>Бизнес процесс — запрос количества зарегистрированных пользователей.</p></li><li><p>Обновление токена.</p></li></ol><p>Общая конфигурация Spring Security может быть задана с помощью метода <code>filterChain()</code>, объявленного в классе <a href="https://github.com/manunin/auth-module/blob/main/src/main/java/com/manunin/auth/configuration/SecurityConfiguration.java">SecurityConfiguration</a>:</p><pre><code class="java">@Bean
SecurityFilterChain filterChain(final HttpSecurity http) throws Exception {
    http
       .cors(cors -&gt;  cors.configurationSource(corsConfigurationSource()))
       .csrf(AbstractHttpConfigurer::disable)
       .exceptionHandling(configurer -&gt; configurer
           .accessDeniedHandler(accessDeniedHandler))
       .sessionManagement(configurer -&gt; configurer
           .sessionCreationPolicy(SessionCreationPolicy.STATELESS))
       .authorizeHttpRequests(authorize -&gt; authorize
           .requestMatchers(SIGNIN_ENTRY_POINT).permitAll()
           .requestMatchers(SIGNUP_ENTRY_POINT).permitAll()
           .requestMatchers(SWAGGER_ENTRY_POINT).permitAll()
           .requestMatchers(API_DOCS_ENTRY_POINT).permitAll()
           .requestMatchers(TOKEN_REFRESH_ENTRY_POINT).permitAll()
           .anyRequest().authenticated()
       )
       .addFilterBefore(buildLoginProcessingFilter(), UsernamePasswordAuthenticationFilter.class)
       .addFilterBefore(buildTokenAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class)
       .addFilterBefore(buildRefreshTokenProcessingFilter(), UsernamePasswordAuthenticationFilter.class);
http.oauth2Login(configurer -&gt; configurer
       .authorizationEndpoint(config -&gt; config
               .authorizationRequestRepository(authorizationRequestRepository()))
       .failureHandler(failureHandler)
       .successHandler(oauth2AuthenticationSuccessHandler));

return http.build();
}</code></pre><p>Давайте разберем каждый сценарий по отдельности. </p><h3>Регистрация пользователя</h3><p>Когда пользователь заполняет регистрационную форму со всеми обязательными полями и отправляет запрос, выполняются все действия как показано на Рисунке 1:</p><figure class="full-width"><img alt="Рисунок 1. Регистрация пользователя " data-src="https://habrastorage.org/getpro/habr/upload_files/aa8/2a7/153/aa82a7153e0c0c844ba8834cc378fab7.png" height="842" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/aa8/2a7/153/aa82a7153e0c0c844ba8834cc378fab7.png" title="Рисунок 1. Регистрация пользователя " width="1559"/><div><figcaption>Рисунок 1. Регистрация пользователя </figcaption></div></figure><p>Чтобы разрешить доступ к эндпоинту <code>/signup</code> и позволить запросам обходить требования к аутентификации от Spring Security, необходимо сконфигурировать Spring Security таким образом, чтобы предоставить доступ к этому эндпоинту без необходимости аутентификации. Этого можно добиться изменением конфигурации безопасности, которое исключает эндпоинт <code>/signup</code> из требований по аутентификации.</p><p>Далее показано, как можно сконфигурировать Spring Security, разрешая доступ к эндпоинту <code>/signup</code>, используя вот этот фрагмент упомянутого ранее метода <code>filterChain()</code>, определенного в классе <code>SecurityConfiguration</code>:</p><pre><code class="java">.authorizeHttpRequests(authorize -&gt; authorize
   .requestMatchers(SIGNIN_ENTRY_POINT).permitAll()
   .requestMatchers(SIGNUP_ENTRY_POINT).permitAll()
   .requestMatchers(SWAGGER_ENTRY_POINT).permitAll()
   .requestMatchers(API_DOCS_ENTRY_POINT).permitAll()
   .requestMatchers(TOKEN_REFRESH_ENTRY_POINT).permitAll()
   .anyRequest().authenticated()
)</code></pre><p>Следует отметить, что конфигурация включает фильтр токенов, который перехватывает все запросы и проверяет токен внутри них, как показано в этом фрагменте метода <code>filterChain()</code>: </p><pre><code class="java">.addFilterBefore(buildLoginProcessingFilter(), UsernamePasswordAuthenticationFilter.class)
.addFilterBefore(buildTokenAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class)
.addFilterBefore(buildRefreshTokenProcessingFilter(), UsernamePasswordAuthenticationFilter.class);</code></pre><p>Чтобы исключить эту проверку для запроса на регистрацию, вам надо задать механизм для опознавания путей, с которым этот фильтр будет работать при создании фильтра токена. Давайте посмотрим на метод <code>buildTokenAuthenticationFilter()</code>, определенный в классе <code>SecurityConfiguration</code>: </p><pre><code class="java">protected TokenAuthenticationFilter buildTokenAuthenticationFilter() {
    List&lt;String&gt; pathsToSkip = new ArrayList&lt;&gt;(Arrays.asList(SIGNIN_ENTRY_POINT, SIGNUP_ENTRY_POINT, SWAGGER_ENTRY_POINT, API_DOCS_ENTRY_POINT, TOKEN_REFRESH_ENTRY_POINT));
    SkipPathRequestMatcher matcher = new SkipPathRequestMatcher(pathsToSkip);
    TokenAuthenticationFilter filter = new TokenAuthenticationFilter(jwtTokenProvider, matcher, failureHandler);
    filter.setAuthenticationManager(this.authenticationManager);
    return filter;
}</code></pre><p>Здесь мы используем класс <a href="https://github.com/manunin/auth-module/blob/main/src/main/java/com/manunin/auth/secutiry/matcher/SkipPathRequestMatcher.java">SkipPathRequestMatcher</a> (как показано ниже), который исключает пути, заданные в параметре <code>pathsToSkip</code>, из путей фильтра (в нашем случае мы добавили <code>SIGNUP_ENTRY_POINT</code> к этому массиву).</p><pre><code class="java">public class SkipPathRequestMatcher implements RequestMatcher {
    private final OrRequestMatcher matchers;

    public SkipPathRequestMatcher(final List&lt;String&gt; pathsToSkip) {
        Assert.notNull(pathsToSkip, "List of paths to skip is required.");
        List&lt;RequestMatcher&gt; m = pathsToSkip.stream()
            .map(AntPathRequestMatcher::new)
            .collect(Collectors.toList());
        matchers = new OrRequestMatcher(m);
        }

    @Override
    public boolean matches(final HttpServletRequest request) {
        return !matchers.matches(request);
        }
    }</code></pre><h3>Аутентификация и авторизация пользователя через форму логина </h3><p>Как только запрос успешно обработан фильтром токенов, он поступает на обработку в бизнес контроллер, как показано на Рисунке 2:</p><figure class="full-width"><img alt="Рисунок 2: Аутентификация и авторизация пользователя через форму логина " data-src="https://habrastorage.org/getpro/habr/upload_files/b83/15a/f8c/b8315af8cb1c3505331dec65052177b5.png" height="1092" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/b83/15a/f8c/b8315af8cb1c3505331dec65052177b5.png" title="Рисунок 2: Аутентификация и авторизация пользователя через форму логина " width="2024"/><div><figcaption><strong>Рисунок 2: Аутентификация и авторизация пользователя через форму логина</strong> </figcaption></div></figure><p>1. Клиент отправляет имя пользователя и пароль на эндпоинт/login.</p><p>2. Чтобы заставить<a href="https://github.com/manunin/auth-module/blob/main/src/main/java/com/manunin/auth/secutiry/login/LoginAuthenticationFilter.java"> LoginAuthenticationFilter</a> перехватить запрос, вам надо сконфигурировать Spring Security соответствующим образом:</p><ul><li><p>Задайте фильтр и URI для обработки запросов, используя метод <code>buildLoginProcessingFilter()</code>, определенный в классе <code>SecurityConfiguration</code>:</p></li></ul><pre><code class="java">@Bean
protected LoginAuthenticationFilter buildLoginProcessingFilter() {
    LoginAuthenticationFilter filter = new LoginAuthenticationFilter(SIGNIN_ENTRY_POINT, authenticationSuccessHandler, failureHandler);
    filter.setAuthenticationManager(this.authenticationManager);
    return filter;
}</code></pre><p>Важно отметить, что в дополнение к URI мы при создании фильтра также задаем обработчики для успешных и неуспешных авторизаций, а также <code>AuthenticationManager</code>. Ниже мы поговорим о них более подробно.</p><ul><li><p>Добавьте этот URI к списку исключений для фильтра токена, используя метод <code>buildTokenAuthenticationFilter()</code>, определенный в классе <code>SecurityConfiguration</code>:</p></li></ul><pre><code class="java">List&lt;String&gt; pathsToSkip = new ArrayList&lt;&gt;(Arrays.asList(SIGNIN_ENTRY_POINT, SIGNUP_ENTRY_POINT, SWAGGER_ENTRY_POINT, API_DOCS_ENTRY_POINT, TOKEN_REFRESH_ENTRY_POINT));</code></pre><ul><li><p>Добавьте созданный фильтр к конфигурации через метод <code>filterChain()</code>:</p></li></ul><pre><code class="java">@Bean
SecurityFilterChain filterChain(final HttpSecurity http) throws Exception {
     http
             .cors(cors -&gt; cors.configurationSource(corsConfigurationSource()))

// our builder configuration 

        .addFilterBefore(buildLoginProcessingFilter(), UsernamePasswordAuthenticationFilter.class)
.addFilterBefore(buildTokenAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class)
.addFilterBefore(buildRefreshTokenProcessingFilter(), UsernamePasswordAuthenticationFilter.class);


// our builder configuration 

return http.build();
}</code></pre><p>В классе <code>LoginAuthenticationFilter</code> мы переопределяем два метода, которые Spring вызывает во время выполнения логики фильтрации. Первый из этих методов — <code>attemptAuthentication()</code>. В нем мы инициируем запрос на аутентификацию к методу экземпляра класса <code>AuthenticationManager</code>, который мы предоставили во время создания фильтра. Однако, сам менеджер не выполняет аутентификацию; он служит контейнером для провайдеров, которые выполняют эту задачу. Интерфейс <a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/authentication/AuthenticationManager.html">AuthenticationManager</a> берет на себя ответственность за поиск подходящего провайдера и передачу ему запроса. Создание менеджера и регистрация провайдеров выглядят вот так: </p><pre><code class="java">@Bean
public AuthenticationManager authenticationManager(final ObjectPostProcessor&lt;Object&gt; objectPostProcessor) throws Exception {
        var auth = new AuthenticationManagerBuilder(objectPostProcessor);
        auth.authenticationProvider(loginAuthenticationProvider);
        auth.authenticationProvider(tokenAuthenticationProvider);
        auth.authenticationProvider(refreshTokenAuthenticationProvider);
        return auth.build();
}</code></pre><p>В дальнейшем этот менеджер передается как параметр для каждого создаваемого фильтра. </p><p>3. Чтобы <code>AuthenticationManager</code> смог найти нужный провайдер (в нашем случае <a href="https://github.com/manunin/auth-module/blob/main/src/main/java/com/manunin/auth/secutiry/login/LoginAuthenticationProvider.java">LoginAuthenticationProvider</a>), необходимо указать, какой тип он поддерживает, внутри самого провайдера, как показано ниже в методе <code>supports()</code>: </p><pre><code class="java">@Override
public boolean supports(final Class&lt;?&gt; authentication) {
   return (UsernamePasswordAuthenticationToken.class.isAssignableFrom(authentication));
}</code></pre><p>В нашем примере мы указываем, что провайдер поддерживает класс<a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/authentication/UsernamePasswordAuthenticationToken.html"> UsernamePasswordAuthenticationToken</a>. Когда мы создаем объект типа <code>UsernamePasswordAuthenticationToken</code> в фильтре и передаем его в <code>AuthenticationManager</code>, он корректно находит нужный провайдер, основываясь на типе объекта и используя метод <code>attemptAuthentication()</code>, определенный в классе <code>LoginAuthenticationFilter</code>: </p><pre><code class="java">@Override
public Authentication attemptAuthentication(final HttpServletRequest request, final HttpServletResponse response) throws AuthenticationException {
    // some code above
    UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(loginDto.getUsername(), loginDto.getPassword());
    token.setDetails(authenticationDetailsSource.buildDetails(request));
    return this.getAuthenticationManager().authenticate(token);
}</code></pre><p>4. Когда <code>AuthenticationManager</code> находит нужный провайдер, он вызывает метод  <code>authenticate()</code>, и провайдер сам выполняет валидацию логина и пароля пользователя. Затем результат возвращается обратно в фильтр.</p><p>5. Второй метод, который мы переопределяем в фильтре — это <code>successfulAuthentication()</code>, который вызывается Spring в случае успешной аутентификации. Задача обработки успешной аутентификации ложится на <a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/web/authentication/AuthenticationSuccessHandler.html">AuthenticationSuccessHandler</a>, который мы определили при создании фильтра (как было упомянуто ранее). Этот обработчик содержит один переопределенный метод <code>onAuthenticationSuccess()</code>, где мы обычно записываем сгенерированные токены и устанавливаем успешный код ответа для запроса.</p><pre><code class="java">@Override
public void onAuthenticationSuccess(final HttpServletRequest request, final HttpServletResponse response, final Authentication authentication) throws IOException {
    UserDetails userDetails = (UserDetails) authentication.getPrincipal();

    JwtPair jwtPair = tokenProvider.generateTokenPair(userDetails);

    response.setStatus(HttpStatus.OK.value());
    response.setContentType(MediaType.APPLICATION_JSON_VALUE);
    JsonUtils.writeValue(response.getWriter(), jwtPair);
}</code></pre><p>Далее инфраструктура Spring, имея в своем распоряжении успешный ответ, возвращает его клиенту.</p><h3>Бизнес-процесс — запрос количества зарегистрированных пользователей </h3><p>В нашем примере в качестве бизнес-запроса будет использован запрос на получение количества пользователей в базе данных. Ожидаемое поведение следующее: при любом запросе, исходящем от залогиненного пользователя, мы проверяем токен. Процесс верификации токена начинается в <a href="https://github.com/manunin/auth-module/blob/main/src/main/java/com/manunin/auth/secutiry/jwt/TokenAuthenticationFilter.java">TokenAuthenticationFilter</a>, после чего, подобно тому, как описано выше для похожего процесса, запрос передается в <a href="https://github.com/manunin/auth-module/blob/main/src/main/java/com/manunin/auth/secutiry/jwt/TokenAuthenticationProvider.java">TokenAuthenticationProvider</a>. После успешной верификации фильтр перенаправляет запрос в стандартную цепочку фильтров веб приложения, в результате чего запрос попадает в бизнес контроллер <a href="https://github.com/manunin/auth-module/blob/main/src/main/java/com/manunin/auth/controller/AuthController.java">AuthController</a>, как показано на Рисунке 3. </p><figure class="full-width"><img alt="Рисунок 3. Запрос количества зарегистрированных пользователей " data-src="https://habrastorage.org/getpro/habr/upload_files/4f4/ec3/ae5/4f4ec3ae56a296fb8db0e7fc1d21a007.png" height="1092" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/4f4/ec3/ae5/4f4ec3ae56a296fb8db0e7fc1d21a007.png" title="Рисунок 3. Запрос количества зарегистрированных пользователей " width="1690"/><div><figcaption><strong>Рисунок 3. Запрос количества зарегистрированных пользователей</strong> </figcaption></div></figure><p>1. Клиент посылает запрос на эндпоинт сервера <code>/users/count</code> вместе с токеном.</p><p>2. Чтобы <code>TokenAuthenticationFilter</code> мог перехватить запрос, необходимо соответствующим образом сконфигурировать Spring Security:</p><ul><li><p>Создайте фильтр (мы с ним уже встречались) и задайте URI для фильтрации запросов (в данном случае, все запросы кроме тех, которые были исключены в классе <a href="https://github.com/manunin/auth-module/blob/main/src/main/java/com/manunin/auth/secutiry/matcher/SkipPathRequestMatcher.java">SkipPathRequestMatcher</a>), вам необходимо сделать это внутри конфигурации Spring Security через метод <code>buildTokenAuthenticationFilter()</code>, как показано ниже:</p></li></ul><pre><code class="java">protected TokenAuthenticationFilter buildTokenAuthenticationFilter() {
    List&lt;String&gt; pathsToSkip = new ArrayList&lt;&gt;(Arrays.asList(SIGNIN_ENTRY_POINT, SIGNUP_ENTRY_POINT, SWAGGER_ENTRY_POINT, API_DOCS_ENTRY_POINT, TOKEN_REFRESH_ENTRY_POINT));
    SkipPathRequestMatcher matcher = new SkipPathRequestMatcher(pathsToSkip);
    TokenAuthenticationFilter filter = new TokenAuthenticationFilter(jwtTokenProvider, matcher, failureHandler);
    filter.setAuthenticationManager(this.authenticationManager);
    return filter;
}</code></pre><p>Как и для предыдущего фильтра, мы задаем <code>AuthenticationManager</code>, который будет вызван для поиска провайдера.</p><ul><li><p>Добавьте созданный фильтр к конфигурации, используя метод <code>filterChain()</code>:</p></li></ul><pre><code class="java">@Bean
SecurityFilterChain filterChain(final HttpSecurity http) throws Exception {
    http
        .cors(cors -&gt; cors.configurationSource(corsConfigurationSource()))

// our builder configuration

        .addFilterBefore(buildLoginProcessingFilter(), UsernamePasswordAuthenticationFilter.class)
.addFilterBefore(buildTokenAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class)
.addFilterBefore(buildRefreshTokenProcessingFilter(), UsernamePasswordAuthenticationFilter.class);


// our builder configuration
    return http.build();
}</code></pre><p>Чтобы <code>AuthenticationManager</code> мог найти нужный провайдер, используется метод  <code>authenticationManager()</code>: </p><pre><code class="java">@Bean
public AuthenticationManager authenticationManager(final ObjectPostProcessor&lt;Object&gt; objectPostProcessor) throws Exception {
    var auth = new AuthenticationManagerBuilder(objectPostProcessor);
    auth.authenticationProvider(loginAuthenticationProvider);
    auth.authenticationProvider(tokenAuthenticationProvider);
    auth.authenticationProvider(refreshTokenAuthenticationProvider);
    return auth.build();
}</code></pre><ul><li><p>В самом провайдере задайте тип, по которому должны фильтроваться запросы. Для этого вызывается метод <code>supports()</code>, определенный в классе <code>TokenAuthenticationProvider</code>:</p></li></ul><pre><code class="java">@Override
public boolean supports(final Class&lt;?&gt; authentication) {
   return (JwtAuthenticationToken.class.isAssignableFrom(authentication));
}</code></pre><p>В результате фильтр должен создать объект <a href="https://github.com/manunin/auth-module/blob/main/src/main/java/com/manunin/auth/secutiry/jwt/JwtAuthenticationToken.java">JwtAuthenticationToken</a>. После этого <code>AuthenticationManager</code> найдет подходящий провайдер на основании типа созданного объекта и пошлет объект на аутентификацию с помощью метода <code>attemptAuthentication()</code>, определенного в классе <code>TokenAuthenticationFilter</code>. </p><pre><code class="java">@Override
public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {
    return getAuthenticationManager().authenticate(new JwtAuthenticationToken(tokenProvider.getTokenFromRequest(request)));
}</code></pre><p>3. После успешной аутентификации метод <code>successfulAuthentication()</code> передает исходный запрос цепочке стандартных фильтров, где он рано или поздно дойдет до бизнес контроллера <code>AuthController</code>.</p><h3>Обновление токена</h3><p>Процесс обновления токена показан на Рисунке 4. </p><figure class="full-width"><img alt="Рисунок 4. Обновление токена " data-src="https://habrastorage.org/getpro/habr/upload_files/f61/d85/632/f61d85632ed8d856a28febe55737a812.png" height="1082" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/f61/d85/632/f61d85632ed8d856a28febe55737a812.png" title="Рисунок 4. Обновление токена " width="1798"/><div><figcaption><strong>Рисунок 4. Обновление токена</strong> </figcaption></div></figure><p>Процесс обновления токена похож на процесс логина:</p><ol><li><p>Клиент обращается к эндпоинту <code>/refreshToken</code> с запросом на обновление токена.</p></li><li><p>Запрос перехватывается<a href="https://github.com/manunin/auth-module/blob/main/src/main/java/com/manunin/auth/secutiry/jwt/RefreshTokenAuthenticationFilter.java"> RefreshTokenAuthenticationFilter</a>, потому что заданный URI эндпоинта включен в список разрешенных URI для фильтра.</p></li><li><p>Фильтр пытается осуществить аутентификацию, используя метод <code>attemptAuthentication()</code>, обращаясь к <code>AuthenticationManager</code>, который в свою очередь вызывает <a href="https://github.com/manunin/auth-module/blob/main/src/main/java/com/manunin/auth/secutiry/jwt/RefreshTokenAuthenticationProvider.java">RefreshTokenAuthenticationProvider</a>. Как уже упоминалось в двух предыдущих примерах, тот или иной провайдер выбирается на основании того, поддерживает ли он работу с объектом определенного типа, созданным в фильтре, а именно <a href="https://github.com/manunin/auth-module/blob/main/src/main/java/com/manunin/auth/secutiry/jwt/RefreshJwtAuthenticationToken.java">RefreshJwtAuthenticationToken</a>: 	</p></li></ol><pre><code class="java">@Override
public boolean supports(final Class&lt;?&gt; authentication) {
    return (RefreshJwtAuthenticationToken.class.isAssignableFrom(authentication));
}</code></pre><p>4. После успешной аутентификации метод <code>successAuthentication()</code> вызывает тот же обработчик, <code>LoginAuthenticationSuccessHandler</code>, как и при процессе логина, и затем этот обработчик вписывает пару токенов в ответ. </p><h3>Описание процесса на стороне клиента</h3><p>Иллюстрация процесса на стороне приложения на JavaScript с использованием диаграммы потока выглядит весьма громоздкой, поскольку процесс разветвляется в зависимости от ответа сервера. Поэтому давайте посмотрим непосредственно на код, который написан довольно лаконично, и опишем по шагам, что в нем происходит.  Посмотрите на содержимое файла <code>apiClient.js</code>:</p><pre><code class="java">// import statements

const userStore = useUserStore();

// axios client init
const apiClient = axios.create({
  baseURL: process.env.API_URL
});

// add token from userStore
function authHeader() {
  let token = userStore.getToken;
  if (token) {
    return {Authorization: 'Bearer ' + token};
  } else {
    return {};
  }
}

// add an interceptor that includes a token to each request
apiClient.interceptors.request.use(function (config) {
  config.headers = authHeader();
  return config;
});

//add an interceptor that processes each response
apiClient.interceptors.response.use(function (response) {
  return response;  //successful response
}, function (error) { //unsuccessful response
  const req = error.config;
  if (isTokenExpired(error)) { 
    if (isRefreshTokenRequest(req)) {
      //refreshToken is expired, clean token info and redirect to login page
      clearAuthCache();
      window.location.href = '/login?expired=true';
    }
    // token is expired, token refresh is required
    return authService.refreshToken(userStore.getRefreshToken).then(response =&gt; {
      //save new token pair to store
      userStore.login(response);
      //repeat original business request
      return apiClient.request(req);
    });
  }
  //the code 401 we set on backend side in any unsuccessful authentication 
  // including incorrect or empty tokens 
  if (error.response?.status === 401) {
    clearAuthCache();
  }
  return Promise.reject(error);
});

export default apiClient;</code></pre><ol><li><p>Мы используем библиотеку <a href="https://axios-http.com/docs/intro">Axios</a> для отправки запросов на сервер.</p></li><li><p>Мы регистрируем в Axios интерцептор запросов, который перехватывает все запросы и добавляет к ним токен, используя метод <code>authHeader()</code>.</p></li><li><p>Мы регистрируем в Axios интерцептор ответов, который перехватывает все ответы и выполняет следующую логику:</p><ol><li><p>Если ответ"неудачный", мы проверяем код статуса: 		</p><ol><li><p>Если ответ содержит код статуса <code>401</code> (например, в случае невалидного или отсутствующего токена), мы удаляем всю информацию о существующих токенах и перенаправляем на страницу логина.</p></li><li><p>Если ответ содержит код истечения токена (этот код генерируется сервером во время валидации токена в <code>TokenAuthenticationProvider</code> и <code>RefreshTokenAuthenticationProvider</code>), Мы дополнительно проверяем, было ли исходное обращение запросом на обновление токена: 			</p><ol><li><p>Если первоначальный запрос был обычным бизнес запросом, сообщение об истечении токена указывает на то, что токен доступа истек. Чтобы обновить токен доступа, мы посылаем запрос на обновление токена с <code>refreshToken</code>. Затем мы сохраняем новую пару токенов из ответа и повторяем первоначальный бизнес-запрос с обновленным токеном.</p></li><li><p>Если первоначальный запрос являлся запросом на обновление токена, сообщение об истечении токена означает, что <code>refreshToken</code> тоже истек. В этом случае пользователю придется логиниться заново. Поэтому мы удаляем всю информацию о существующих токенах и перенаправляем на страницу входа.			</p></li></ol></li></ol></li><li><p>Если ответ успешный, мы отправляем его клиенту. </p></li></ol></li></ol><h3>Заключение</h3><p>В этом примере мы подробно и с использованием диаграмм потоков рассмотрели несколько ключевых процессов работы со Spring Security и токенами. Обработка исключений и OAuth2 выходят за рамки данной статьи и будут рассмотрены отдельно.</p><hr/><p>Несмотря на то, что Josh Long считает эту статью "обязательной к прочтению":</p><p><a href="https://spring.io/blog/2025/01/21/this-week-in-spring-january-21st-2025"><em>A very interesting article on the flow diagrams for Spring Security—a must-bookmark!</em></a></p><p>У экспертов сообщества к ней возникли некоторые вопросы: </p><ul><li><p>Зачем для регистрации и логина использовать дополнительный матчер и исключения путей в фильтре, если можно просто применять permitAll()?</p></li><li><p>Почему после успешной регистрации сразу не выдаётся токен для аутентификации</p></li><li><p>Что с токенами, а именно с их хранением, шифрованием, временем жизни и почему JWT оторван от OAuth 2.0?</p></li></ul><p>Будем рады обсуждению в <a href="https://t.me/spring_aio/395">комментариях</a>!</p><figure class="full-width"><img data-src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/258/484/92d/25848492d4cd2dcd1df595e475569a9a.png" height="334" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/258/484/92d/25848492d4cd2dcd1df595e475569a9a.png" width="1560"/></figure><p>Присоединяйтесь к русскоязычному сообществу разработчиков на Spring Boot в телеграм - <a href="https://t.me/+oBwACbkvJ19iODAy">Spring АйО</a>, чтобы быть в курсе последних новостей из мира разработки на Spring Boot и всего, что с ним связано.</p><p></p></div></div></div><!-- --><!-- --></div><!-- --><!-- --></div><!--]--><!-- --><div class="tm-article-presenter__meta" data-test-id="article-meta-links"><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Теги:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[java]"><span>java</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[kotlin]"><span>kotlin</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[spring]"><span>spring</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[spring+security]"><span>spring security</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[axios]"><span>axios</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[token]"><span>token</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[refresh+token]"><span>refresh token</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[flow+diagram]"><span>flow diagram</span></a><!--]--></li><!--]--><!-- --></ul></div><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Хабы:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/companies/spring_aio/articles/"><!--[--><span>Блог компании Spring АйО</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/hubs/java/"><!--[--><span>Java</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/hubs/kotlin/"><!--[--><span>Kotlin</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/hubs/programming/"><!--[--><span>Программирование</span><!--]--></a><!--]--></li><!--]--><!-- --></ul></div></div><!-- --><!--]--></article><!--]--></div><!-- --></div><div class="tm-article-sticky-panel" data-test-id="article-sticky-panel" style=""><div class="tm-data-icons tm-data-icons tm-data-icons_space-big tm-article-sticky-panel__icons" data-test-id="article-stats-icons"><div class="tm-article-rating tm-data-icons__item"><div class="tm-votes-meter tm-article-rating__votes-switcher"><svg class="tm-svg-img tm-votes-meter__icon tm-votes-meter__icon tm-votes-meter__icon_appearance-article" height="24" width="24"><title>Всего голосов 22: ↑22 и ↓0</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-rating"></use></svg><span class="tm-votes-meter__value tm-votes-meter__value_positive tm-votes-meter__value_appearance-article tm-votes-meter__value_rating tm-votes-meter__value" data-test-id="votes-meter-value" title="Всего голосов 22: ↑22 и ↓0">+24</span></div><!--teleport start--><!--teleport end--><!-- --></div><!-- --><!-- --><button class="bookmarks-button tm-data-icons__item" title="Добавить в закладки" type="button"><span class="tm-svg-icon__wrapper bookmarks-button__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Добавить в закладки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-favorite"></use></svg></span><span class="bookmarks-button__counter" title="Количество пользователей, добавивших публикацию в закладки">154</span></button><div class="tm-sharing tm-data-icons__item" title="Поделиться"><button class="tm-sharing__button" type="button"><svg class="tm-sharing__icon" viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M13.8 13.8V18l7.2-6.6L13.8 5v3.9C5 8.9 3 18.6 3 18.6c2.5-4.4 6-4.8 10.8-4.8z" fill="currentColor"></path></svg></button><!--teleport start--><!--teleport end--></div><div class="tm-article-comments-counter-link tm-data-icons__item" title="Читать комментарии"><a class="tm-article-comments-counter-link__link" data-test-id="counter-comments" href="/ru/companies/spring_aio/articles/879704/comments/"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value">4</span><!--]--></a><!-- --></div><!--[--><!--[--><!--[--><!-- --><!--]--><!--]--><!--]--><!--teleport start--><!--teleport end--><!-- --></div></div></div><!--[--><!--]--><div class="tm-article-presenter__footer"><!--[--><!--[--><div class="tm-article-blocks"><!-- --><!--[--><section class="tm-block tm-block tm-block_spacing-bottom"><!-- --><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-balanced"><!--[--><div class="tm-article-author" data-test-id="article-author-info"><!--[--><!--[--><div class="tm-article-author__company"><div class="tm-article-author__company-card"><div class="tm-company-snippet"><a class="tm-company-snippet__logo-link" href="/ru/companies/spring_aio/profile/"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="40" src="//habrastorage.org/getpro/habr/company/8f1/91a/458/8f191a4584b8fab12d15af23e447a1d5.png" width="40"/></div></a><div class="tm-company-snippet__info"><a class="tm-company-snippet__title" data-test-id="company-title" href="/ru/companies/spring_aio/profile/"><span>Spring АйО</span></a><div class="tm-company-snippet__description">Компания</div></div></div><div class="tm-article-author__buttons"><!-- --><!-- --></div></div><div class="tm-article-author__company-contacts"><!--[--><a class="tm-article-author__contact" href="https://telegram.me/spring_aio" rel="noopener" target="_blank">Telegram</a><a class="tm-article-author__contact" href="https://www.springnow.ru" rel="noopener" target="_blank">Сайт</a><!--]--></div><div class="tm-article-author__separator"></div></div><!--]--><!--]--><div class="tm-user-card tm-user-card tm-user-card_variant-article tm-article-author__user-card" data-async-called="true"><div class="tm-user-card__info-container"><div class="tm-user-card__header"><div class="tm-user-card__header-data"><a class="tm-user-card__userpic tm-user-card__userpic_size-40" href="/ru/users/spring_aio/"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" src="//habrastorage.org/getpro/habr/avatars/8e0/5e8/a1c/8e05e8a1c5fd4560f661efb2cb00e77e.png"/></div></a><div class="tm-user-card__meta"><div class="tm-counter-container tm-karma tm-karma" title=" 85 голосов "><div class="tm-counter-container__header"><!--[--><div class="karma-display positive" data-v-7635202e="">45</div><!-- --><!--]--></div><div class="tm-counter-container__footer"><!--[--><div class="tm-karma__text">Карма</div><!--teleport start--><!--teleport end--><!--]--></div></div><div class="tm-counter-container" title="Рейтинг пользователя"><div class="tm-counter-container__header"><!--[--><!--[--><!--]--><div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!-- --><div class="tm-votes-lever__score tm-votes-lever__score_appearance-rating tm-votes-lever__score_no-margin tm-votes-lever__score"><!--[--><span><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter_rating tm-votes-lever__score-counter" data-test-id="votes-score-counter">105.9</span></span><!--]--></div><!-- --></div><!--]--></div><div class="tm-counter-container__footer"><!--[--><span class="tm-rating__text tm-rating__text">Рейтинг</span><!--]--></div></div></div></div></div><div class="tm-user-card__info tm-user-card__info_variant-article tm-user-card__info"><div class="tm-user-card__title tm-user-card__title_variant-article tm-user-card__title"><span class="tm-user-card__name tm-user-card__name_variant-article tm-user-card__name">Spring АйО</span><a class="tm-user-card__nickname tm-user-card__nickname tm-user-card__nickname_variant-article" href="/ru/users/spring_aio/"> @spring_aio</a><!-- --></div><p class="tm-user-card__short-info tm-user-card__short-info_variant-article tm-user-card__short-info" data-test-id="user-card-speciality">Главный по Spring</p></div></div><div class="tm-user-card__buttons tm-user-card__buttons_variant-article tm-user-card__buttons"><!-- --><div class="tm-user-card__button"><div class="tm-button-follow tm-user-card__button-follow"><!-- --><button class="tm-button-follow__button tm-button-follow__button_big" data-test-id="follow-button" type="button">Подписаться</button></div></div><!-- --><div class="tm-user-card__button tm-user-card__button_write" data-test-id="user-card-conversations"><svg class="tm-svg-img tm-user-card__button-icon" height="16" width="16"><title>Отправить сообщение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#mail"></use></svg></div><!-- --></div><!-- --></div><!-- --></div><!--]--></div><!--]--><!-- --></section><!-- --><!--[--><!--]--><!--]--><div class="tm-article-blocks__comments"><div class="tm-article-page-comments" id="publication-comments"><div><!--[--><div class="tm-article-comments-counter-link tm-article-comments-counter-button"><a class="tm-article-comments-counter-link__link tm-article-comments-counter-link__link_button-style" data-test-id="counter-comments" href="/ru/companies/spring_aio/articles/879704/comments/"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon tm-article-comments-counter-link__icon_contrasted" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value tm-article-comments-counter-link__value_contrasted"> Комментарии 4 </span><!--]--></a><!-- --></div><!--]--></div></div></div><!--[--><!--[--><!--]--><section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title tm-block__title_variant-large">Публикации</h2><!--[--><!--]--></div><!-- --></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-condensed-slim"><!--[--><!--[--><div class="tm-tabs tm-tabs"><div class=""><!--[--><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_active tm-tabs__tab-link_slim tm-tabs__tab-link">Лучшие за сутки</button></span><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_slim tm-tabs__tab-link">Похожие</button></span><!--]--></div><!-- --></div><div class="similar-and-daily__tab-view"><div class="placeholder-wrapper"><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><div class="tm-placeholder-article-cards"><!--[--><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><!--]--></div><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --></div><!-- --></div><!--]--><!--]--></div><!--]--><!-- --></section><!--[--><!--]--><!-- --><!--[--><!--]--><!--]--></div><!--]--><!--]--></div></div><!--]--><!--]--></div></div><div class="tm-page__sidebar"><!--[--><div class="tm-layout-sidebar"><div class="tm-layout-sidebar__placeholder_initial"></div><div class="tm-sexy-sidebar_initial tm-sexy-sidebar" style="margin-top:0px;"><!--[--><!--]--><!-- --><div class="tm-layout-sidebar__placeholder_initial"></div><!--[--><section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Информация</h2><!--[--><!--]--></div><!-- --></header><!--[--><div class="tm-block__body tm-block__body"><!--[--><div class="tm-company-basic-info"><dl class="tm-description-list tm-description-list tm-description-list_variant-columns-nowrap"><dt class="tm-description-list__title tm-description-list__title_variant-columns-nowrap tm-description-list__title">Сайт</dt><dd class="tm-description-list__body tm-description-list__body_variant-columns-nowrap tm-description-list__body"><!--[--><a class="tm-company-basic-info__link" href="https://t.me/spring_aio" target="_blank">t.me</a><!--]--></dd></dl><dl class="tm-description-list tm-description-list tm-description-list_variant-columns-nowrap"><dt class="tm-description-list__title tm-description-list__title_variant-columns-nowrap tm-description-list__title">Дата регистрации</dt><dd class="tm-description-list__body tm-description-list__body_variant-columns-nowrap tm-description-list__body"><!--[--><time datetime="2024-05-27T07:08:22.000Z" title="2024-05-27, 10:08">27  мая  2024</time><!--]--></dd></dl><!-- --><dl class="tm-description-list tm-description-list tm-description-list_variant-columns-nowrap"><dt class="tm-description-list__title tm-description-list__title_variant-columns-nowrap tm-description-list__title">Численность</dt><dd class="tm-description-list__body tm-description-list__body_variant-columns-nowrap tm-description-list__body"><!--[-->11–30 человек<!--]--></dd></dl><!-- --><!-- --></div><!--]--></div><!--]--><!-- --></section><div class="tm-company-widgets"><!--[--><!--]--></div><!-- --><!-- --><!--]--><!-- --></div></div><!--]--></div></div><!-- --><!--]--></div></div></main><!-- --></div><div class="tm-footer-menu"><div class="tm-page-width"><!--[--><div class="tm-footer-menu__container"><!--[--><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Ваш аккаунт</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a href="/kek/v1/auth/habrahabr/?back=/ru/companies/spring_aio/articles/879704/&amp;hl=ru" rel="nofollow" target="_self">Войти</a></li><li class="tm-footer-menu__list-item"><a href="/kek/v1/auth/habrahabr-register/?back=/ru/companies/spring_aio/articles/879704/&amp;hl=ru" rel="nofollow" target="_self">Регистрация</a></li><!--]--></ul></div></div><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Разделы</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/articles/">Статьи</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/news/">Новости</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/hubs/">Хабы</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/companies/">Компании</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/users/">Авторы</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/sandbox/">Песочница</a></li><!--]--></ul></div></div><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Информация</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/help/">Устройство сайта</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/authors/codex/">Для авторов</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/companies/corpblogs/">Для компаний</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/docs/transparency/">Документы</a></li><li class="tm-footer-menu__list-item"><a href="https://account.habr.com/info/agreement/?hl=ru_RU" target="_blank">Соглашение</a></li><li class="tm-footer-menu__list-item"><a href="https://account.habr.com/info/confidential/?hl=ru_RU" target="_blank">Конфиденциальность</a></li><!--]--></ul></div></div><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Услуги</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/corporate-blogs/" target="_blank">Корпоративный блог</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/advertising/" target="_blank">Медийная реклама</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/native-special/" target="_blank">Нативные проекты</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/education-programs/" target="_blank">Образовательные программы</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/hello-startup/" target="_blank">Стартапам</a></li><!--]--></ul></div></div><!--]--></div><!--]--></div></div><div class="tm-footer"><div class="tm-page-width"><!--[--><div class="tm-footer__container"><!-- --><div class="tm-footer__social"><!--[--><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.facebook.com/habrahabr.ru" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Facebook</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-facebook"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://twitter.com/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Twitter</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-twitter"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://vk.com/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>VK</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-vk"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://telegram.me/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Telegram</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-telegram"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.youtube.com/channel/UCd_sTwKqVrweTt4oAKY5y4w" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Youtube</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-youtube"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://dzen.ru/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Яндекс Дзен</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-dzen"></use></svg></a><!--]--></div><!--teleport start--><!--teleport end--><button class="tm-footer__link"><!-- --> Настройка языка</button><a class="tm-footer__link" href="/ru/feedback/">Техническая поддержка</a><div class="tm-footer-copyright"><span class="tm-copyright"><span class="tm-copyright__years">© 2006–2025, </span><span class="tm-copyright__name"><a class="tm-copyright__link" href="https://company.habr.com/" rel="noopener" target="_blank">Habr</a></span></span></div></div><!--]--></div></div><!-- --><!--]--></div><!-- --></div></div>
<div id="overlays"><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--></div>
</body>
</html>
