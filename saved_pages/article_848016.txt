<!DOCTYPE html>

<html lang="ru">
<head>
<title>AI-ассистент со Spring AI (Часть I) / Хабр</title>
</head>
<body>
<div id="mount"><div data-async-called="true" id="app"><div class="tm-layout__wrapper"><!--[--><!-- --><div></div><!-- --><header class="tm-header" data-test-id="header"><div class="tm-page-width"><!--[--><div class="tm-header__container"><!-- --><span class="tm-header__logo-wrap"><a class="tm-header__logo tm-header__logo_hl-ru tm-header__logo" href="/ru/"><svg class="tm-svg-img tm-header__icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a><span class="tm-header__beta-sign" style="display:none;">β</span></span><!--[--><div class="tm-dropdown tm-header__projects"><div class="tm-dropdown__head"><!--[--><button class="tm-header__dropdown-toggle"><svg class="tm-svg-img tm-header__icon tm-header__icon_dropdown" height="16" width="16"><title>Открыть список</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#arrow-down"></use></svg></button><!--]--></div><!-- --></div><a class="tm-header__become-author-btn" href="/ru/sandbox/start/">Как стать автором</a><div class="tm-feature tm-feature tm-feature_variant-inline tm-header__feature"><!-- --></div><!-- --><!--]--><!-- --></div><!--]--></div></header><div class="tm-layout"><div class="tm-page-progress-bar"></div><div class="tm-base-layout__header_is-sticky tm-base-layout__header" data-menu-sticky="true"><div class="tm-page-width"><!--[--><div class="tm-base-layout__header-wrapper"><div class="tm-main-menu"><div class="tm-main-menu__section"><nav class="tm-main-menu__section-content"><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/feed/">Моя лента</a><!--]--><!--[--><a class="tm-main-menu__item" href="/ru/articles/">Все потоки</a><!--]--><!--[--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/develop/">Разработка</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/admin/">Администрирование</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/design/">Дизайн</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/management/">Менеджмент</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/marketing/">Маркетинг</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/popsci/">Научпоп</a><!--]--><!--]--></nav></div></div><div class="tm-header-user-menu tm-base-layout__user-menu"><a class="tm-header-user-menu__item tm-header-user-menu__search" data-test-id="search-button" href="/ru/search/"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_search tm-header-user-menu__icon_dark" height="24" width="24"><title>Поиск</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#search"></use></svg></a><!-- --><!-- --><div class="tm-header-user-menu__item tm-header-user-menu__write"><div><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_write tm-header-user-menu__icon_dark" height="24" width="24"><title>Написать публикацию</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#write"></use></svg></div><!-- --></div><!--[--><div class="tm-header-user-menu__item"><button class="tm-header-user-menu__toggle" data-test-id="user-menu-settings"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_dark" height="24" width="24"><title>Настройки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#page-settings"></use></svg></button></div><a class="tm-header-user-menu__item" href="https://habr.com/kek/v1/auth/habrahabr/?back=/ru/companies/spring_aio/articles/848016/&amp;hl=ru" rel="nofollow"><!--[--><button class="btn btn_solid btn_small tm-header-user-menu__login" type="button"><!--[-->Войти<!--]--></button><!--]--></a><!--]--><!-- --><!--teleport start--><!--teleport end--><!-- --></div></div><!--]--></div></div><!-- --><div class="tm-page-width"><!--[--><!--]--></div><main class="tm-layout__container"><div class="tm-page" companyname="spring_aio" data-async-called="true" hl="ru" style="--0c809c5a:16px;--a086013e:100%;--7c457026:0;"><div class="tm-page-width"><!--[--><div class="tm-page__header"><!--[--><!--]--></div><div class="tm-page__wrapper"><div class="tm-page__main_has-sidebar tm-page__main"><div class="pull-down"><!-- --><div class="pull-down__header" style="height:0px;"><div class="pull-down__content" style="bottom:10px;"><svg class="tm-svg-img pull-down__icon pull-down__arrow" height="24" width="24"><title>Обновить</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#pull-arrow"></use></svg></div></div><!--[--><!--[--><div class="tm-article-presenter"><!--[--><!--[--><!-- --><div class="tm-company-profile-card tm-company-article__profile-card"><div class="tm-company-card tm-company-profile-card__info"><div class="tm-company-card__header"><a class="tm-company-card__avatar" href="/ru/companies/spring_aio/profile/"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="48" src="//habrastorage.org/getpro/habr/company/8f1/91a/458/8f191a4584b8fab12d15af23e447a1d5.png" width="48"/></div></a><!--[--><!-- --><div class="tm-counter-container tm-company-card__rating"><div class="tm-counter-container__header"><!--[--><!--[--><!--]--><div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!-- --><div class="tm-votes-lever__score tm-votes-lever__score_appearance-rating tm-votes-lever__score"><!--[--><span><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter_rating tm-votes-lever__score-counter" data-test-id="votes-score-counter">77.73</span></span><!--]--></div><!-- --></div><!--]--></div><div class="tm-counter-container__footer"><!--[--><span class="tm-rating__text tm-rating__text">Рейтинг</span><!--]--></div></div><!-- --><!--]--></div><div class="tm-company-card__info"><a class="tm-company-card__name" href="/ru/companies/spring_aio/profile/"><span>Spring АйО</span></a><!-- --></div></div><div class="tm-company-profile-card__buttons"><div class="tm-button-follow tm-company-profile-card__button tm-company-profile-card__button_follow"><!-- --><button class="tm-button-follow__button tm-button-follow__button_big" data-test-id="follow-button" type="button">Подписаться</button></div><!-- --><!-- --><!-- --></div></div><!-- --><!--]--><!--]--><div class="tm-article-presenter__body" data-test-id="article-body"><div class="tm-misprint-area"><div class="tm-misprint-area__wrapper"><!--[--><article class="tm-article-presenter__content tm-article-presenter__content_narrow"><!--[--><div class="tm-article-presenter__header"><!--[--><!--]--><div class="tm-article-snippet tm-article-snippet tm-article-presenter__snippet"><!--[--><!--]--><div class="tm-article-snippet__meta-container"><div class="tm-article-snippet__meta"><span class="tm-user-info tm-article-snippet__author"><a class="tm-user-info__userpic" data-test-id="user-info-pic" href="/ru/users/spring_aio/" title="spring_aio"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="24" src="//habrastorage.org/r/w48/getpro/habr/avatars/8e0/5e8/a1c/8e05e8a1c5fd4560f661efb2cb00e77e.png" width="24"/></div></a><span class="tm-user-info__user tm-user-info__user_appearance-default" data-test-id="user-info-description"><a class="tm-user-info__username" href="/ru/users/spring_aio/">spring_aio <!-- --></a><!--[--><span class="tm-article-datetime-published"><time datetime="2024-10-04T09:18:05.000Z" title="2024-10-04, 12:18">4  окт  2024 в 12:18</time></span><!--]--></span></span></div><!-- --></div><h1 class="tm-title tm-title_h1" data-test-id="articleTitle" lang="ru"><span>AI-ассистент со Spring AI (Часть I)</span></h1><div class="tm-article-snippet__stats" data-test-id="articleStats"><div class="tm-article-complexity tm-article-complexity_complexity-low"><span class="tm-svg-icon__wrapper tm-article-complexity__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Уровень сложности</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#complexity-low"></use></svg></span><span class="tm-article-complexity__label">Простой</span></div><div class="tm-article-reading-time"><span class="tm-svg-icon__wrapper tm-article-reading-time__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Время на прочтение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#clock"></use></svg></span><span class="tm-article-reading-time__label">23 мин</span></div><span class="tm-icon-counter tm-data-icons__item"><svg class="tm-svg-img tm-icon-counter__icon" height="24" width="24"><title>Количество просмотров</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-views"></use></svg><span class="tm-icon-counter__value" title="6228">6.2K</span></span></div><div class="tm-publication-hubs__container" data-test-id="articleHubsList"><div class="tm-publication-hubs"><!--[--><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/companies/spring_aio/articles/"><!--[--><span>Блог компании Spring АйО</span><!-- --><!--]--></a></span><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/hubs/java/"><!--[--><span>Java</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/hubs/kotlin/"><!--[--><span>Kotlin</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/hubs/programming/"><!--[--><span>Программирование</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><!--]--></div></div><div class="tm-article-labels" data-test-id="articleLabels"><div class="tm-article-labels__container"><div class="tm-publication-label tm-publication-label_variant-tutorial"><span>Туториал</span></div><!--[--><div class="tm-publication-label tm-publication-label_variant-translation"><span>Перевод</span></div><!--]--></div></div><!-- --><!-- --></div></div><!--[--><div class="tm-article-presenter__origin"><a class="tm-article-presenter__origin-link" href="https://spring.io/blog/2024/09/26/ai-meets-spring-petclinic-implementing-an-ai-assistant-with-spring-ai-part-i" target="_blank">Автор оригинала: <span>Oded Shopen</span></a></div><div class="tm-article-body" data-gallery-root="" lang="ru"><div><!--[--><!--]--></div><div id="post-content-body"><div><div class="article-formatted-body article-formatted-body article-formatted-body_version-2"><div xmlns="http://www.w3.org/1999/xhtml"><p>В новом переводе от команды <a href="https://t.me/+QmrKn0wA8CdkNjAy">Spring АйО</a> показан процесс интеграции AI в немалоизвестное приложение Spring Petclinic. </p><p>В статье автор пошагово делится своим опытом внедрения Spring AI, чтобы сделать приложение более интерактивным.</p><hr/><p><strong>Введение</strong></p><p>В этой статье из двух частей я расскажу о модификациях, которые я внес в проект <a href="https://github.com/spring-projects/spring-petclinic/tree/spring-ai">Spring Petclinic</a> для интеграции AI-помощника, позволяющего пользователям взаимодействовать с приложением на естественном языке.</p><p><strong>Введение в Spring Petclinic</strong></p><p>Spring Petclinic служит основным референсным приложением в экосистеме Spring. Согласно GitHub, репозиторий был создан 9 января 2013 года. С тех пор он стал модельным приложением для написания простого, удобного кода с использованием Spring Boot. На момент написания этой статьи он получил более 7 600 звезд и 23 000 форков.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/922/3e6/b94/9223e6b9467a2222c8c8bf296d25fb85.png" height="694" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/922/3e6/b94/9223e6b9467a2222c8c8bf296d25fb85.png" width="1292"/></figure><p>Приложение реализует систему управления ветеринарной клиникой для домашних животных. В приложении пользователи могут выполнять несколько действий:</p><ul><li><p>Получение списка владельцев домашних животных</p></li><li><p>Добавление нового владельца</p></li><li><p>Добавление питомца к владельцу</p></li><li><p>Документирование визита для конкретного питомца</p></li><li><p>Получение списка ветеринаров в клинике</p></li><li><p>Симуляция ошибки на стороне сервера</p></li></ul><p>Хотя приложение простое и понятное, оно эффективно демонстрирует удобство использования при разработке приложений Spring Boot.</p><p>Кроме того, команда Spring постоянно обновляет приложение для поддержки последних версий Spring Framework и Spring Boot.</p><p><strong>Используемые технологии</strong></p><p>Spring Petclinic разработан с использованием Spring Boot версии 3.3 на момент этой публикации.</p><p><strong>UI фронтенда</strong></p><p>Фронтенд построен с использованием <a href="https://www.thymeleaf.org/">Thymeleaf</a>. Шаблонизатор Thymeleaf упрощает интеграцию вызовов API на стороне сервера прямо в HTML-код, делая его понятным. Ниже приведен код, который получает список ветеринаров:</p><pre><code class="xml">&lt;table id="vets" class="table table-striped"&gt;
  &lt;thead&gt;
  &lt;tr&gt;
    &lt;th&gt;Name&lt;/th&gt;
    &lt;th&gt;Specialties&lt;/th&gt;
  &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
  &lt;tr th:each="vet : ${listVets}"&gt;
    &lt;td th:text="${vet.firstName + ' ' + vet.lastName}"&gt;&lt;/td&gt;
    &lt;td&gt;&lt;span th:each="specialty : ${vet.specialties}"
              th:text="${specialty.name + ' '}"/&gt; &lt;span
      th:if="${vet.nrOfSpecialties == 0}"&gt;none&lt;/span&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</code></pre><p>Ключевая строка здесь — <code>${listVets}</code>, которая ссылается на модель в бэкенде Spring, содержащую данные для заполнения. Ниже приведен соответствующий блок кода из Spring <code>@Controller</code>, который заполняет эту модель:</p><pre><code class="java">private String addPaginationModel(int page, Page&lt;Vet&gt; paginated, Model model) {
	List&lt;Vet&gt; listVets = paginated.getContent();
	model.addAttribute("currentPage", page);
	model.addAttribute("totalPages", paginated.getTotalPages());
	model.addAttribute("totalItems", paginated.getTotalElements());
	model.addAttribute("listVets", listVets);
	return "vets/vetList";
}</code></pre><p><strong>Spring Data JPA</strong></p><p>Petclinic взаимодействует с базой данных, используя Java Persistence API (JPA). Проект поддерживает H2, PostgreSQL или MySQL, в зависимости от выбранного профиля. Общение с базой данных осуществляется через интерфейсы <code>@Repository</code>, такие как <code>OwnerRepository.</code> Вот пример одного из JPA-запросов внутри интерфейса:</p><pre><code class="java">/**
* Returns all the owners from data store
**/
@Query("SELECT owner FROM Owner owner")
@Transactional(readOnly = true)
Page&lt;Owner&gt; findAll(Pageable pageable);</code></pre><p>JPA значительно упрощает ваш код, автоматически реализуя стандартные запросы для ваших методов на основе соглашений об именовании. Он также позволяет вам указать JPQL-запрос с помощью аннотации <code>@Query</code>, когда это необходимо.</p><p><strong>Привет, Spring AI</strong></p><p>Spring AI — один из самых захватывающих новых проектов в экосистеме Spring за последнее время. Он позволяет взаимодействовать с популярными большими языковыми моделями (LLM), используя знакомые парадигмы и техники Spring. Подобно тому, как Spring Data предоставляет абстракцию, позволяющую вам писать код один раз, делегируя реализацию предоставленному зависимому <code>spring-boot-starter</code> и конфигурации свойств, Spring AI предлагает подобный подход для LLM. Вы пишете свой код один раз в интерфейсе, и <code>@Bean</code> внедряется во время выполнения для вашей конкретной реализации.</p><p>Spring AI поддерживает все основные большие языковые модели, включая OpenAI, Azure OpenAI, Google Gemini, Amazon Bedrock и <a href="https://docs.spring.io/spring-ai/reference/api/chatmodel.html">многие другие</a>.</p><p><strong>Соображения по реализации AI в Spring Petclinic</strong></p><p>Spring Petclinic существует более 10 лет и изначально не был разработан с учетом AI. Этот проект является классическим кандидатом для тестирования интеграции AI в легаси код. В процессе добавления AI-ассистента в Spring Petclinic мне пришлось учесть несколько важных факторов.</p><p><strong>Выбор API модели</strong></p><p>Первым делом нужно было определить тип API, который я хотел бы реализовать. Spring AI предлагает различные возможности, включая поддержку чата, распознавания и генерации изображений, транскрипции аудио, преобразования текста в речь и многое другое. Для Spring Petclinic наиболее подходящим оказался знакомый интерфейс «чатбота». Это позволит сотрудникам клиники общаться с системой на естественном языке, упрощая их взаимодействие вместо навигации по вкладкам и формам UI. Мне также понадобятся возможности встраивания, которые будут использоваться для Retrieval-Augmented Generation (RAG) позже в статье.</p><figure class=""><img data-src="https://habrastorage.org/getpro/habr/upload_files/354/2ac/583/3542ac58328b5abe82f2e513eb44e34c.png" height="510" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/354/2ac/583/3542ac58328b5abe82f2e513eb44e34c.png" width="339"/></figure><p>Возможные взаимодействия с AI-помощником могут включать:</p><ul><li><p>Чем вы можете мне помочь?</p></li><li><p>Пожалуйста, перечислите владельцев, которые приходят в нашу клинику.</p></li><li><p>Какие ветеринары специализируются на радиологии?</p></li><li><p>Есть ли владелец питомца по имени Бетти?</p></li><li><p>У каких владельцев есть собаки?</p></li><li><p>Добавьте собаку для Бетти: ее зовут Мупси.</p></li></ul><p>Эти примеры иллюстрируют диапазон запросов, с которыми AI может справиться. Преимущество LLM заключается в их способности понимать естественный язык и предоставлять значимые ответы.</p><p><strong>Выбор поставщика большой языковой модели</strong></p><p>Технический мир сейчас переживает настоящую "золотую лихорадку" с большими языковыми моделями (LLM), которые появляются каждые несколько дней, предлагая расширенные возможности, увеличенные контекстные окна и такие передовые функции, как улучшенная логика рассуждений.</p><p>Некоторые из популярных LLM включают:</p><ul><li><p>OpenAI и его реализацию на Azure, Azure OpenAI</p></li><li><p>Google Gemini</p></li><li><p>Amazon Bedrock, управляемый сервис AWS, который может запускать различные LLM, включая Anthropic и Titan</p></li><li><p>Llama 3.1, а также многие другие модели с открытым исходным кодом, доступные через <a href="https://huggingface.co/">Hugging Face</a></p></li></ul><details class="spoiler"><summary>Комментарий от команды Spring АйО</summary><div class="spoiler__content"><p>Для пользователей из РФ также могут подойти GigaChat API и Bot hub</p></div></details><p>Для нашего приложения Petclinic мне нужна была модель, которая отлично справляется с возможностями чата, может быть адаптирована к специфическим потребностям моего приложения и поддерживает вызов функций (об этом позже!).</p><p>Одним из больших преимуществ Spring AI является простота проведения A/B-тестирования с различными LLM. Вы просто меняете зависимость и обновляете несколько свойств. Я протестировал несколько моделей, включая Llama 3.1, которую запускал локально. В конечном итоге я пришел к выводу, что OpenAI остается лидером в этой области, поскольку предоставляет наиболее естественные и плавные взаимодействия, избегая общих проблем, с которыми сталкиваются другие LLM.</p><p>Вот простой пример: при приветствии модели на базе OpenAI ответ следующий:</p><figure class=""><img data-src="https://habrastorage.org/getpro/habr/upload_files/3f4/b76/783/3f4b767837d2203ed31f1bac3efc7cda.png" height="613" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/3f4/b76/783/3f4b767837d2203ed31f1bac3efc7cda.png" width="411"/></figure><p>Отлично. Именно то, что я хотел. Просто, кратко, профессионально и удобно для пользователя.</p><p>Вот результат с использованием Llama 3.1:</p><figure class=""><img data-src="https://habrastorage.org/getpro/habr/upload_files/a8c/a8f/ffc/a8ca8fffc6284f173a3ac063afb9e18d.png" height="614" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/a8c/a8f/ffc/a8ca8fffc6284f173a3ac063afb9e18d.png" width="433"/></figure><p>Вы поняли суть. Он просто еще не на том уровне.</p><p>Установка желаемого поставщика LLM проста — просто установите его зависимость в <code>pom.xml</code> (или <code>build.gradle</code>) и предоставьте необходимые свойства конфигурации в <code>application.yaml</code> или <code>application.properties</code>:</p><pre><code class="xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.ai&lt;/groupId&gt;
    &lt;artifactId&gt;spring-ai-azure-openai-spring-boot-starter&lt;/artifactId&gt;
&lt;/dependency&gt;</code></pre><p>Здесь я выбрал реализацию OpenAI от Azure, но я мог бы легко переключиться на OpenAI Сэма Альтмана, изменив зависимость:</p><pre><code class="xml">&lt;dependency&gt;
		&lt;groupId&gt;org.springframework.ai&lt;/groupId&gt;
		&lt;artifactId&gt;spring-ai-openai-spring-boot-starter&lt;/artifactId&gt;
&lt;/dependency&gt;</code></pre><p>Поскольку я использую общедоступного поставщика LLM, мне нужно предоставить URL и API-ключ для доступа к LLM. Это можно настроить в `application.yaml`:</p><pre><code class="yaml">spring:
  ai:
    #These parameters apply when using the spring-ai-azure-openai-spring-boot-starter dependency:
    azure:
      openai:
        api-key: "the-api-key"
        endpoint: "https://the-url/"
        chat:
          options:
             deployment-name: "gpt-4o"
    #These parameters apply when using the spring-ai-openai-spring-boot-starter dependency:
    openai:
      api-key: ""
      endpoint: ""
      chat:
        options:
           deployment-name: "gpt-4o"</code></pre><p><strong>Приступим к кодированию!</strong></p><p>Наша цель — создать чат-клиент в стиле WhatsApp/iMessage, который интегрируется с существующим UI Spring Petclinic. UI фронтенда будет вызывать конечную точку API бэкенда, которая принимает строку в качестве входных данных и возвращает строку. Диалог будет открыт для любых вопросов пользователя, и если мы не сможем помочь с определенным запросом, мы предоставим соответствующий ответ.</p><p><strong>Создание ChatClient</strong></p><p>Вот реализация эндпоинта чата в классе <code>PetclinicChatClient</code>:</p><pre><code class="java">@PostMapping("/chatclient")
  public String exchange(@RequestBody String query) {
	  //All chatbot messages go through this endpoint and are passed to the LLM
	  return
	  this.chatClient
	  .prompt()
      .user(
          u -&gt;
              u.text(query)
              )
      .call()
      .content();
  }</code></pre><p>API принимает строковый запрос и передает его в Spring AI <code>ChatClient</code> в качестве пользовательского текста. <code>ChatClient</code> — это Spring Bean, предоставляемый Spring AI, который управляет отправкой пользовательского текста в LLM и возвращает результаты в <code>content()</code>.</p><blockquote><p>Весь код Spring AI работает в рамках определенного <code>@Profile</code> под названием <code>openai</code>. Дополнительный класс <code>PetclinicDisabledChatClient</code> запускается при использовании профиля по умолчанию или любого другого профиля. Этот отключенный профиль просто возвращает сообщение, указывающее, что чат недоступен.</p></blockquote><p>Наша реализация в основном делегирует ответственность <code>ChatClient</code>. Но как мы создаем сам bean <code>ChatClient</code>? Существует несколько настраиваемых опций, которые могут повлиять на пользовательский опыт. Давайте рассмотрим их по очереди и изучим их влияние на конечное приложение.</p><p><strong>Простой ChatClient</strong></p><p>Вот минимальное, неизмененное определение bean <code>ChatClient</code>:</p><pre><code class="java">public PetclinicChatClient(ChatClient.Builder builder) {
		this.chatClient = builder.build();
}</code></pre><p>Здесь мы просто запрашиваем экземпляр <code>ChatClient</code> из билдера, основываясь на текущем доступном стартере Spring AI в зависимостях. Хотя такая настройка работает, наш чат-клиент ничего не знает о домене Petclinic или его сервисах:</p><figure class=""><img data-src="https://habrastorage.org/getpro/habr/upload_files/058/68f/d05/05868fd05ecf23f6a2359875eed6625b.png" height="611" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/058/68f/d05/05868fd05ecf23f6a2359875eed6625b.png" width="412"/></figure><figure class=""><img data-src="https://habrastorage.org/getpro/habr/upload_files/f26/735/aca/f26735aca9648ca6c05f2decb3bf0f2c.png" height="617" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/f26/735/aca/f26735aca9648ca6c05f2decb3bf0f2c.png" width="411"/></figure><p>Он, безусловно, вежлив, но ему не хватает понимания нашего бизнес-домена. Кроме того, кажется, что он страдает от серьезной амнезии — он не может даже вспомнить мое имя из предыдущего сообщения!</p><blockquote><p>Когда я просматривал эту статью, я понял, что не следую <a href="https://youtu.be/XUz4LKZx83g?si=EPsh8EJQ0MFnviQa&amp;t=3828">совету</a> моего хорошего друга и коллеги Джоша Лонга. Я должен быть более вежливым с нашими новыми AI-властителями!</p></blockquote><p>Возможно, вы привыкли к отличной памяти ChatGPT, что делает его разговорчивым. Однако на самом деле API LLM полностью статичны и не сохраняют никаких прошлых сообщений, которые вы отправляете. Именно поэтому бот забыл мое имя так быстро.</p><p>Вы можете задаться вопросом, как ChatGPT сохраняет контекст разговора. Ответ прост: ChatGPT отправляет прошлые сообщения как контент вместе с каждым новым сообщением. Каждый раз, когда вы отправляете новое сообщение, оно включает предыдущие беседы, чтобы модель могла ссылаться на них. Хотя это может показаться расточительным, система работает именно так. Это также причина, по которой большие окна токенов становятся все более важными — пользователи ожидают вернуться к беседам прошлых дней и продолжить с того места, где они остановились.</p><p><strong>ChatClient с лучшей памятью</strong></p><p>Давайте реализуем подобную функцию «памяти чата» в нашем приложении. К счастью, Spring AI предоставляет для этого Advisor из коробки. Вы можете думать об advisors как о хуках, которые запускаются перед вызовом LLM. Полезно рассматривать их как напоминающие советы в аспекто-ориентированном программировании, даже если они не реализованы таким образом.</p><p>Вот наш обновленный код:</p><pre><code class="java"> public PetclinicChatClient(ChatClient.Builder builder, ChatMemory chatMemory) {
	// @formatter:off
	this.chatClient = builder
			.defaultAdvisors(
					// Chat memory helps us keep context when using the chatbot for up to 10 previous messages.
					new MessageChatMemoryAdvisor(chatMemory, DEFAULT_CHAT_MEMORY_CONVERSATION_ID, 10), // CHAT MEMORY
					new SimpleLoggerAdvisor()
					)
			.build();
  }</code></pre><p>В этом обновленном коде мы добавили <code>MessageChatMemoryAdvisor</code>, который автоматически связывает последние 10 сообщений с любым новым исходящим сообщением, помогая LLM понимать контекст.</p><p>Мы также включили готовый <code>SimpleLoggerAdvisor</code>, который журналирует запросы и ответы в LLM и из него.</p><p>Результат:</p><figure class=""><img data-src="https://habrastorage.org/getpro/habr/upload_files/739/6c2/a8d/7396c2a8d26088f53c256b747f30253a.png" height="612" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/739/6c2/a8d/7396c2a8d26088f53c256b747f30253a.png" width="412"/></figure><p>Наш новый чатбот имеет значительно лучшую память!</p><p>Однако он все еще не совсем понимает, что мы здесь делаем:</p><figure class=""><img data-src="https://habrastorage.org/getpro/habr/upload_files/a32/dcc/ea8/a32dccea809e0ec6ffb425a7a80ade80.png" height="613" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/a32/dcc/ea8/a32dccea809e0ec6ffb425a7a80ade80.png" width="410"/></figure><p>Этот ответ неплох для общей LLM с мировыми знаниями. Однако наша клиника очень специфична для домена, с определенными вариантами использования. Кроме того, наш чатбот должен сосредоточиться исключительно на помощи нам с нашей клиникой.</p><p>Например, он не должен пытаться ответить на такой вопрос:</p><figure class=""><img data-src="https://habrastorage.org/getpro/habr/upload_files/787/707/c41/787707c41a2b4301fcd79b9c0edc0a07.png" height="619" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/787/707/c41/787707c41a2b4301fcd79b9c0edc0a07.png" width="408"/></figure><p>Если мы позволим нашему чатботу отвечать на любые вопросы, пользователи могут начать использовать его в качестве бесплатной альтернативы таким сервисам, как ChatGPT, для доступа к более продвинутым моделям, таким как GPT-4. Очевидно, что нам нужно научить наш LLM «имитировать» конкретного поставщика услуг. Наш LLM должен сосредоточиться исключительно на помощи со Spring Petclinic: он должен знать о ветеринарах, владельцах, питомцах и визитах — и больше ни о чем.</p><p><strong>ChatClient, связанный с определенным доменом</strong></p><p>Spring AI предлагает решение и для этого. Большинство LLM различают пользовательский текст (сообщения чата, которые мы отправляем) и системный текст, который является общим текстом, инструктирующим LLM функционировать определенным образом. Давайте добавим системный текст в наш чат-клиент:</p><pre><code class="java">public PetclinicChatClient(ChatClient.Builder builder, ChatMemory chatMemory) {
	// @formatter:off
	this.chatClient = builder
			.defaultSystem("""
You are a friendly AI assistant designed to help with the management of a veterinarian pet clinic called Spring Petclinic.
Your job is to answer questions about the existing veterinarians and to perform actions on the user's behalf, mainly around
veterinarians, pet owners, their pets and their owner's visits.
You are required to answer an a professional manner. If you don't know the answer, politely tell the user
you don't know the answer, then ask the user a followup qusetion to try and clarify the question they are asking.
If you do know the answer, provide the answer but do not provide any additional helpful followup questions.
When dealing with vets, if the user is unsure about the returned results, explain that there may be additional data that was not returned.
Only if the user is asking about the total number of all vets, answer that there are a lot and ask for some additional criteria. For owners, pets or visits - answer the correct data.
			      		""")
			.defaultAdvisors(
					// Chat memory helps us keep context when using the chatbot for up to 10 previous messages.
					new MessageChatMemoryAdvisor(chatMemory, DEFAULT_CHAT_MEMORY_CONVERSATION_ID, 10), // CHAT MEMORY
					new LoggingAdvisor()
					)
			.build();
}</code></pre><p>Это довольно объемный системный промпт по умолчанию! Но поверьте мне, это необходимо. На самом деле, это, вероятно, недостаточно, и по мере того, как система используется чаще, мне, вероятно, придется добавлять больше контекста. Процесс инженерии промптов включает в себя разработку и оптимизацию входных промптов, чтобы вызвать конкретные, точные ответы для данного варианта использования.</p><p>LLM довольно разговорчивы: они любят отвечать на естественном языке. Эта тенденция может затруднить получение ответов от машины к машине в форматах, таких как JSON. Чтобы решить эту проблему, Spring AI предлагает набор функций, посвященных структурированному выводу, известному как <a href="https://docs.spring.io/spring-ai/reference/api/structured-output-converter.html">Structured Output Converter</a>. Команда Spring должна была определить оптимальные методы инженерии промптов, чтобы гарантировать, что LLM отвечает без ненужной «разговорчивости». Вот пример из <code>MapOutputConverter</code> в Spring AI:</p><pre><code class="java">@Override
public String getFormat() {
	String raw = """
			Your response should be in JSON format.
			The data structure for the JSON should match this Java class: %s
			Do not include any explanations, only provide a RFC8259 compliant JSON response following this format without deviation.
			Remove the ```json markdown surrounding the output including the trailing "```".
			""";
	return String.format(raw, HashMap.class.getName());
}</code></pre><p>Всякий раз, когда требуется ответ от LLM в формате JSON, Spring AI добавляет эту строку к запросу, призывая LLM соблюдать требования.</p><p>В последнее время в этой области произошли положительные сдвиги, особенно с инициативой OpenAI по Structured Outputs <span class="habrahidden">(ссылка от редакции Spring АйО: https://openai.com/index/introducing-structured-outputs-in-the-api/)</span>. Как это часто бывает с такими достижениями, <a href="https://spring.io/blog/2024/08/09/spring-ai-embraces-openais-structured-outputs-enhancing-json-response">Spring AI принял их с энтузиазмом</a>.</p><p>Теперь вернемся к нашему чатботу — давайте посмотрим, как он работает!</p><figure class=""><img data-src="https://habrastorage.org/getpro/habr/upload_files/c1b/1b7/8c2/c1b1b78c2a694725f90c45cd9953f17e.png" height="609" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/c1b/1b7/8c2/c1b1b78c2a694725f90c45cd9953f17e.png" width="411"/></figure><figure class=""><img data-src="https://habrastorage.org/getpro/habr/upload_files/56f/225/b6a/56f225b6abd0f2af16e1be8ac4ebad19.png" height="612" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/56f/225/b6a/56f225b6abd0f2af16e1be8ac4ebad19.png" width="417"/></figure><figure class=""><img data-src="https://habrastorage.org/getpro/habr/upload_files/171/6da/040/1716da0408b4ede9390386ae3f21360e.png" height="616" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/171/6da/040/1716da0408b4ede9390386ae3f21360e.png" width="411"/></figure><p>Это значительное улучшение! Теперь у нас есть чатбот, настроенный на наш домен, сосредоточенный на наших конкретных вариантах использования, запоминающий последние 10 сообщений, не предоставляющий никакой нерелевантной информации извне и избегающий галлюцинаций. Кроме того, наши логи выводят вызовы, которые мы делаем в LLM, что значительно упрощает отладку.</p><pre><code class="bash">2024-09-21T21:55:08.888+03:00 DEBUG 85824 --- [nio-8080-exec-5] o.s.a.c.c.advisor.SimpleLoggerAdvisor    : request: AdvisedRequest[chatModel=org.springframework.ai.azure.openai.AzureOpenAiChatModel@5cdd90c4, userText="Hi! My name is Oded.", systemText=You are a friendly AI assistant designed to help with the management of a veterinarian pet clinic called Spring Petclinic.
Your job is to answer questions about the existing veterinarians and to perform actions on the user's behalf, mainly around
veterinarians, pet owners, their pets and their owner's visits.
You are required to answer an a professional manner. If you don't know the answer, politely tell the user
you don't know the answer, then ask the user a followup qusetion to try and clarify the question they are asking.
If you do know the answer, provide the answer but do not provide any additional helpful followup questions.
When dealing with vets, if the user is unsure about the returned results, explain that there may be additional data that was not returned.
Only if the user is asking about the total number of all vets, answer that there are a lot and ask for some additional criteria. For owners, pets or visits - answer the correct data.
, chatOptions=org.springframework.ai.azure.openai.AzureOpenAiChatOptions@c4c74d4, media=[], functionNames=[], functionCallbacks=[], messages=[], userParams={}, systemParams={}, advisors=[org.springframework.ai.chat.client.advisor.observation.ObservableRequestResponseAdvisor@1e561f7, org.springframework.ai.chat.client.advisor.observation.ObservableRequestResponseAdvisor@79348b22], advisorParams={}]
2024-09-21T21:55:10.594+03:00 DEBUG 85824 --- [nio-8080-exec-5] o.s.a.c.c.advisor.SimpleLoggerAdvisor    : response: {"result":{"metadata":{"contentFilterMetadata":{"sexual":{"severity":"safe","filtered":false},"violence":{"severity":"safe","filtered":false},"hate":{"severity":"safe","filtered":false},"selfHarm":{"severity":"safe","filtered":false},"profanity":null,"customBlocklists":null,"error":null,"protectedMaterialText":null,"protectedMaterialCode":null},"finishReason":"stop"},"output":{"messageType":"ASSISTANT","metadata":{"finishReason":"stop","choiceIndex":0,"id":"chatcmpl-A9zY6UlOdkTCrFVga9hbzT0LRRDO4","messageType":"ASSISTANT"},"toolCalls":[],"content":"Hello, Oded! How can I assist you today at Spring Petclinic?"}},"metadata":{"id":"chatcmpl-A9zY6UlOdkTCrFVga9hbzT0LRRDO4","model":"gpt-4o-2024-05-13","rateLimit":{"requestsLimit":0,"requestsRemaining":0,"requestsReset":0.0,"tokensRemaining":0,"tokensLimit":0,"tokensReset":0.0},"usage":{"promptTokens":633,"generationTokens":17,"totalTokens":650},"promptMetadata":[{"contentFilterMetadata":{"sexual":null,"violence":null,"hate":null,"selfHarm":null,"profanity":null,"customBlocklists":null,"error":null,"jailbreak":null,"indirectAttack":null},"promptIndex":0}],"empty":false},"results":[{"metadata":{"contentFilterMetadata":{"sexual":{"severity":"safe","filtered":false},"violence":{"severity":"safe","filtered":false},"hate":{"severity":"safe","filtered":false},"selfHarm":{"severity":"safe","filtered":false},"profanity":null,"customBlocklists":null,"error":null,"protectedMaterialText":null,"protectedMaterialCode":null},"finishReason":"stop"},"output":{"messageType":"ASSISTANT","metadata":{"finishReason":"stop","choiceIndex":0,"id":"chatcmpl-A9zY6UlOdkTCrFVga9hbzT0LRRDO4","messageType":"ASSISTANT"},"toolCalls":[],"content":"Hello, Oded! How can I assist you today at Spring Petclinic?"}}]}</code></pre><p><strong>Определение основной функциональности</strong></p><p>Наш чатбот работает как и планировалось, но в настоящее время ему не хватает знаний о данных в нашем приложении. Давайте сосредоточимся на основных функциях, которые поддерживает Spring Petclinic, и сопоставим их с функциями, которые мы можем включить с помощью Spring AI:</p><p><strong>Список владельцев</strong></p><p>На вкладке Owners мы можем искать владельца по фамилии или просто вывести список всех владельцев. Мы можем получить подробную информацию о каждом владельце, включая их имя и фамилию, а также их питомцев и их типы:</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/f49/341/8df/f493418df448819945c4ec91314729c8.png" height="1142" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/f49/341/8df/f493418df448819945c4ec91314729c8.png" width="1354"/></figure><p><strong>Добавление владельца</strong></p><p>Приложение позволяет добавить нового владельца, предоставив необходимые параметры, продиктованные системой. У владельца должны быть имя, фамилия, адрес и 10-значный номер телефона.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/b7a/6c0/adf/b7a6c0adf51541224a7fefc14e523045.png" height="896" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/b7a/6c0/adf/b7a6c0adf51541224a7fefc14e523045.png" width="1031"/></figure><p><strong>Добавление питомца существующему владельцу</strong></p><p>Владелец может иметь нескольких питомцев. Типы питомцев ограничены следующими: кошка, собака, ящерица, змея, птица или хомяк.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/557/6c7/5f9/5576c75f9c1a40bbe33f056621320484.png" height="896" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/557/6c7/5f9/5576c75f9c1a40bbe33f056621320484.png" width="1031"/></figure><p><strong>Ветеринары</strong></p><p>Вкладка Veterinarians (Ветеринары) отображает доступных ветеринаров в виде с пагинацией, вместе с их специализациями. В настоящее время в этой вкладке нет возможности поиска. В то время как в основной ветке <code>main</code> Spring Petclinic представлено несколько ветеринаров, я сгенерировал сотни фиктивных ветеринаров в ветке <code>spring-ai</code>, чтобы симулировать приложение, обрабатывающее значительный объем данных. Позже мы рассмотрим, как мы можем использовать генерацию с дополненным извлечением (RAG) для управления такими большими наборами данных.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/a64/539/05c/a6453905ce2df805c16a489fd95a1716.png" height="1144" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/a64/539/05c/a6453905ce2df805c16a489fd95a1716.png" width="1357"/></figure><p>Это основные операции, которые мы можем выполнять в системе. Мы сопоставили наше приложение с его базовыми функциями и хотели бы, чтобы OpenAI мог интерпретировать запросы на естественном языке, соответствующие этим операциям.</p><p><strong>Вызов функций с помощью Spring AI</strong></p><p>В предыдущем разделе мы описали четыре разные функции. Теперь давайте сопоставим их с функциями, которые мы можем использовать в Spring AI, указав определенные бины <code>java.util.function.Function</code>.</p><p><strong>Список владельцев</strong></p><p>Следующая функция <code>java.util.function.Function</code> отвечает за получение списка владельцев в Spring Petclinic:</p><pre><code class="java">@Configuration
@Profile("openai")
class AIFunctionConfiguration {

	// The @Description annotation helps the model understand when to call the function
	@Bean
	@Description("List the owners that the pet clinic has")
	public Function&lt;OwnerRequest, OwnersResponse&gt; listOwners(AIDataProvider petclinicAiProvider) {
		return request -&gt; {
			return petclinicAiProvider.getAllOwners();
		};
	}
}
record OwnerRequest(Owner owner) {
};

record OwnersResponse(List&lt;Owner&gt; owners) {
};</code></pre><ul><li><p>Мы создаем класс <code>@Configuration</code> в профиле <code>openai</code>, где регистрируем стандартный Spring <code>@Bean</code>.</p></li><li><p>Бин должен возвращать <code>java.util.function.Function</code>.</p></li><li><p>Мы используем аннотацию <code>@Description</code> из Spring, чтобы объяснить, что делает эта функция. Примечательно, что Spring AI передаст это описание в LLM, чтобы помочь ему определить, когда вызывать эту конкретную функцию.</p></li><li><p>Функция принимает запись <code>OwnerRequest</code>, которая содержит существующий класс сущности <code>Owner</code> из Spring Petclinic. Это демонстрирует, как Spring AI может использовать компоненты, которые вы уже разработали в своем приложении, без необходимости полного переписывания. <span class="habrahidden">Комментарий от команды Spring АйО: для данного запроса не требуется Owner. Автор привел в пример функцию, которой фактически не нужны аргументы.</span></p></li><li><p>OpenAI решит, когда вызвать функцию с JSON-объектом, представляющим запись <code>OwnerRequest</code>. Spring AI автоматически конвертирует этот JSON в объект <code>OwnerRequest</code> и выполнит функцию. После получения ответа Spring AI конвертирует полученную запись <code>OwnerResponse</code> (которая содержит <code>List&lt;Owner&gt;</code>) обратно в формат JSON для обработки OpenAI. Когда OpenAI получит ответ, он сформирует ответ для пользователя на естественном языке.</p></li><li><p>Функция вызывает бин <code>AIDataProvider</code> с аннотацией <code>@Service</code>, который реализует фактическую логику. В нашем простом случае использования функция просто запрашивает данные с помощью JPA:</p></li></ul><pre><code class="java">  public OwnersResponse getAllOwners() {
	  Pageable pageable = PageRequest.of(0, 100);
	  Page&lt;Owner&gt; ownerPage = ownerRepository.findAll(pageable);
	  return new OwnersResponse(ownerPage.getContent());
  }</code></pre><ul><li><p>Существующий легаси код Spring Petclinic возвращает данные с пагинацией, чтобы размер ответа оставался управляемым и облегчал обработку для представления с пагинацией в UI. В нашем случае мы ожидаем, что общее количество владельцев будет относительно небольшим, и OpenAI сможет обработать такой трафик в одном запросе. Поэтому мы возвращаем первые 100 владельцев в одном запросе JPA.</p><p>Вы можете подумать, что этот подход не оптимален, и для реального приложения вы были бы правы. Если бы было большое количество данных, этот метод был бы неэффективен — вероятно, у нас было бы больше 100 владельцев в системе. Для таких сценариев нам нужно было бы реализовать другой шаблон, который мы рассмотрим в функции <code>listVets</code>. Однако для нашего демонстрационного варианта использования мы предположим, что в нашей системе содержится менее 100 владельцев.</p></li></ul><p>Давайте воспроизведем настоящий пример вместе с <code>SimpleLoggerAdvisor</code>, чтобы посмотреть, что происходит «за кулисами»:</p><figure class=""><img data-src="https://habrastorage.org/getpro/habr/upload_files/b82/73d/2d6/b8273d2d69563e20847722e260a21ddb.png" height="437" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/b82/73d/2d6/b8273d2d69563e20847722e260a21ddb.png" width="303"/></figure><p>Что здесь произошло? Давайте рассмотрим вывод из лога <code>SimpleLoggerAdvisor</code> для исследования:</p><pre><code class="bash">request: 
AdvisedRequest[chatModel=org.springframework.ai.azure.openai.AzureOpenAiChatModel@18e69455, 
userText=
"List the owners that are called Betty.", 
systemText=You are a friendly AI assistant designed to help with the management of a veterinarian pet clinic called Spring Petclinic.
Your job...
chatOptions=org.springframework.ai.azure.openai.AzureOpenAiChatOptions@3d6f2674, 
media=[], 
functionNames=[], 
functionCallbacks=[], 
messages=[UserMessage{content='"Hi there!"', 
properties={messageType=USER}, 
messageType=USER}, 
AssistantMessage [messageType=ASSISTANT, toolCalls=[], 
textContent=Hello! How can I assist you today at Spring Petclinic?, 
metadata={choiceIndex=0, finishReason=stop, id=chatcmpl-A99D20Ql0HbrpxYc0LIkWZZLVIAKv, 
messageType=ASSISTANT}]], 
userParams={}, systemParams={}, advisors=[org.springframework.ai.chat.client.advisor.observation.ObservableRequestResponseAdvisor@1d04fb8f, 
org.springframework.ai.chat.client.advisor.observation.ObservableRequestResponseAdvisor@2fab47ce], advisorParams={}]</code></pre><p>Запрос содержит интересные нам данные о том, что отправляется в LLM, включая пользовательский текст, исторические сообщения, идентификатор, представляющий текущую сессию чата, список советников для запуска и системный текст.</p><p>Вы можете задаться вопросом, где функции в зафиксированном выше запросе. Функции не явно зафиксированы, они инкапсулированы в содержимом <code>AzureOpenAiChatOptions</code>. Изучение объекта в режиме отладки раскрывает список функций, доступных модели:</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/c71/29d/167/c7129d16738baca82f874075e3fc9423.png" height="587" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/c71/29d/167/c7129d16738baca82f874075e3fc9423.png" width="855"/></figure><p>OpenAI обработает запрос, определит, что ему нужны данные из списка владельцев, и вернет JSON-ответ в Spring AI, запрашивая дополнительную информацию из функции <code>listOwners</code>. Затем Spring AI вызовет эту функцию, используя предоставленный объект <code>OwnersRequest</code> от OpenAI, и отправит ответ обратно в OpenAI, поддерживая идентификатор беседы для помощи в непрерывности сессии через статическое соединение. OpenAI сгенерирует окончательный ответ на основе предоставленных дополнительных данных. Давайте рассмотрим этот ответ, как он представлен в логе:</p><pre><code class="json">response: {
  "result": {
    "metadata": {
      "finishReason": "stop",
      "contentFilterMetadata": {
        "sexual": {
          "severity": "safe",
          "filtered": false
        },
        "violence": {
          "severity": "safe",
          "filtered": false
        },
        "hate": {
          "severity": "safe",
          "filtered": false
        },
        "selfHarm": {
          "severity": "safe",
          "filtered": false
        },
        "profanity": null,
        "customBlocklists": null,
        "error": null,
        "protectedMaterialText": null,
        "protectedMaterialCode": null
      }
    },
    "output": {
      "messageType": "ASSISTANT",
      "metadata": {
        "choiceIndex": 0,
        "finishReason": "stop",
        "id": "chatcmpl-A9oKTs6162OTut1rkSKPH1hE2R08Y",
        "messageType": "ASSISTANT"
      },
      "toolCalls": [],
      "content": "The owner named Betty in our records is:\n\n- **Betty Davis**\n  - **Address:** 638 Cardinal Ave., Sun Prairie\n  - **Telephone:** 608-555-1749\n  - **Pet:** Basil (Hamster), born on 2012-08-06\n\nIf you need any more details or further assistance, please let me know!"
    }
  },
  ...
  ]
}</code></pre><p>Мы видим сам ответ в разделе <code>content</code>. Большая часть возвращенного JSON состоит из метаданных — таких как фильтры контента, используемая модель, идентификатор сессии чата в ответе, количество задействованных токенов, как завершился ответ и многое другое.</p><p>Это иллюстрирует, как система работает от начала до конца: она начинается в вашем браузере, достигает бэкенда Spring и включает взаимодействие типа B2B между Spring AI и LLM, пока ответ не будет отправлен обратно в JavaScript, который сынициировал вызов.</p><p>Теперь давайте рассмотрим оставшиеся три функции.</p><p><strong>Добавление питомца владельцу</strong></p><p>Метод <code>addPetToOwner</code> особенно интересен, потому что демонстрирует мощь вызова функций модели.</p><p>Когда пользователь хочет добавить питомца владельцу, не стоит ожидать, что он введет идентификатор типа питомца. Вместо этого они, скорее всего, скажут, что питомец — это «собака», а не просто предоставят числовой идентификатор, например «2».</p><p>Чтобы помочь LLM определить правильный тип питомца, я использовал аннотацию <code>@Description</code>, чтобы предоставить подсказки о наших требованиях. Поскольку наша ветеринарная клиника работает только с шестью типами питомцев, такой подход управляем и эффективен:</p><pre><code class="java">@Bean
@Description("Add a pet with the specified petTypeId, " + "to an owner identified by the ownerId. "
		+ "The allowed Pet types IDs are only: " + "1 - cat" + "2 - dog" + "3 - lizard" + "4 - snake" + "5 - bird"
		+ "6 - hamster")
public Function&lt;AddPetRequest, AddedPetResponse&gt; addPetToOwner(AIDataProvider petclinicAiProvider) {
	return request -&gt; {
		return petclinicAiProvider.addPetToOwner(request);
	};
}</code></pre><p>Запись <code>AddPetRequest</code> включает тип питомца в свободном тексте, отражая, как пользователь обычно предоставляет его, вместе с полной сущностью <code>Pet</code> и ссылочным <code>ownerId</code>.</p><pre><code class="java">record AddPetRequest(Pet pet, String petType, Integer ownerId) {
};
record AddedPetResponse(Owner owner) {
};</code></pre><p>Вот бизнес-реализация: мы получаем владельца по его ID, затем добавляем нового питомца к его существующему списку питомцев.</p><pre><code class="java">public AddedPetResponse addPetToOwner(AddPetRequest request) {
	Owner owner = ownerRepository.findById(request.ownerId());
	owner.addPet(request.pet());
	this.ownerRepository.save(owner);
	return new AddedPetResponse(owner);
}</code></pre><p>При дебаге приложения для этого кейса я заметил интересное поведение: в некоторых случаях сущность <code>Pet</code> в запросе уже была предварительно заполнена правильным идентификатором типа питомца и именем.</p><figure class=""><img data-src="https://habrastorage.org/getpro/habr/upload_files/3e7/5b0/14e/3e75b014e68a912622bc02a2a963033a.png" height="376" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/3e7/5b0/14e/3e75b014e68a912622bc02a2a963033a.png" width="273"/></figure><p>Я также заметил, что на самом деле не использовал строку <code>petType</code> в своей бизнес-реализации. Возможно ли, что Spring AI просто «понял» правильное соответствие имени <code>PetType</code> правильному идентификатору самостоятельно?</p><p>Чтобы проверить это, я удалил <code>petType</code> из объекта запроса и упростил <code>@Description</code>:</p><pre><code class="java">@Bean
@Description("Add a pet with the specified petTypeId, to an owner identified by the ownerId.")
public Function&lt;AddPetRequest, AddedPetResponse&gt; addPetToOwner(AIDataProvider petclinicAiProvider) {
	return request -&gt; {
		return petclinicAiProvider.addPetToOwner(request);
	};
}

record AddPetRequest(Pet pet, Integer ownerId) {
};
record AddedPetResponse(Owner owner) {
};</code></pre><p>Я обнаружил, что в большинстве промптов LLM сам понял (что удивительно), как выполнить сопоставление. В конце концов, я сохранил оригинальное описание в PR, потому что заметил некоторые крайние случаи, когда LLM испытывал трудности и не мог сопоставить корреляцию.</p><p>Тем не менее, даже для 80% случаев использования это было очень впечатляюще. Такие вещи делают Spring AI и LLM почти волшебными. Взаимодействие между Spring AI и OpenAI помогло понять, что <code>PetType</code> в аннотации <code>@Entity</code> класса <code>Pet</code> нуждается в сопоставлении строки «lizard» с соответствующим значением ID в базе данных. Такой бесшовный интеграционный подход демонстрирует потенциал сочетания традиционного программирования с возможностями AI.</p><pre><code class="sql">// Это оригинанальные insert`ы в data.sql
INSERT INTO types VALUES (default, 'cat'); //1
INSERT INTO types VALUES (default, 'dog'); //2
INSERT INTO types VALUES (default, 'lizard'); //3
INSERT INTO types VALUES (default, 'snake'); //4
INSERT INTO types VALUES (default, 'bird'); //5
INSERT INTO types VALUES (default, 'hamster'); //6</code></pre><pre><code class="java">@Entity
@Table(name = "pets")
public class Pet extends NamedEntity {

	private static final long serialVersionUID = 622048308893169889L;

	@Column(name = "birth_date")
	@DateTimeFormat(pattern = "yyyy-MM-dd")
	private LocalDate birthDate;

	@ManyToOne
	@JoinColumn(name = "type_id")
	private PetType type;

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
	@JoinColumn(name = "pet_id")
	@OrderBy("visit_date ASC")
	private Set&lt;Visit&gt; visits = new LinkedHashSet&lt;&gt;();</code></pre><p>Это работает, даже если вы делаете опечатки в запросе. В примере ниже LLM идентифицировал, что я написал «hamstr» вместо «hamster», исправил запрос и успешно сопоставил его с правильным идентификатором питомца:</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/78a/b14/93d/78ab1493d11b302222bccd95ea3cb66c.png" height="1292" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/78a/b14/93d/78ab1493d11b302222bccd95ea3cb66c.png" width="1435"/></figure><p>Если вы углубитесь, вы найдете еще более впечатляющие вещи. <code>AddPetRequest</code> передает только <code>ownerId</code> в качестве параметра: я предоставил имя владельца вместо его ID, и LLM смог самостоятельно определить правильное соответствие. Это указывает на то, что LLM решил вызвать функцию <code>listOwners</code> перед вызовом функции <code>addPetToOwner</code>. Добавив несколько точек останова, мы можем подтвердить это поведение. Сначала мы попадаем на точку останова для получения владельцев:</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/519/712/e73/519712e730d98007f73f366010a90987.png" height="169" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/519/712/e73/519712e730d98007f73f366010a90987.png" width="996"/></figure><p>Только после того, как данные владельца возвращены и обработаны, мы вызываем функцию <code>addPetToOwner</code>:</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/db8/eb9/aaf/db8eb9aaf40b24127fb2816aca83ff47.png" height="194" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/db8/eb9/aaf/db8eb9aaf40b24127fb2816aca83ff47.png" width="971"/></figure><p>Мой вывод таков: с Spring AI начинайте с простого. Предоставьте основные данные, которые вы знаете, что они потребуются, и используйте короткие, лаконичные описания бинов. Вероятно, Spring AI и LLM «вычислят» остальное. Только когда возникнут проблемы, вы должны начать добавлять больше подсказок в систему.</p><p><strong>Добавление владельца</strong></p><p>Функция <code>addOwner</code> относительно проста. Она принимает владельца и добавляет его в систему. Однако в этом примере мы можем увидеть, как выполнять валидацию и задавать последующие вопросы с помощью нашего чат-помощника:</p><pre><code class="java">@Bean
@Description("Add a new pet owner to the pet clinic. "
		+ "The Owner must include first and last name, "
		+ "an address and a 10-digit phone number")
public Function&lt;OwnerRequest, OwnerResponse&gt; addOwnerToPetclinic(AIDataProvider petclinicAiDataProvider) {
	return request -&gt; {
		return petclinicAiDataProvider.addOwnerToPetclinic(request);
	};
}

record OwnerRequest(Owner owner) {
};
record OwnerResponse(Owner owner) {
};</code></pre><p>Бизнес-реализация проста:</p><pre><code class="java">public OwnerResponse addOwnerToPetclinic(OwnerRequest ownerRequest) {
	ownerRepository.save(ownerRequest.owner());
	return new OwnerResponse(ownerRequest.owner());
}</code></pre><p>Здесь мы направляем модель, чтобы убедиться, что <code>Owner</code> внутри <code>OwnerRequest</code> соответствует определенным критериям валидации перед тем, как он будет добавлен. В частности, владелец должен включать имя, фамилию, адрес и 10-значный номер телефона. Если какая-либо из этой информации отсутствует, модель предложит нам предоставить необходимые детали перед продолжением добавления владельца.</p><figure class=""><img data-src="https://habrastorage.org/getpro/habr/upload_files/b0f/9b4/a01/b0f9b4a01ac0eaa49172ba6096538a4f.png" height="604" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/b0f/9b4/a01/b0f9b4a01ac0eaa49172ba6096538a4f.png" width="407"/></figure><p>Модель не создала нового владельца до запроса необходимых дополнительных данных, таких как адрес, город и номер телефона. Однако я не помню, чтобы предоставил требуемую фамилию. Будет ли это работать?</p><figure class=""><img data-src="https://habrastorage.org/getpro/habr/upload_files/555/b7c/489/555b7c4892db98a68a7b3f8328ae3edf.png" height="614" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/555/b7c/489/555b7c4892db98a68a7b3f8328ae3edf.png" width="410"/></figure><p>Мы выявили крайний случай в модели: она, кажется, не соблюдает требование о фамилии, даже несмотря на то, что <code>@Description</code> указывает, что это обязательно. Как мы можем решить эту проблему? На помощь приходит инженерия промптов!</p><pre><code class="java">@Bean
@Description("Add a new pet owner to the pet clinic. "
		+ "The Owner must include a first name and a last name as two separate words, "
		+ "plus an address and a 10-digit phone number")
public Function&lt;OwnerRequest, OwnerResponse&gt; addOwnerToPetclinic(AIDataProvider petclinicAiDataProvider) {
	return request -&gt; {
		return petclinicAiDataProvider.addOwnerToPetclinic(request);
	};
}</code></pre><p>Добавив подсказку «как два отдельных слова» в наше описание, модель получила ясность о наших ожиданиях, что позволило ей правильно обеспечить требование о фамилии.</p><figure class=""><img data-src="https://habrastorage.org/getpro/habr/upload_files/4c3/6ac/2b3/4c36ac2b350a62da49afb09c26c4719c.png" height="616" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/4c3/6ac/2b3/4c36ac2b350a62da49afb09c26c4719c.png" width="410"/></figure><figure class=""><img data-src="https://habrastorage.org/getpro/habr/upload_files/111/ff9/869/111ff98690842eea32934ee4cf09bfb7.png" height="606" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/111/ff9/869/111ff98690842eea32934ee4cf09bfb7.png" width="404"/></figure><figure class=""><img data-src="https://habrastorage.org/getpro/habr/upload_files/c34/d62/32c/c34d6232c895e2b60c5deb052c2a6e29.png" height="611" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/c34/d62/32c/c34d6232c895e2b60c5deb052c2a6e29.png" width="417"/></figure><p><strong>Следующие шаги</strong></p><p>В первой части этой статьи мы рассмотрели, как использовать Spring AI для работы с большими языковыми моделями. Мы создали кастомный ChatClient, применили вызов функций и улучшили процесс формирования запросов для наших конкретных нужд.</p><p>Во второй части мы углубимся в возможности Retrieval-Augmented Generation (RAG), чтобы интегрировать модель с большими специализированными наборами данных, которые слишком объемны для подхода с вызовом функций.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/725/c0c/ddb/725c0cddbe78ce9d7a9dd868c3632ad6.png" height="334" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/725/c0c/ddb/725c0cddbe78ce9d7a9dd868c3632ad6.png" width="1560"/></figure><p>Присоединяйтесь к русскоязычному сообществу разработчиков на Spring Boot в телеграм — <a href="https://t.me/+oBwACbkvJ19iODAy">Spring АйО</a>, чтобы быть в курсе последних новостей из мира разработки на Spring Boot и всего, что с ним связано.</p><p>Ждем всех, <a href="https://t.me/+oBwACbkvJ19iODAy">присоединяйтесь</a></p><p></p></div></div></div><!-- --><!-- --></div><!-- --><!-- --></div><!--]--><!-- --><div class="tm-article-presenter__meta" data-test-id="article-meta-links"><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Теги:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[java]"><span>java</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[kotlin]"><span>kotlin</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[spring]"><span>spring</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[spring-boot]"><span>spring-boot</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[spring+boot]"><span>spring boot</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[spring+framework]"><span>spring framework</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[jpa]"><span>jpa</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[ai]"><span>ai</span></a><!--]--></li><!--]--><!-- --></ul></div><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Хабы:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/companies/spring_aio/articles/"><!--[--><span>Блог компании Spring АйО</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/hubs/java/"><!--[--><span>Java</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/hubs/kotlin/"><!--[--><span>Kotlin</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/hubs/programming/"><!--[--><span>Программирование</span><!--]--></a><!--]--></li><!--]--><!-- --></ul></div></div><!-- --><!--]--></article><!--]--></div><!-- --></div><div class="tm-article-sticky-panel" data-test-id="article-sticky-panel" style=""><div class="tm-data-icons tm-data-icons tm-data-icons_space-big tm-article-sticky-panel__icons" data-test-id="article-stats-icons"><div class="tm-article-rating tm-data-icons__item"><div class="tm-votes-meter tm-article-rating__votes-switcher"><svg class="tm-svg-img tm-votes-meter__icon tm-votes-meter__icon tm-votes-meter__icon_appearance-article" height="24" width="24"><title>Всего голосов 10: ↑10 и ↓0</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-rating"></use></svg><span class="tm-votes-meter__value tm-votes-meter__value_positive tm-votes-meter__value_appearance-article tm-votes-meter__value_rating tm-votes-meter__value" data-test-id="votes-meter-value" title="Всего голосов 10: ↑10 и ↓0">+12</span></div><!--teleport start--><!--teleport end--><!-- --></div><!-- --><!-- --><button class="bookmarks-button tm-data-icons__item" title="Добавить в закладки" type="button"><span class="tm-svg-icon__wrapper bookmarks-button__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Добавить в закладки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-favorite"></use></svg></span><span class="bookmarks-button__counter" title="Количество пользователей, добавивших публикацию в закладки">39</span></button><div class="tm-sharing tm-data-icons__item" title="Поделиться"><button class="tm-sharing__button" type="button"><svg class="tm-sharing__icon" viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M13.8 13.8V18l7.2-6.6L13.8 5v3.9C5 8.9 3 18.6 3 18.6c2.5-4.4 6-4.8 10.8-4.8z" fill="currentColor"></path></svg></button><!--teleport start--><!--teleport end--></div><div class="tm-article-comments-counter-link tm-data-icons__item" title="Читать комментарии"><a class="tm-article-comments-counter-link__link" data-test-id="counter-comments" href="/ru/companies/spring_aio/articles/848016/comments/"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value">1</span><!--]--></a><!-- --></div><!--[--><!--[--><!--[--><!-- --><!--]--><!--]--><!--]--><!--teleport start--><!--teleport end--><!-- --></div></div></div><!--[--><!--]--><div class="tm-article-presenter__footer"><!--[--><!--[--><div class="tm-article-blocks"><!-- --><!--[--><section class="tm-block tm-block tm-block_spacing-bottom"><!-- --><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-balanced"><!--[--><div class="tm-article-author" data-test-id="article-author-info"><!--[--><!--[--><div class="tm-article-author__company"><div class="tm-article-author__company-card"><div class="tm-company-snippet"><a class="tm-company-snippet__logo-link" href="/ru/companies/spring_aio/profile/"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="40" src="//habrastorage.org/getpro/habr/company/8f1/91a/458/8f191a4584b8fab12d15af23e447a1d5.png" width="40"/></div></a><div class="tm-company-snippet__info"><a class="tm-company-snippet__title" data-test-id="company-title" href="/ru/companies/spring_aio/profile/"><span>Spring АйО</span></a><div class="tm-company-snippet__description">Компания</div></div></div><div class="tm-article-author__buttons"><!-- --><!-- --></div></div><div class="tm-article-author__company-contacts"><!--[--><a class="tm-article-author__contact" href="https://telegram.me/spring_aio" rel="noopener" target="_blank">Telegram</a><a class="tm-article-author__contact" href="https://www.springnow.ru" rel="noopener" target="_blank">Сайт</a><!--]--></div><div class="tm-article-author__separator"></div></div><!--]--><!--]--><div class="tm-user-card tm-user-card tm-user-card_variant-article tm-article-author__user-card" data-async-called="true"><div class="tm-user-card__info-container"><div class="tm-user-card__header"><div class="tm-user-card__header-data"><a class="tm-user-card__userpic tm-user-card__userpic_size-40" href="/ru/users/spring_aio/"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" src="//habrastorage.org/getpro/habr/avatars/8e0/5e8/a1c/8e05e8a1c5fd4560f661efb2cb00e77e.png"/></div></a><div class="tm-user-card__meta"><div class="tm-counter-container tm-karma tm-karma" title=" 85 голосов "><div class="tm-counter-container__header"><!--[--><div class="karma-display positive" data-v-7635202e="">45</div><!-- --><!--]--></div><div class="tm-counter-container__footer"><!--[--><div class="tm-karma__text">Карма</div><!--teleport start--><!--teleport end--><!--]--></div></div><div class="tm-counter-container" title="Рейтинг пользователя"><div class="tm-counter-container__header"><!--[--><!--[--><!--]--><div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!-- --><div class="tm-votes-lever__score tm-votes-lever__score_appearance-rating tm-votes-lever__score_no-margin tm-votes-lever__score"><!--[--><span><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter_rating tm-votes-lever__score-counter" data-test-id="votes-score-counter">105.9</span></span><!--]--></div><!-- --></div><!--]--></div><div class="tm-counter-container__footer"><!--[--><span class="tm-rating__text tm-rating__text">Рейтинг</span><!--]--></div></div></div></div></div><div class="tm-user-card__info tm-user-card__info_variant-article tm-user-card__info"><div class="tm-user-card__title tm-user-card__title_variant-article tm-user-card__title"><span class="tm-user-card__name tm-user-card__name_variant-article tm-user-card__name">Spring АйО</span><a class="tm-user-card__nickname tm-user-card__nickname tm-user-card__nickname_variant-article" href="/ru/users/spring_aio/"> @spring_aio</a><!-- --></div><p class="tm-user-card__short-info tm-user-card__short-info_variant-article tm-user-card__short-info" data-test-id="user-card-speciality">Главный по Spring</p></div></div><div class="tm-user-card__buttons tm-user-card__buttons_variant-article tm-user-card__buttons"><!-- --><div class="tm-user-card__button"><div class="tm-button-follow tm-user-card__button-follow"><!-- --><button class="tm-button-follow__button tm-button-follow__button_big" data-test-id="follow-button" type="button">Подписаться</button></div></div><!-- --><div class="tm-user-card__button tm-user-card__button_write" data-test-id="user-card-conversations"><svg class="tm-svg-img tm-user-card__button-icon" height="16" width="16"><title>Отправить сообщение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#mail"></use></svg></div><!-- --></div><!-- --></div><!-- --></div><!--]--></div><!--]--><!-- --></section><!-- --><!--[--><!--]--><!--]--><div class="tm-article-blocks__comments"><div class="tm-article-page-comments" id="publication-comments"><div><!--[--><div class="tm-article-comments-counter-link tm-article-comments-counter-button"><a class="tm-article-comments-counter-link__link tm-article-comments-counter-link__link_button-style" data-test-id="counter-comments" href="/ru/companies/spring_aio/articles/848016/comments/"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon tm-article-comments-counter-link__icon_contrasted" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value tm-article-comments-counter-link__value_contrasted"> Комментарии 1 </span><!--]--></a><!-- --></div><!--]--></div></div></div><!--[--><!--[--><!--]--><section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title tm-block__title_variant-large">Публикации</h2><!--[--><!--]--></div><!-- --></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-condensed-slim"><!--[--><!--[--><div class="tm-tabs tm-tabs"><div class=""><!--[--><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_active tm-tabs__tab-link_slim tm-tabs__tab-link">Лучшие за сутки</button></span><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_slim tm-tabs__tab-link">Похожие</button></span><!--]--></div><!-- --></div><div class="similar-and-daily__tab-view"><div class="placeholder-wrapper"><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><div class="tm-placeholder-article-cards"><!--[--><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><!--]--></div><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --></div><!-- --></div><!--]--><!--]--></div><!--]--><!-- --></section><!--[--><!--]--><!-- --><!--[--><!--]--><!--]--></div><!--]--><!--]--></div></div><!--]--><!--]--></div></div><div class="tm-page__sidebar"><!--[--><div class="tm-layout-sidebar"><div class="tm-layout-sidebar__placeholder_initial"></div><div class="tm-sexy-sidebar_initial tm-sexy-sidebar" style="margin-top:0px;"><!--[--><!--]--><!-- --><div class="tm-layout-sidebar__placeholder_initial"></div><!--[--><section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Информация</h2><!--[--><!--]--></div><!-- --></header><!--[--><div class="tm-block__body tm-block__body"><!--[--><div class="tm-company-basic-info"><dl class="tm-description-list tm-description-list tm-description-list_variant-columns-nowrap"><dt class="tm-description-list__title tm-description-list__title_variant-columns-nowrap tm-description-list__title">Сайт</dt><dd class="tm-description-list__body tm-description-list__body_variant-columns-nowrap tm-description-list__body"><!--[--><a class="tm-company-basic-info__link" href="https://t.me/spring_aio" target="_blank">t.me</a><!--]--></dd></dl><dl class="tm-description-list tm-description-list tm-description-list_variant-columns-nowrap"><dt class="tm-description-list__title tm-description-list__title_variant-columns-nowrap tm-description-list__title">Дата регистрации</dt><dd class="tm-description-list__body tm-description-list__body_variant-columns-nowrap tm-description-list__body"><!--[--><time datetime="2024-05-27T07:08:22.000Z" title="2024-05-27, 10:08">27  мая  2024</time><!--]--></dd></dl><!-- --><dl class="tm-description-list tm-description-list tm-description-list_variant-columns-nowrap"><dt class="tm-description-list__title tm-description-list__title_variant-columns-nowrap tm-description-list__title">Численность</dt><dd class="tm-description-list__body tm-description-list__body_variant-columns-nowrap tm-description-list__body"><!--[-->11–30 человек<!--]--></dd></dl><!-- --><!-- --></div><!--]--></div><!--]--><!-- --></section><div class="tm-company-widgets"><!--[--><!--]--></div><!-- --><!-- --><!--]--><!-- --></div></div><!--]--></div></div><!-- --><!--]--></div></div></main><!-- --></div><div class="tm-footer-menu"><div class="tm-page-width"><!--[--><div class="tm-footer-menu__container"><!--[--><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Ваш аккаунт</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a href="/kek/v1/auth/habrahabr/?back=/ru/companies/spring_aio/articles/848016/&amp;hl=ru" rel="nofollow" target="_self">Войти</a></li><li class="tm-footer-menu__list-item"><a href="/kek/v1/auth/habrahabr-register/?back=/ru/companies/spring_aio/articles/848016/&amp;hl=ru" rel="nofollow" target="_self">Регистрация</a></li><!--]--></ul></div></div><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Разделы</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/articles/">Статьи</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/news/">Новости</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/hubs/">Хабы</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/companies/">Компании</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/users/">Авторы</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/sandbox/">Песочница</a></li><!--]--></ul></div></div><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Информация</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/help/">Устройство сайта</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/authors/codex/">Для авторов</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/companies/corpblogs/">Для компаний</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/docs/transparency/">Документы</a></li><li class="tm-footer-menu__list-item"><a href="https://account.habr.com/info/agreement/?hl=ru_RU" target="_blank">Соглашение</a></li><li class="tm-footer-menu__list-item"><a href="https://account.habr.com/info/confidential/?hl=ru_RU" target="_blank">Конфиденциальность</a></li><!--]--></ul></div></div><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Услуги</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/corporate-blogs/" target="_blank">Корпоративный блог</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/advertising/" target="_blank">Медийная реклама</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/native-special/" target="_blank">Нативные проекты</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/education-programs/" target="_blank">Образовательные программы</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/hello-startup/" target="_blank">Стартапам</a></li><!--]--></ul></div></div><!--]--></div><!--]--></div></div><div class="tm-footer"><div class="tm-page-width"><!--[--><div class="tm-footer__container"><!-- --><div class="tm-footer__social"><!--[--><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.facebook.com/habrahabr.ru" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Facebook</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-facebook"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://twitter.com/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Twitter</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-twitter"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://vk.com/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>VK</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-vk"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://telegram.me/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Telegram</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-telegram"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.youtube.com/channel/UCd_sTwKqVrweTt4oAKY5y4w" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Youtube</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-youtube"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://dzen.ru/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Яндекс Дзен</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-dzen"></use></svg></a><!--]--></div><!--teleport start--><!--teleport end--><button class="tm-footer__link"><!-- --> Настройка языка</button><a class="tm-footer__link" href="/ru/feedback/">Техническая поддержка</a><div class="tm-footer-copyright"><span class="tm-copyright"><span class="tm-copyright__years">© 2006–2025, </span><span class="tm-copyright__name"><a class="tm-copyright__link" href="https://company.habr.com/" rel="noopener" target="_blank">Habr</a></span></span></div></div><!--]--></div></div><!-- --><!--]--></div><!-- --></div></div>
<div id="overlays"><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--></div>
</body>
</html>
