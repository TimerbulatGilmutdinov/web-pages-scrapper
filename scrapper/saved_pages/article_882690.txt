<!DOCTYPE html>

<html lang="ru">
<head>
<title>Valhalla — эпичный рефакторинг Java. Часть 2: проблемы проекта и их решения / Хабр</title>
</head>
<body>
<div id="mount"><div data-async-called="true" id="app"><div class="tm-layout__wrapper"><!--[--><!-- --><div></div><!-- --><header class="tm-header" data-test-id="header"><div class="tm-page-width"><!--[--><div class="tm-header__container"><!-- --><span class="tm-header__logo-wrap"><a class="tm-header__logo tm-header__logo_hl-ru tm-header__logo" href="/ru/"><svg class="tm-svg-img tm-header__icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a><span class="tm-header__beta-sign" style="display:none;">β</span></span><!--[--><div class="tm-dropdown tm-header__projects"><div class="tm-dropdown__head"><!--[--><button class="tm-header__dropdown-toggle"><svg class="tm-svg-img tm-header__icon tm-header__icon_dropdown" height="16" width="16"><title>Открыть список</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#arrow-down"></use></svg></button><!--]--></div><!-- --></div><a class="tm-header__become-author-btn" href="/ru/sandbox/start/">Как стать автором</a><div class="tm-feature tm-feature tm-feature_variant-inline tm-header__feature"><!-- --></div><!-- --><!--]--><!-- --></div><!--]--></div></header><div class="tm-layout"><div class="tm-page-progress-bar"></div><div class="tm-base-layout__header_is-sticky tm-base-layout__header" data-menu-sticky="true"><div class="tm-page-width"><!--[--><div class="tm-base-layout__header-wrapper"><div class="tm-main-menu"><div class="tm-main-menu__section"><nav class="tm-main-menu__section-content"><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/feed/">Моя лента</a><!--]--><!--[--><a class="tm-main-menu__item" href="/ru/articles/">Все потоки</a><!--]--><!--[--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/develop/">Разработка</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/admin/">Администрирование</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/design/">Дизайн</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/management/">Менеджмент</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/marketing/">Маркетинг</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/popsci/">Научпоп</a><!--]--><!--]--></nav></div></div><div class="tm-header-user-menu tm-base-layout__user-menu"><a class="tm-header-user-menu__item tm-header-user-menu__search" data-test-id="search-button" href="/ru/search/"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_search tm-header-user-menu__icon_dark" height="24" width="24"><title>Поиск</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#search"></use></svg></a><!-- --><!-- --><div class="tm-header-user-menu__item tm-header-user-menu__write"><div><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_write tm-header-user-menu__icon_dark" height="24" width="24"><title>Написать публикацию</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#write"></use></svg></div><!-- --></div><!--[--><div class="tm-header-user-menu__item"><button class="tm-header-user-menu__toggle" data-test-id="user-menu-settings"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_dark" height="24" width="24"><title>Настройки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#page-settings"></use></svg></button></div><a class="tm-header-user-menu__item" href="https://habr.com/kek/v1/auth/habrahabr/?back=/ru/companies/spring_aio/articles/882690/&amp;hl=ru" rel="nofollow"><!--[--><button class="btn btn_solid btn_small tm-header-user-menu__login" type="button"><!--[-->Войти<!--]--></button><!--]--></a><!--]--><!-- --><!--teleport start--><!--teleport end--><!-- --></div></div><!--]--></div></div><!-- --><div class="tm-page-width"><!--[--><!--]--></div><main class="tm-layout__container"><div class="tm-page" companyname="spring_aio" data-async-called="true" hl="ru" style="--0c809c5a:16px;--a086013e:100%;--7c457026:0;"><div class="tm-page-width"><!--[--><div class="tm-page__header"><!--[--><!--]--></div><div class="tm-page__wrapper"><div class="tm-page__main_has-sidebar tm-page__main"><div class="pull-down"><!-- --><div class="pull-down__header" style="height:0px;"><div class="pull-down__content" style="bottom:10px;"><svg class="tm-svg-img pull-down__icon pull-down__arrow" height="24" width="24"><title>Обновить</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#pull-arrow"></use></svg></div></div><!--[--><!--[--><div class="tm-article-presenter"><!--[--><!--[--><!-- --><div class="tm-company-profile-card tm-company-article__profile-card"><div class="tm-company-card tm-company-profile-card__info"><div class="tm-company-card__header"><a class="tm-company-card__avatar" href="/ru/companies/spring_aio/profile/"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="48" src="//habrastorage.org/getpro/habr/company/8f1/91a/458/8f191a4584b8fab12d15af23e447a1d5.png" width="48"/></div></a><!--[--><!-- --><div class="tm-counter-container tm-company-card__rating"><div class="tm-counter-container__header"><!--[--><!--[--><!--]--><div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!-- --><div class="tm-votes-lever__score tm-votes-lever__score_appearance-rating tm-votes-lever__score"><!--[--><span><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter_rating tm-votes-lever__score-counter" data-test-id="votes-score-counter">77.73</span></span><!--]--></div><!-- --></div><!--]--></div><div class="tm-counter-container__footer"><!--[--><span class="tm-rating__text tm-rating__text">Рейтинг</span><!--]--></div></div><!-- --><!--]--></div><div class="tm-company-card__info"><a class="tm-company-card__name" href="/ru/companies/spring_aio/profile/"><span>Spring АйО</span></a><!-- --></div></div><div class="tm-company-profile-card__buttons"><div class="tm-button-follow tm-company-profile-card__button tm-company-profile-card__button_follow"><!-- --><button class="tm-button-follow__button tm-button-follow__button_big" data-test-id="follow-button" type="button">Подписаться</button></div><!-- --><!-- --><!-- --></div></div><!-- --><!--]--><!--]--><div class="tm-article-presenter__body" data-test-id="article-body"><div class="tm-misprint-area"><div class="tm-misprint-area__wrapper"><!--[--><article class="tm-article-presenter__content tm-article-presenter__content_narrow"><!--[--><div class="tm-article-presenter__header"><!--[--><!--]--><div class="tm-article-snippet tm-article-snippet tm-article-presenter__snippet"><!--[--><!--]--><div class="tm-article-snippet__meta-container"><div class="tm-article-snippet__meta"><span class="tm-user-info tm-article-snippet__author"><a class="tm-user-info__userpic" data-test-id="user-info-pic" href="/ru/users/spring_aio/" title="spring_aio"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="24" src="//habrastorage.org/r/w48/getpro/habr/avatars/8e0/5e8/a1c/8e05e8a1c5fd4560f661efb2cb00e77e.png" width="24"/></div></a><span class="tm-user-info__user tm-user-info__user_appearance-default" data-test-id="user-info-description"><a class="tm-user-info__username" href="/ru/users/spring_aio/">spring_aio <!-- --></a><!--[--><span class="tm-article-datetime-published"><time datetime="2025-02-14T14:37:30.000Z" title="2025-02-14, 17:37">14  фев   в 17:37</time></span><!--]--></span></span></div><!-- --></div><h1 class="tm-title tm-title_h1" data-test-id="articleTitle" lang="ru"><span>Valhalla — эпичный рефакторинг Java. Часть 2: проблемы проекта и их решения</span></h1><div class="tm-article-snippet__stats" data-test-id="articleStats"><div class="tm-article-complexity tm-article-complexity_complexity-low"><span class="tm-svg-icon__wrapper tm-article-complexity__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Уровень сложности</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#complexity-low"></use></svg></span><span class="tm-article-complexity__label">Простой</span></div><div class="tm-article-reading-time"><span class="tm-svg-icon__wrapper tm-article-reading-time__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Время на прочтение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#clock"></use></svg></span><span class="tm-article-reading-time__label">16 мин</span></div><span class="tm-icon-counter tm-data-icons__item"><svg class="tm-svg-img tm-icon-counter__icon" height="24" width="24"><title>Количество просмотров</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-views"></use></svg><span class="tm-icon-counter__value" title="7359">7.4K</span></span></div><div class="tm-publication-hubs__container" data-test-id="articleHubsList"><div class="tm-publication-hubs"><!--[--><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/companies/spring_aio/articles/"><!--[--><span>Блог компании Spring АйО</span><!-- --><!--]--></a></span><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/hubs/java/"><!--[--><span>Java</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/hubs/kotlin/"><!--[--><span>Kotlin</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/hubs/programming/"><!--[--><span>Программирование</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><!--]--></div></div><div class="tm-article-labels" data-test-id="articleLabels"><div class="tm-article-labels__container"><div class="tm-publication-label tm-publication-label_variant-review"><span>Обзор</span></div><!--[--><div class="tm-publication-label tm-publication-label_variant-translation"><span>Перевод</span></div><!--]--></div></div><!-- --><!-- --></div></div><!--[--><div class="tm-article-presenter__origin"><a class="tm-article-presenter__origin-link" href="https://www.youtube.com/watch?v=Dhn-JgZaBWo" target="_blank">Автор оригинала: <span>Brian Goetz</span></a></div><div class="tm-article-body" data-gallery-root="" lang="ru"><div><!--[--><!--]--></div><div id="post-content-body"><div><div class="article-formatted-body article-formatted-body article-formatted-body_version-2"><div xmlns="http://www.w3.org/1999/xhtml"><p>Команда <a href="https://t.me/+QmrKn0wA8CdkNjAy">Spring АйО</a> перевела и адаптировала доклад Брайана Гоетца “Valhalla — эпичный рефакторинг Java”, и сегодня мы публикуем вторую часть из трех. </p><p>В <a href="https://habr.com/ru/companies/spring_aio/articles/878950/">первой части серии</a> было рассказано об истории и причинах появления проекта Valhalla. Во второй части подробно разбирается вопрос о том, с какими фундаментальными сложности команда столкнулась на пути к решению поставленных задач. </p><hr/><h3>Препятствия на пути к более плоским и плотным объектам</h3><p>Достижение таких характеристик, как простота представления объекта в памяти (flatness) и плотность (density) требует преодоления ряда препятствий. Одно из главных — <strong>identity</strong> объекта. В реальности это означает, что объект должен существовать в одном конкретном месте или, как минимум, иметь фиксированное местоположение в каждый момент времени. Сборщик мусора может перемещать объект, но всегда должна существовать его официальная копия. Это особенно важно для изменяемых объектов (mutable), так как гарантированное место хранения необходимо для корректного обновления их значений. </p><p>Еще одна проблема — <strong>null-значения</strong>. Ссылки на объекты могут быть <code>null</code>, и это требует дополнительных данных для их представления, помимо самих данных объекта. Например, в общем случае, для представления всех значений <code>Long</code> нам нужно 64 бита (2<sup>64</sup> уникальных значений). Но если мы вспомним, что <code>Long</code> как референс тип может быть <code>null</code>, то нам нужен еще один, какой-либо уникальный bit pattern для представления значения <code>null</code>. Поэтому 64 бит нам просто не хватит, нам нужен дополнительный бит. С учетом hardware ограничений и выравнивания, на деле, нам, потенциально, придется добавить не один бит и сделать 65 бит для <code>Long</code>, а куда больше. Таким образом, поддержка <code>null</code> становится препятствием как для увеличения плотности данных, так и для их упрощенного хранения (flattening).</p><p>Более того, даже если применить сложные схемы кодирования <code>null</code>, которые, например, используют младшие биты машинных указателей/поинтеров, то возникает неприятная зависимость данных - Мы просто не можем использовать более старшие биты абстрактного числа до тех пор, пока мы не убедимся, что они на самом деле представляют значение, а не <code>null</code>. Для этого мы должны посмотреть на младшие биты числа. Т.е. нам придется при обращении делать проверку, является ли число <code>null</code>, или нет. Все это создает дополнительные сложности и неудобства.</p><p>Если nullability создает сложности, то проблемы с инициализацией могут оказаться еще серьезнее. Прежде чем объект станет пригодным для использования, он должен пройти через конструктор. В то же время примитивные типы можно использовать без инициализации: например, <code>int</code> по умолчанию имеет значение <code>0</code>, и его не нужно специально конструировать перед применением.</p><p>Не все классы, которые могли бы стать value-классами, имеют какое-либо адекватное значение по умолчанию. Например, у предположительного класса <code>Complex</code>, который бы представлял комплексные числа в Java, кажется, есть естественное значение по умолчанию — <code>0</code>. С другой стороны, есть класс <code>LocalDate</code>, и у него адекватного значения по умолчанию нет, что требует дополнительной инициализации.</p><p>Особенность работы конструкторов может привести к утечке состояния: поля в значении по умолчанию могут стать видимыми еще до того, как их проинициализирует конструктор.</p><details class="spoiler"><summary>Комментарий редакции Spring АйО</summary><div class="spoiler__content"><p>Простейший пример:</p><pre><code class="java">public class ClassA {

    private int myInt;
    
    {
        System.out.println(myInt);
    }

    public ClassA() {
        this.myInt = 132;
    }
    
    static class Nested {

        public static void main(String[] args) {
            new ClassA();
        }
    }
}</code></pre><p>В данном случае, в блоке инициализации мы получили доступ к полю <code>myInt</code> до его инициализации, и простой запуск <code>Nested.main()</code> приведет к тому, что напечатается <code>0</code>.</p></div></details><p>Если это просто неудобное значение — неприятно, но не критично. Однако если объект оказывается в невалидном состоянии, это уже нарушение целостности, которого следует избегать.</p><p>Дополнительную проблему создает взаимодействие с моделью памяти Java. Мы привыкли к тому, что если объект сконструирован, другие потоки увидят его в целостном состоянии. Это кажется логичным.</p><details class="spoiler"><summary>Комментарий редакции Spring АйО</summary><div class="spoiler__content"><p>Простой пример - GC Shenandoah использует forwarding pointer для того, чтобы атомарно (через CAS) менять ссылку на объект при его перемещении. Эта ссылка она завязана на наличие заголовка в объекте, которого у нас в случае value object у нас нет и соот-но атомарное обновление референса невозможно.</p></div></details><p>В результате может появиться объект, нарушающий JLS invariant — а это уже серьезная проблема. Таким образом, упрощение структуры объектов порождает дополнительные архитектурные сложности.</p><p>Давайте пройдемся по всему этому более подробно. Команда Valhalla с самого начала понимала, что identity объекта — главная преграда на пути к созданию более плоских объектов. В чем суть проблемы? Каждый объект в Java получает уникальную identity, которая назначается при вызове <code>new Foo()</code>. Именно она используется оператором равенства для определения, ссылаются ли две переменные на один и тот же объект.</p><p>Identity дает множество возможностей: изменяемость объектов, полиморфные структуры данных, блокировки и многое другое. Для одних классов это полезно, но для других — совершенно избыточно. Более того, даже классы, которым identity не нужна, вынуждены за нее «платить», что приводит не только к издержкам, но и к багам.</p><p>Например, вы могли замечать, что два объекта типа <code>Integer</code> могут быть равны друг другу, если представляют малые числа (благодаря кешированию), но не равны, если это большие числа. </p><details class="spoiler"><summary>Комментарий редакции Spring АйО</summary><div class="spoiler__content"><p>Пример, о котором говорит Брайен: </p><pre><code class="java">Integer.valueOf(100) == Integer.valueOf(100) // true
Integer.valueOf(300) == Integer.valueOf(300) // false</code></pre><p>В силу нативного кеширования в JDK.</p></div></details><p>Такое поведение может поставить человека в серьезный тупик, особенно когда он сталкивается с ним впервые.</p><h2>Value-классы</h2><p>Identity объекта мешает созданию более плоских объектов, потому что она требует фиксированного расположения объекта в памяти. Это вынуждает JVM использовать модель «коробочка и указатель», что ограничивает оптимизацию. Без возможности доказать отсутствие алиасов для объекта, JVM не может предложить более плоскую структуру в куче и лишь в ограниченной степени выполняет скаляризацию для объектов с identity.</p><p>Если identity — это проблема, почему бы не дать разработчикам возможность отказаться от нее, если она не нужна? Именно так и появились value-классы. Объявляя класс как value класс, вы заявляете: «Моему классу identity не нужна». Это решение имеет свои ограничения: без identity вы теряете возможности, такие как мутации. Однако многие классы и так являются immutable, поэтому для них отказ от identity становится естественным выбором.</p><p>Value-классы, в отличие от обычных, не могут быть расширены. Однако для таких типов, как <code>Complex</code>, <code>Option</code> или <code>LocalDate</code>, это не проблема. Их ключевая особенность в том, что принадлежность к value-классам — это не про производительность, а про семантику. Она утверждает: «Экземпляры этого класса не имеют identity». Такое заявление, по сути, говорит JVM: «Эта свобода мне не нужна», что позволяет более эффективно оптимизировать работу с объектами.</p><p>Многие классы, которые мы пишем, особенно небольшие, уже соответствуют требованиям value-классов. Числовые типы, даты, пары (tuples), курсоры — все они по своей природе ближе к value-классам. Не исключено, что в будущем JDK мигрирует многие из них в эту категорию.</p><p>Что значит быть value-классом? Такие классы сохраняют большинство привычных возможностей: поля, методы, конструкторы, реализацию интерфейсов и так далее. Но есть важные отличия: класс объявляется <code>final</code>, его поля — тоже <code>final</code>. А главное, при сравнении двух объектов-значений с помощью <code>==</code> сравниваются их состояния, то есть значения полей, а не identity, которой у них нет.</p><p>С отсутствием identity также связаны некоторые ограничения: нельзя синхронизироваться на value объекте, также нельзя иметь слабые ссылки (WeakReference) на value объект, а также есть ограничения на суперклассы. Но общий подход стал проще по сравнению с ранними идеями проекта Valhalla.</p><p>Экземпляры value-классов все еще остаются объектами, на которые можно ссылаться, как и на любые другие. Однако благодаря отсутствию identity JVM получает свободу оптимизировать их представление в памяти. Например, объекты можно копировать без ограничения: если два экземпляра имеют одинаковые поля, то для программы не важно, один это объект или два, или даже набор отдельных полей. JVM самостоятельно решит, как лучше хранить и передавать такие объекты, минимизируя издержки.</p><h2>Скаляризация вызовов</h2><p>Использование value-объектов на стеке позволяет минимизировать количество аллокаций объектов в целом. Поля, составляющие объект, могут быть переданы виртуальной машиной в вызываемый метод через регистры CPU или т.п, зависимо от calling convention. Тем самым можно вообще избежать создание объекта. Такой подход сочетает безопасность immutability с производительностью mutability.</p><p>Далее рассмотрим пример <code>ImmutableAccumulator</code>:</p><pre><code class="java">value record ImmutableAccumulator(int total) {
    InmutableAccumulator() { 
      this(0); 
    }

    ImmutableAccumulator plus(int n) {
      return new ImmutableAccumulator(total + n);
    }
}</code></pre><pre><code class="java">ImmutableAccumulator acc = new ImmutableAccumulator();
for (String s : strings)
  acc = acc.plus(s.length());</code></pre><p>Итак, у нас есть <code>record</code>, который содержит общую сумму, этот класс, возможно, выглядит несколько странно, но для нас важно то, что он является immutable. </p><p>Он начинает цикл от нуля и содержит метод для добавления чего-либо, но по факту метод <code>plus()</code> присваивает новый <code>ImmutableAccumulator</code> с новым значением.   </p><p>Если использовать этот подход на практике, мы создаем аккумулятор, проходим в цикле по массиву и вызываем метод <code>plus()</code>, чтобы добавить длину каждой строки.</p><p>На деле, никаких аллокаций памяти тут не происходит. Вся логика выше сводится к простой ADD ассемблер инструкции для конкретного регистра, который хранит <code>total</code>. Никаких присваиваний не требуется: общая сумма поднимается в регистр, <a href="http://acc.plus"><code>acc.plus</code></a><code>()</code> просто прибавляет значение к этому регистру. В итоге получается тот же оптимизированный машинный код, который вы бы написали вручную на ассемблере, но с сохранением всех преимуществ объектно-ориентированного программирования.</p><p>То же самое происходит с соглашением о вызовах (она же calling convention), так что если у нас есть <code>record</code> для точки на плоскости, которая имеет поля типа <code>Double</code> для координат <code>X</code> и <code>Y</code>, и мы хотим сгенерировать точку на окружности для заданного угла, то наш метод вызывает косинус и синус и делает из этого точку.</p><pre><code class="java">value record Point(double x, double y) { }

Point unitVector(double angle) {
  return new Point(Math.cos(angle), Math.sin(angle));
}
</code></pre><pre><code class="java">Point p = unitVector(Math.PI); // no allocation, sin and cos returned in registers</code></pre><p>Когда вызывается этот метод, можно подумать, что точка формируется как объект, но по факту этого не происходит. Происходит следующее: этот код просто вернет <code>x</code> и <code>y</code> в регистрах, и они могут использоваться локально вызывающим кодом. Таким образом, calling convention хорошо оптимизирован. Большую часть времени аллокации не происходят совсем. </p><h2>JEP 401</h2><p>Команда Valhalla делают свою работу поэтапно, разбивая JEP 401 на небольшие фрагменты. Первый JEP отвечает за одну новую возможность языка, value-классы, это единственное изменение синтаксиса и единственное изменение концепции, но в то же время существует план мигрировать большое количество JDK классов, таких как <code>Integer</code> и <code>Optional</code> и <code>LocalDate</code>, в value-классы. </p><p>Это похоже на закладку фундамента: вводится понятие о том, что не все объекты требуют identity. Это создает базу для оптимизаций, где команда Valhalla может применять скаляризацию для локальных объектов, оптимизированные соглашения о вызове и более плоскую кучу для небольших объектов — при этом не усложняя жизнь разработчикам без необходимости. Главное — выработать новую привычку: задавать себе вопрос, нужно ли объекту иметь identity. Если нет, лучше ее не добавлять, так как она только усложнит работу и снизит производительность. Такой подход способствует более эффективным и быстрым приложениям.</p><p>Спецификация для такого решения является стабильной уже в течение последнего года, и команда занимается ее реализацией, причем уже сейчас можно скачать сборки раннего доступа. </p><h2>Nullability</h2><p>Но все это — лишь часть истории. Важно также рассмотреть nullability, что неожиданно связано с упрощением структуры объектов (flattening) и их плотностью (density). Если у нас есть nullable-ссылка на <code>Complex</code>, свободный от identity, нужно учесть все возможные комбинации значений Complex плюс еще одно для <code>null</code>. Это создает определенные риски как с точки зрения плотности данных, так и простоты их представления.</p><p>Эта проблема напрямую связана с моделью памяти: по мере увеличения размера объекта дополнительный бит для <code>null</code> может превысить порог размера атомарных операций на вашем аппаратном обеспечении. В результате это может повлиять на производительность и эффективность работы с памятью.</p><details class="spoiler"><summary>Комментарий редакции Spring АйО</summary><div class="spoiler__content"><p>Речь о том, что большинство современных ISA и архитектур CPU умеют производить атомарные операции в рамках computer word относительно быстро. </p><p>Для 64-битных машин computer word это 8 байт или 64 бита. Расширение <code>Long</code> с 8 байт, которое возможно в силу отсутствия места под <code>null</code>, приведет к тому, что CAS (атомарное изменение) будет работать на уровне hardware медленнее, о чем и говорит Брайен.</p></div></details><p>Кроме того, есть причина, почему примитивы являются <code>non-nullable</code>. И дело не только в том, что мы не хотим тратить на это пространство. Nullability не является такой уж полезной в контексте числового кода. В большинстве случаев в цифровом коде <code>null</code> будет только мешать. Поэтому опять, как и в случае с identity, если эта степень свободы не помогает вам, у вас должна быть возможность отказаться от нее. Это позволит сделать ваш код не только более понятным, но и более подходящим для оптимизации. </p><p>Как же решить эту проблему? Очевидный ответ — позволить переменным и типам отказаться от nullability. Подобный подход уже реализован в других языках: Scala, Kotlin, C#, Swift — все они используют различные формы контроля над nullability с помощью знакомых операторов <code>?</code> и <code>!</code>.</p><p>Эти идеи не были изобретены с нуля. На самом деле, механизмы контроля nullability, которые вы видите в Scala или Kotlin, — это упрощенные версии системы типов, основанной на кардинальности. Эта система была разработана в рамках эксперимента Microsoft под названием <strong>C Omega</strong>. Именно оттуда были заимствованы основные концепции, которые легли в основу современных решений для управления nullability</p><p>Так или иначе, один из самых частых запросов от разработчиков — возможность ограничить использование <code>null</code> в Java. Однако это как раз тот случай, когда стоит быть осторожным с желаниями: подобная функциональность приносит с собой множество новых сложностей. Тем не менее, стремление к такому контролю хорошо сочетается с духом и целями проекта Valhalla.</p><p>На ранних этапах разработки команда проекта несколько раз пыталась сделать value типы non-nullable по умолчанию. Однако эта идея столкнулась с серьезными проблемами совместимости, из-за чего от нее пришлось отказаться. Это наглядно показывает, как сложно внедрить подобные изменения в язык с богатой историей и огромным количеством существующего кода.</p><p>Поэтому, когда вы объявляете value-класс, его экземпляры будут <strong>nullable</strong> по умолчанию, если вы явно не запретите nullability — так же, как и для классов с identity. Контроль над nullability создает новые вызовы. Например, если у вас есть поле типа <code>String!</code> (где <code>!</code> означает <code>NotNull</code>), возникает вопрос: какое значение будет у этого поля по умолчанию?</p><p>Во время инициализации объекта JVM автоматически присваивает полям значение <code>null</code>. Однако null выходит за пределы допустимых значений для <code>String!</code>. Было бы неудобно, если бы разработчики сталкивались с null там, где он не предусмотрен, но, к сожалению, это возможно, особенно на этапе работы конструктора.</p><p>Почему так происходит? Когда создается объект, сначала вызывается конструктор суперкласса, и на этом этапе поля еще не инициализированы. Если в конструкторе суперкласса вызывается метод, который может быть переопределен в подклассе (override), этот метод увидит <code>null</code> вместо ожидаемого значения. Такая ситуация недопустима, так как нарушает предположения о типовой безопасности и может привести к ошибкам, которые сложно отследить.</p><p>Поэтому команда Valhalla сформулировала определенные требования по присвоению значения, которые говорят, что необходимо присваивать эти значения перед вызовом конструктора суперкласса. </p><p>В Java это никогда не удавалось реализовать, но решение предлагает <a href="https://t.me/spring_aio/87"><strong>JEP 482</strong> — “Гибкие конструкторы” (Flexible Constructor Bodies)</a>. Этот механизм позволяет вставлять больше кода перед вызовом конструктора суперкласса, что открывает новые возможности для инициализации объектов.</p><p>Одна из ключевых функций — возможность инициализировать поля <strong>до</strong> вызова конструктора суперкласса. Фактически, если поле имеет ограничение по <code>null</code> (например, <code>String!</code>), вы обязаны его инициализировать заранее. Вы не сможете вызвать конструктор суперкласса, пока не будут заданы значения для всех NotNull-полей.</p><p>Этот подход решает проблему, при которой неинициализированные (и потенциально невалидные) поля становятся доступными в процессе выполнения конструктора. В итоге удается обеспечить большую типовую безопасность и избежать скрытых ошибок, связанных с неожиданным <code>null</code> в критичных участках кода.</p><p>Существует похожая проблема и с массивами. </p><pre><code class="java">String![] names = new String![](n, i -&gt; "Name #" + i);</code></pre><p>Ситуация становится еще сложнее, когда вы создаете новый массив, потому что у массивов нет конструкторов. При создании массива JVM автоматически заполняет его элементы значениями <code>null</code>. Это создает проблему для типов с ограничением NotNull — например, <code>String!</code>, где наличие <code>null</code> недопустимо.</p><p>Для решения этой проблемы нужен новый подход. Вместо простого объявления <code>new String![10]</code> потребуется явно указать, как инициализировать каждый элемент. Например, это может быть:</p><ul><li><p>Лямбда-выражение, которое вызывается для создания начальных значений каждого элемента.</p></li><li><p>Конкретное значение, которым будет заполнен весь массив.</p></li></ul><p>Вы не сможете просто создать массив <code>String![10]</code> и оставить его без инициализации, так как это позволит невалидным значениям (в данном случае <code>null</code>) остаться незамеченными. Такой строгий контроль гарантирует, что массивы с типами NotNull всегда содержат корректные данные, что повышает безопасность и надежность кода.</p><p>Поэтому предстоят изменения как в инициализации полей, так и в работе с массивами. Эти изменения могут внедряться инкрементально, а ограничения по <code>null</code> вполне возможно будут реализованы отдельно от проекта Valhalla. Хотя окончательного решения команда пока не приняла, такой подход позволит параллельно развивать обе инициативы.</p><p>Впереди много работы: нужно интегрировать новшества в систему типов, обеспечить их совместимость с механизмами логического вывода, преобразованиями, перегрузкой методов, перезаписью кода и паттерн-матчингом. Это сложный процесс, требующий тщательной проработки всех аспектов.</p><p>Одним из ключевых решений может стать динамическая проверка соблюдения ограничений <code>non-nullable</code> объектов. Иными словами, если кто-то попытается присвоить <code>null</code> там, где это запрещено, JVM сможет сгенерировать <code>NullPointerException</code> на раннем этапе. Такой подход предпочтительнее, чем обнаружение ошибки в более поздний момент времени, так как он делает ошибки более предсказуемыми и упрощает их диагностику. Это важный шаг к повышению безопасности и надежности кода в Java.</p><p>Команда проекта воспользовалась возможностями JVM для обнаружения случаев записи <code>null</code> в массивы и поля с ограничением на <code>null</code>. Далее работа сосредоточилась на внедрении более строгих правил обязательной инициализации, чтобы гарантировать, что такие поля и элементы массива всегда начинают "жизнь" с валидного значения.</p><p>Контроль над nullability в Java будет отличаться от того, что вы, возможно, видели в Scala, Kotlin, Go, C# или Swift. Java — это язык с особым архитектурным подходом и богатой историей, что накладывает дополнительные требования. В частности, команда Valhalla обязана учитывать вопросы <strong>совместимости</strong>, включая миграционную совместимость с уже существующим кодом.</p><p>Ключевая архитектурная директива для добавления контроля nullability в Java заключается в следующем: эти изменения должны обеспечивать совместимость на уровне бинарных файлов и исходного кода. Это значит, что существующие приложения должны продолжать работать без изменений, даже если новые функции контроля nullability будут добавлены. Такой подход делает переход на новые возможности более плавным и безопасным для огромной экосистемы Java.</p><p>После объединения ограниченных по null-типов с value-типами проблемы с инициализацией становятся еще более серьезными. Допустим, у вас есть переменная типа String!, и вы неожиданно находите в ней <code>null</code>. Это неприятно, но, как правило, не нарушает целостности всей системы. Однако если речь идет об объекте, чье содержимое невалидно, и этот объект передается в код, который ожидает валидное значение, это уже создает риски для целостности данных и логики приложения. Такую ситуацию необходимо исключить.</p><p>Именно поэтому при комбинации value-типов и типов с ограничением по <code>null</code> требуется более строгое соблюдение ограничений. Чтобы добиться этого, команда проекта задействовала возможности JVM, усилив контроль на уровне виртуальной машины. Это гарантирует, что поля с ограничением NotNull не могут быть доступны или использоваться до того, как будут корректно инициализированы.</p><p>Такой подход позволяет не только выявлять ошибки на ранних этапах, но и повышает надежность приложений в целом, снижая риск скрытых багов, связанных с неинициализированными или некорректными данными.</p><p>Ранее уже упоминалась проблема с <code>LocalDate</code>. Некоторые value типы, такие как <code>Complex</code>, имеют логичные значения по умолчанию, например, ноль. Однако что делать с <code>LocalDate</code>? Какое значение по умолчанию он должен иметь, если вы не укажете другое? 1 января 1970 года? Это ужасный выбор. 2 января 1970 года? Ничуть не лучше. И это касается любой произвольной даты.</p><p>Многие сталкивались с подобными ошибками: сайты сообщают, что подписка истекла 1 января 1970 года, или приходят счета с начисленными пенями за 50 лет. Такое "значение по умолчанию" — это по сути скрытый баг, который просто ждет подходящего момента, чтобы проявиться.</p><p>Из этого следует важный вывод: некоторые value-классы действительно могут иметь безопасные значения по умолчанию, а некоторые — нет. И это должно стать частью программной модели. Иными словами, язык и среда выполнения должны учитывать, что для определенных типов отсутствие значения по умолчанию — это не баг, а осознанное архитектурное решение, направленное на предотвращение неожиданных и трудноуловимых багов будущем.</p><p>Все это имеет первостепенное значение, поскольку команда стремится сделать классы более плоскими (flatten). Это означает, что больше нельзя полагаться на указатели для контроля доступа к данным, как это происходит с объектами-ссылками. В плоской структуре данные хранятся непосредственно, и это исключает возможность использования <code>null</code> в качестве "страховочного значения" до того, как объект будет полностью инициализирован.</p><p>В такой архитектуре необходимо гарантировать, что объект всегда находится в валидном состоянии еще до того, как он станет доступным для наблюдения (observable). Иными словами, объект не должен быть виден другим частям программы, пока его данные не будут корректно инициализированы.</p><p>Для достижения этой цели команда Valhalla использует два подхода:</p><ol><li><p>Усиление инициализации на уровне исходного кода — ввод строгих правил, которые обязывают разработчиков явно инициализировать все необходимые поля до использования объекта. Это снижает вероятность ошибок на этапе разработки.</p></li><li><p>Усиление инициализации на уровне JVM — внедрение механизмов на уровне виртуальной машины, которые будут следить за корректностью инициализации во время выполнения программы. Это создает дополнительный уровень защиты, предотвращая использование объектов с невалидным состоянием.</p></li></ol><p>Такой двойной контроль позволяет повысить надежность кода и избежать трудноуловимых багов, связанных с неинициализированными данными, особенно в контексте работы с value-типами.</p><p>Эта цель была частично достигнута благодаря гибким конструкторам (flexible constructors), но проект Valhalla выводит решение на новый уровень, добавляя верификацию на уровне JVM. Это позволяет гарантировать, что все поля, которые должны быть строго инициализированы, действительно инициализируются <strong>до</strong> вызова конструктора суперкласса.</p><p>Ключевое преимущество такого подхода в том, что верификация выполняется на этапе загрузки и проверки байт-кода, а не во время исполнения программы. К счастью, это никак не влияет на производительность в рантайме, так как все необходимые проверки происходят еще до начала выполнения кода.</p><p>В результате достигается баланс между строгой типовой безопасностью и высокой производительностью, что особенно важно для value types и систем, ориентированных на максимальную эффективность.</p><h2>Strictly initialized fields</h2><p>Существует скрытая концепция, которую вы не увидите в описании языка, — "строго инициализируемые поля" (strictly initialized fields). Это означает, что поле должно быть инициализировано до вызова конструктора суперкласса.</p><p>Все поля, принадлежащие value-типам, должны быть строго инициализированы. То же касается и полей с ограничением по null — они также требуют строгой инициализации. Более того, в будущем могут появиться и другие типы полей, для которых это правило станет обязательным.</p><p>Для строгой инициализации не существует специального ключевого слова. Вместо этого с этой концепцией придется столкнуться в процессе работы: компилятор сам подскажет, что конкретное поле должно быть инициализировано до определенного момента. Если вы этого не сделаете, компилятор выдаст ошибку, требуя исправить проблему. Все это необходимо, чтобы гарантировать, что поля не становятся наблюдаемыми в неинициализированном состоянии.</p><p>Это отличный пример того, что можно назвать "скрытым активатором". Изначально никто из команды Valhalla не ставил задачу внедрить строго инициализируемые поля. Никто не приходил с просьбой: "Нам нужны именно такие поля!" Однако, как оказалось, добавление этой функциональности решило ряд серьезных проблем, над которыми разработчики проекта работали последние 10 лет. И это неудивительно — часто фундаментальные улучшения рождаются из необходимости решить глубинные задачи, которые на поверхности кажутся совсем другими.</p><p>Эта старая неряшливость в языке, позволяющая обращаться к объектам до их полной инициализации, давно вызывает проблемы, но осознание этого пришло не сразу — потребовались время и тщательная работа.</p><hr/><p>На этом заканчивается вторая часть серии статей о проекте Valhalla по докладу Брайана Гоетца. В последней части мы расскажем о первых успехах в реализации проекта, о которых можно говорить уже сегодня и о том, как скоро можно будет увидеть первые итоги этой долгой работы воочию. </p><figure class="full-width"><img data-src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/f82/06b/9bd/f8206b9bd27786a8b1c004f0b9c3b147.png" height="334" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/f82/06b/9bd/f8206b9bd27786a8b1c004f0b9c3b147.png" width="1560"/></figure><p>Присоединяйтесь к русскоязычному сообществу разработчиков на Spring Boot в телеграм - <a href="https://t.me/+oBwACbkvJ19iODAy">Spring АйО</a>, чтобы быть в курсе последних новостей из мира разработки на Spring Boot и всего, что с ним связано</p></div></div></div><!-- --><!-- --></div><!-- --><!-- --></div><!--]--><!-- --><div class="tm-article-presenter__meta" data-test-id="article-meta-links"><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Теги:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[java]"><span>java</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[spring]"><span>spring</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[kotlin]"><span>kotlin</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[valhalla]"><span>valhalla</span></a><!--]--></li><!--]--><!-- --></ul></div><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Хабы:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/companies/spring_aio/articles/"><!--[--><span>Блог компании Spring АйО</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/hubs/java/"><!--[--><span>Java</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/hubs/kotlin/"><!--[--><span>Kotlin</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/hubs/programming/"><!--[--><span>Программирование</span><!--]--></a><!--]--></li><!--]--><!-- --></ul></div></div><!-- --><!--]--></article><!--]--></div><!-- --></div><div class="tm-article-sticky-panel" data-test-id="article-sticky-panel" style=""><div class="tm-data-icons tm-data-icons tm-data-icons_space-big tm-article-sticky-panel__icons" data-test-id="article-stats-icons"><div class="tm-article-rating tm-data-icons__item"><div class="tm-votes-meter tm-article-rating__votes-switcher"><svg class="tm-svg-img tm-votes-meter__icon tm-votes-meter__icon tm-votes-meter__icon_appearance-article" height="24" width="24"><title>Всего голосов 27: ↑27 и ↓0</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-rating"></use></svg><span class="tm-votes-meter__value tm-votes-meter__value_positive tm-votes-meter__value_appearance-article tm-votes-meter__value_rating tm-votes-meter__value" data-test-id="votes-meter-value" title="Всего голосов 27: ↑27 и ↓0">+31</span></div><!--teleport start--><!--teleport end--><!-- --></div><!-- --><!-- --><button class="bookmarks-button tm-data-icons__item" title="Добавить в закладки" type="button"><span class="tm-svg-icon__wrapper bookmarks-button__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Добавить в закладки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-favorite"></use></svg></span><span class="bookmarks-button__counter" title="Количество пользователей, добавивших публикацию в закладки">38</span></button><div class="tm-sharing tm-data-icons__item" title="Поделиться"><button class="tm-sharing__button" type="button"><svg class="tm-sharing__icon" viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M13.8 13.8V18l7.2-6.6L13.8 5v3.9C5 8.9 3 18.6 3 18.6c2.5-4.4 6-4.8 10.8-4.8z" fill="currentColor"></path></svg></button><!--teleport start--><!--teleport end--></div><div class="tm-article-comments-counter-link tm-data-icons__item" title="Читать комментарии"><a class="tm-article-comments-counter-link__link" data-test-id="counter-comments" href="/ru/companies/spring_aio/articles/882690/comments/"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value">11</span><!--]--></a><!-- --></div><!--[--><!--[--><!--[--><!-- --><!--]--><!--]--><!--]--><!--teleport start--><!--teleport end--><!-- --></div></div></div><!--[--><!--]--><div class="tm-article-presenter__footer"><!--[--><!--[--><div class="tm-article-blocks"><!-- --><!--[--><section class="tm-block tm-block tm-block_spacing-bottom"><!-- --><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-balanced"><!--[--><div class="tm-article-author" data-test-id="article-author-info"><!--[--><!--[--><div class="tm-article-author__company"><div class="tm-article-author__company-card"><div class="tm-company-snippet"><a class="tm-company-snippet__logo-link" href="/ru/companies/spring_aio/profile/"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="40" src="//habrastorage.org/getpro/habr/company/8f1/91a/458/8f191a4584b8fab12d15af23e447a1d5.png" width="40"/></div></a><div class="tm-company-snippet__info"><a class="tm-company-snippet__title" data-test-id="company-title" href="/ru/companies/spring_aio/profile/"><span>Spring АйО</span></a><div class="tm-company-snippet__description">Компания</div></div></div><div class="tm-article-author__buttons"><!-- --><!-- --></div></div><div class="tm-article-author__company-contacts"><!--[--><a class="tm-article-author__contact" href="https://telegram.me/spring_aio" rel="noopener" target="_blank">Telegram</a><a class="tm-article-author__contact" href="https://www.springnow.ru" rel="noopener" target="_blank">Сайт</a><!--]--></div><div class="tm-article-author__separator"></div></div><!--]--><!--]--><div class="tm-user-card tm-user-card tm-user-card_variant-article tm-article-author__user-card" data-async-called="true"><div class="tm-user-card__info-container"><div class="tm-user-card__header"><div class="tm-user-card__header-data"><a class="tm-user-card__userpic tm-user-card__userpic_size-40" href="/ru/users/spring_aio/"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" src="//habrastorage.org/getpro/habr/avatars/8e0/5e8/a1c/8e05e8a1c5fd4560f661efb2cb00e77e.png"/></div></a><div class="tm-user-card__meta"><div class="tm-counter-container tm-karma tm-karma" title=" 85 голосов "><div class="tm-counter-container__header"><!--[--><div class="karma-display positive" data-v-7635202e="">45</div><!-- --><!--]--></div><div class="tm-counter-container__footer"><!--[--><div class="tm-karma__text">Карма</div><!--teleport start--><!--teleport end--><!--]--></div></div><div class="tm-counter-container" title="Рейтинг пользователя"><div class="tm-counter-container__header"><!--[--><!--[--><!--]--><div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!-- --><div class="tm-votes-lever__score tm-votes-lever__score_appearance-rating tm-votes-lever__score_no-margin tm-votes-lever__score"><!--[--><span><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter_rating tm-votes-lever__score-counter" data-test-id="votes-score-counter">105.9</span></span><!--]--></div><!-- --></div><!--]--></div><div class="tm-counter-container__footer"><!--[--><span class="tm-rating__text tm-rating__text">Рейтинг</span><!--]--></div></div></div></div></div><div class="tm-user-card__info tm-user-card__info_variant-article tm-user-card__info"><div class="tm-user-card__title tm-user-card__title_variant-article tm-user-card__title"><span class="tm-user-card__name tm-user-card__name_variant-article tm-user-card__name">Spring АйО</span><a class="tm-user-card__nickname tm-user-card__nickname tm-user-card__nickname_variant-article" href="/ru/users/spring_aio/"> @spring_aio</a><!-- --></div><p class="tm-user-card__short-info tm-user-card__short-info_variant-article tm-user-card__short-info" data-test-id="user-card-speciality">Главный по Spring</p></div></div><div class="tm-user-card__buttons tm-user-card__buttons_variant-article tm-user-card__buttons"><!-- --><div class="tm-user-card__button"><div class="tm-button-follow tm-user-card__button-follow"><!-- --><button class="tm-button-follow__button tm-button-follow__button_big" data-test-id="follow-button" type="button">Подписаться</button></div></div><!-- --><div class="tm-user-card__button tm-user-card__button_write" data-test-id="user-card-conversations"><svg class="tm-svg-img tm-user-card__button-icon" height="16" width="16"><title>Отправить сообщение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#mail"></use></svg></div><!-- --></div><!-- --></div><!-- --></div><!--]--></div><!--]--><!-- --></section><!-- --><!--[--><!--]--><!--]--><div class="tm-article-blocks__comments"><div class="tm-article-page-comments" id="publication-comments"><div><!--[--><div class="tm-article-comments-counter-link tm-article-comments-counter-button"><a class="tm-article-comments-counter-link__link tm-article-comments-counter-link__link_button-style" data-test-id="counter-comments" href="/ru/companies/spring_aio/articles/882690/comments/"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon tm-article-comments-counter-link__icon_contrasted" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value tm-article-comments-counter-link__value_contrasted"> Комментарии 11 </span><!--]--></a><!-- --></div><!--]--></div></div></div><!--[--><!--[--><!--]--><section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title tm-block__title_variant-large">Публикации</h2><!--[--><!--]--></div><!-- --></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-condensed-slim"><!--[--><!--[--><div class="tm-tabs tm-tabs"><div class=""><!--[--><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_active tm-tabs__tab-link_slim tm-tabs__tab-link">Лучшие за сутки</button></span><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_slim tm-tabs__tab-link">Похожие</button></span><!--]--></div><!-- --></div><div class="similar-and-daily__tab-view"><div class="placeholder-wrapper"><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><div class="tm-placeholder-article-cards"><!--[--><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><!--]--></div><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --></div><!-- --></div><!--]--><!--]--></div><!--]--><!-- --></section><!--[--><!--]--><!-- --><!--[--><!--]--><!--]--></div><!--]--><!--]--></div></div><!--]--><!--]--></div></div><div class="tm-page__sidebar"><!--[--><div class="tm-layout-sidebar"><div class="tm-layout-sidebar__placeholder_initial"></div><div class="tm-sexy-sidebar_initial tm-sexy-sidebar" style="margin-top:0px;"><!--[--><!--]--><!-- --><div class="tm-layout-sidebar__placeholder_initial"></div><!--[--><section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Информация</h2><!--[--><!--]--></div><!-- --></header><!--[--><div class="tm-block__body tm-block__body"><!--[--><div class="tm-company-basic-info"><dl class="tm-description-list tm-description-list tm-description-list_variant-columns-nowrap"><dt class="tm-description-list__title tm-description-list__title_variant-columns-nowrap tm-description-list__title">Сайт</dt><dd class="tm-description-list__body tm-description-list__body_variant-columns-nowrap tm-description-list__body"><!--[--><a class="tm-company-basic-info__link" href="https://t.me/spring_aio" target="_blank">t.me</a><!--]--></dd></dl><dl class="tm-description-list tm-description-list tm-description-list_variant-columns-nowrap"><dt class="tm-description-list__title tm-description-list__title_variant-columns-nowrap tm-description-list__title">Дата регистрации</dt><dd class="tm-description-list__body tm-description-list__body_variant-columns-nowrap tm-description-list__body"><!--[--><time datetime="2024-05-27T07:08:22.000Z" title="2024-05-27, 10:08">27  мая  2024</time><!--]--></dd></dl><!-- --><dl class="tm-description-list tm-description-list tm-description-list_variant-columns-nowrap"><dt class="tm-description-list__title tm-description-list__title_variant-columns-nowrap tm-description-list__title">Численность</dt><dd class="tm-description-list__body tm-description-list__body_variant-columns-nowrap tm-description-list__body"><!--[-->11–30 человек<!--]--></dd></dl><!-- --><!-- --></div><!--]--></div><!--]--><!-- --></section><div class="tm-company-widgets"><!--[--><!--]--></div><!-- --><!-- --><!--]--><!-- --></div></div><!--]--></div></div><!-- --><!--]--></div></div></main><!-- --></div><div class="tm-footer-menu"><div class="tm-page-width"><!--[--><div class="tm-footer-menu__container"><!--[--><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Ваш аккаунт</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a href="/kek/v1/auth/habrahabr/?back=/ru/companies/spring_aio/articles/882690/&amp;hl=ru" rel="nofollow" target="_self">Войти</a></li><li class="tm-footer-menu__list-item"><a href="/kek/v1/auth/habrahabr-register/?back=/ru/companies/spring_aio/articles/882690/&amp;hl=ru" rel="nofollow" target="_self">Регистрация</a></li><!--]--></ul></div></div><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Разделы</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/articles/">Статьи</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/news/">Новости</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/hubs/">Хабы</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/companies/">Компании</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/users/">Авторы</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/sandbox/">Песочница</a></li><!--]--></ul></div></div><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Информация</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/help/">Устройство сайта</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/authors/codex/">Для авторов</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/companies/corpblogs/">Для компаний</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/docs/transparency/">Документы</a></li><li class="tm-footer-menu__list-item"><a href="https://account.habr.com/info/agreement/?hl=ru_RU" target="_blank">Соглашение</a></li><li class="tm-footer-menu__list-item"><a href="https://account.habr.com/info/confidential/?hl=ru_RU" target="_blank">Конфиденциальность</a></li><!--]--></ul></div></div><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Услуги</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/corporate-blogs/" target="_blank">Корпоративный блог</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/advertising/" target="_blank">Медийная реклама</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/native-special/" target="_blank">Нативные проекты</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/education-programs/" target="_blank">Образовательные программы</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/hello-startup/" target="_blank">Стартапам</a></li><!--]--></ul></div></div><!--]--></div><!--]--></div></div><div class="tm-footer"><div class="tm-page-width"><!--[--><div class="tm-footer__container"><!-- --><div class="tm-footer__social"><!--[--><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.facebook.com/habrahabr.ru" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Facebook</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-facebook"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://twitter.com/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Twitter</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-twitter"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://vk.com/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>VK</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-vk"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://telegram.me/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Telegram</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-telegram"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.youtube.com/channel/UCd_sTwKqVrweTt4oAKY5y4w" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Youtube</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-youtube"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://dzen.ru/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Яндекс Дзен</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-dzen"></use></svg></a><!--]--></div><!--teleport start--><!--teleport end--><button class="tm-footer__link"><!-- --> Настройка языка</button><a class="tm-footer__link" href="/ru/feedback/">Техническая поддержка</a><div class="tm-footer-copyright"><span class="tm-copyright"><span class="tm-copyright__years">© 2006–2025, </span><span class="tm-copyright__name"><a class="tm-copyright__link" href="https://company.habr.com/" rel="noopener" target="_blank">Habr</a></span></span></div></div><!--]--></div></div><!-- --><!--]--></div><!-- --></div></div>
<div id="overlays"><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--></div>
</body>
</html>
