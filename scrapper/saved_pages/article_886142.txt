<!DOCTYPE html>

<html lang="ru">
<head>
<title>За кулисами JIT: Секреты HotSpot JVM C2 компилятора (Часть 1) / Хабр</title>
</head>
<body>
<div id="mount"><div data-async-called="true" id="app"><div class="tm-layout__wrapper"><!--[--><!-- --><div></div><!-- --><header class="tm-header" data-test-id="header"><div class="tm-page-width"><!--[--><div class="tm-header__container"><!-- --><span class="tm-header__logo-wrap"><a class="tm-header__logo tm-header__logo_hl-ru tm-header__logo" href="/ru/"><svg class="tm-svg-img tm-header__icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a><span class="tm-header__beta-sign" style="display:none;">β</span></span><!--[--><div class="tm-dropdown tm-header__projects"><div class="tm-dropdown__head"><!--[--><button class="tm-header__dropdown-toggle"><svg class="tm-svg-img tm-header__icon tm-header__icon_dropdown" height="16" width="16"><title>Открыть список</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#arrow-down"></use></svg></button><!--]--></div><!-- --></div><a class="tm-header__become-author-btn" href="/ru/sandbox/start/">Как стать автором</a><div class="tm-feature tm-feature tm-feature_variant-inline tm-header__feature"><!-- --></div><!-- --><!--]--><!-- --></div><!--]--></div></header><div class="tm-layout"><div class="tm-page-progress-bar"></div><div class="tm-base-layout__header_is-sticky tm-base-layout__header" data-menu-sticky="true"><div class="tm-page-width"><!--[--><div class="tm-base-layout__header-wrapper"><div class="tm-main-menu"><div class="tm-main-menu__section"><nav class="tm-main-menu__section-content"><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/feed/">Моя лента</a><!--]--><!--[--><a class="tm-main-menu__item" href="/ru/articles/">Все потоки</a><!--]--><!--[--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/develop/">Разработка</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/admin/">Администрирование</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/design/">Дизайн</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/management/">Менеджмент</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/marketing/">Маркетинг</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/popsci/">Научпоп</a><!--]--><!--]--></nav></div></div><div class="tm-header-user-menu tm-base-layout__user-menu"><a class="tm-header-user-menu__item tm-header-user-menu__search" data-test-id="search-button" href="/ru/search/"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_search tm-header-user-menu__icon_dark" height="24" width="24"><title>Поиск</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#search"></use></svg></a><!-- --><!-- --><div class="tm-header-user-menu__item tm-header-user-menu__write"><div><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_write tm-header-user-menu__icon_dark" height="24" width="24"><title>Написать публикацию</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#write"></use></svg></div><!-- --></div><!--[--><div class="tm-header-user-menu__item"><button class="tm-header-user-menu__toggle" data-test-id="user-menu-settings"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_dark" height="24" width="24"><title>Настройки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#page-settings"></use></svg></button></div><a class="tm-header-user-menu__item" href="https://habr.com/kek/v1/auth/habrahabr/?back=/ru/companies/spring_aio/articles/886142/&amp;hl=ru" rel="nofollow"><!--[--><button class="btn btn_solid btn_small tm-header-user-menu__login" type="button"><!--[-->Войти<!--]--></button><!--]--></a><!--]--><!-- --><!--teleport start--><!--teleport end--><!-- --></div></div><!--]--></div></div><!-- --><div class="tm-page-width"><!--[--><!--]--></div><main class="tm-layout__container"><div class="tm-page" companyname="spring_aio" data-async-called="true" hl="ru" style="--0c809c5a:16px;--a086013e:100%;--7c457026:0;"><div class="tm-page-width"><!--[--><div class="tm-page__header"><!--[--><!--]--></div><div class="tm-page__wrapper"><div class="tm-page__main_has-sidebar tm-page__main"><div class="pull-down"><!-- --><div class="pull-down__header" style="height:0px;"><div class="pull-down__content" style="bottom:10px;"><svg class="tm-svg-img pull-down__icon pull-down__arrow" height="24" width="24"><title>Обновить</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#pull-arrow"></use></svg></div></div><!--[--><!--[--><div class="tm-article-presenter"><!--[--><!--[--><!-- --><div class="tm-company-profile-card tm-company-article__profile-card"><div class="tm-company-card tm-company-profile-card__info"><div class="tm-company-card__header"><a class="tm-company-card__avatar" href="/ru/companies/spring_aio/profile/"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="48" src="//habrastorage.org/getpro/habr/company/8f1/91a/458/8f191a4584b8fab12d15af23e447a1d5.png" width="48"/></div></a><!--[--><!-- --><div class="tm-counter-container tm-company-card__rating"><div class="tm-counter-container__header"><!--[--><!--[--><!--]--><div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!-- --><div class="tm-votes-lever__score tm-votes-lever__score_appearance-rating tm-votes-lever__score"><!--[--><span><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter_rating tm-votes-lever__score-counter" data-test-id="votes-score-counter">77.73</span></span><!--]--></div><!-- --></div><!--]--></div><div class="tm-counter-container__footer"><!--[--><span class="tm-rating__text tm-rating__text">Рейтинг</span><!--]--></div></div><!-- --><!--]--></div><div class="tm-company-card__info"><a class="tm-company-card__name" href="/ru/companies/spring_aio/profile/"><span>Spring АйО</span></a><!-- --></div></div><div class="tm-company-profile-card__buttons"><div class="tm-button-follow tm-company-profile-card__button tm-company-profile-card__button_follow"><!-- --><button class="tm-button-follow__button tm-button-follow__button_big" data-test-id="follow-button" type="button">Подписаться</button></div><!-- --><!-- --><!-- --></div></div><!-- --><!--]--><!--]--><div class="tm-article-presenter__body" data-test-id="article-body"><div class="tm-misprint-area"><div class="tm-misprint-area__wrapper"><!--[--><article class="tm-article-presenter__content tm-article-presenter__content_narrow"><!--[--><div class="tm-article-presenter__header"><!--[--><!--]--><div class="tm-article-snippet tm-article-snippet tm-article-presenter__snippet"><!--[--><!--]--><div class="tm-article-snippet__meta-container"><div class="tm-article-snippet__meta"><span class="tm-user-info tm-article-snippet__author"><a class="tm-user-info__userpic" data-test-id="user-info-pic" href="/ru/users/spring_aio/" title="spring_aio"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="24" src="//habrastorage.org/r/w48/getpro/habr/avatars/8e0/5e8/a1c/8e05e8a1c5fd4560f661efb2cb00e77e.png" width="24"/></div></a><span class="tm-user-info__user tm-user-info__user_appearance-default" data-test-id="user-info-description"><a class="tm-user-info__username" href="/ru/users/spring_aio/">spring_aio <!-- --></a><!--[--><span class="tm-article-datetime-published"><time datetime="2025-02-26T17:03:13.000Z" title="2025-02-26, 20:03">26  фев   в 20:03</time></span><!--]--></span></span></div><!-- --></div><h1 class="tm-title tm-title_h1" data-test-id="articleTitle" lang="ru"><span>За кулисами JIT: Секреты HotSpot JVM C2 компилятора (Часть 1)</span></h1><div class="tm-article-snippet__stats" data-test-id="articleStats"><div class="tm-article-complexity tm-article-complexity_complexity-high"><span class="tm-svg-icon__wrapper tm-article-complexity__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Уровень сложности</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#complexity-high"></use></svg></span><span class="tm-article-complexity__label">Сложный</span></div><div class="tm-article-reading-time"><span class="tm-svg-icon__wrapper tm-article-reading-time__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Время на прочтение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#clock"></use></svg></span><span class="tm-article-reading-time__label">21 мин</span></div><span class="tm-icon-counter tm-data-icons__item"><svg class="tm-svg-img tm-icon-counter__icon" height="24" width="24"><title>Количество просмотров</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-views"></use></svg><span class="tm-icon-counter__value" title="2475">2.5K</span></span></div><div class="tm-publication-hubs__container" data-test-id="articleHubsList"><div class="tm-publication-hubs"><!--[--><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/companies/spring_aio/articles/"><!--[--><span>Блог компании Spring АйО</span><!-- --><!--]--></a></span><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/hubs/java/"><!--[--><span>Java</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/hubs/kotlin/"><!--[--><span>Kotlin</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/hubs/programming/"><!--[--><span>Программирование</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><!--]--></div></div><div class="tm-article-labels" data-test-id="articleLabels"><div class="tm-article-labels__container"><div class="tm-publication-label tm-publication-label_variant-review"><span>Обзор</span></div><!--[--><div class="tm-publication-label tm-publication-label_variant-translation"><span>Перевод</span></div><!--]--></div></div><!-- --><!-- --></div></div><!--[--><div class="tm-article-presenter__origin"><a class="tm-article-presenter__origin-link" href="https://eme64.github.io/blog/2024/12/24/Intro-to-C2-Part01.html" target="_blank">Автор оригинала: <span>Emanuel Peter</span></a></div><div class="tm-article-body" data-gallery-root="" lang="ru"><div><!--[--><!--]--></div><div id="post-content-body"><div><div class="article-formatted-body article-formatted-body article-formatted-body_version-2"><div xmlns="http://www.w3.org/1999/xhtml"><p>Новый перевод от команды <a href="https://t.me/+QmrKn0wA8CdkNjAy">Spring АйО</a> расскажет вам о разных уровнях JIT (Just in Time) компиляции, о преимуществах такого подхода к компиляции Java приложений по сравнению с традиционным способом, а также покажет на примерах, что происходит при компиляции приложения и какой ассемблерный и машинный код будет сгенерирован при использовании разных опций JIT компиляции.</p><hr/><p>Я предполагаю, что вы уже клонировали и <a href="https://openjdk.org/groups/build/doc/building.html">собрали JDK</a>.</p><p>В первой части мы посмотрим на:</p><ul><li><p>Запуск простого примера на Java.</p></li><li><p>Компиляцию в Java bytecode с помощью <code>javac</code>.</p></li><li><p>Различие между релизными и debug билдами.</p></li><li><p>Почему JIT компиляция?</p></li><li><p>Многоуровневую компиляцию.</p></li><li><p>Посмотрим на C2 IR и сгенерированные ассемблерные инструкции.</p></li></ul><details class="spoiler"><summary>Комментарий от редакции Spring АйО</summary><div class="spoiler__content"><p>Речь идет о C2 Intermediate Representation (он же IR). В теории компиляторов IR является временным промежуточным представлением кода. Известный пример — IR, который генерирует LLVM. Соответственно, этот IR затем преобразуется в исполняемые машинные инструкции. Подобная схема характерна и для C2-компилятора.</p></div></details><h2>Наш первый пример</h2><p>Мы начнем с очень простого примера <code>Test.java</code>:</p><pre><code class="java">public class Test {
    public static void main(String[] args) {
        // Especially with a debug build, the JVM startup can take a while,
        // so it can take a while until our code is executed.
        System.out.println("Run");

        // Repeatedly call the test method, so that it can become hot and
        // get JIT compiled.
        for (int i = 0; i &lt; 10_000; i++) {
            test(i, i + 1);
        }
        System.out.println("Done");
    }
    
    // The test method we will focus on.
    public static int test(int a, int b) {
        return a + b;
    }
}
</code></pre><p>Мы можем запустить его вот так: </p><pre><code class="bash">$ java Test.java
Run
Done</code></pre><h2>Компиляция исходного кода на Java в Java bytecode</h2><p>Java (и другие языки программирования, использующие JVM) сначала компилируются в<a href="https://en.wikipedia.org/wiki/List_of_Java_bytecode_instructions"> Java Bytecode</a>. Этот bytecode все еще нейтрален к платформе (в том плане, что он независим от архитектуры CPU и OS) и должен исполняться в JVM. JVM может интерпретировать bytecode или скомпилировать его далее в привязанный к платформе машинный код.</p><p>Мы можем в явном виде скомпилировать наш тестовый файл в bytecode:</p><pre><code class="bash">$ javac Test.java</code></pre><p>Таким образом будет сгенерирован файл <code>Test.class</code>. Мы можем проинспектировать его содержимое:</p><pre><code class="java">$ javap -c Test.class
  
Compiled from "Test.java"

public class Test {
  public Test();
    Code:
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V
         4: return

  public static void main(java.lang.String[]);
    Code:
         0: getstatic     #7                  // Field java/lang/System.out:Ljava/io/PrintStream;
         3: ldc           #13                 // String Run
         5: invokevirtual #15                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
         8: iconst_0
         9: istore_1
        10: iload_1
        11: sipush        10000
        14: if_icmpge     31
        17: iload_1
        18: iload_1
        19: iconst_1
        20: iadd
        21: invokestatic  #21                 // Method test:(II)I
        24: pop
        25: iinc          1, 1
        28: goto          10
        31: getstatic     #7                  // Field java/lang/System.out:Ljava/io/PrintStream;
        34: ldc           #27                 // String Done
        36: invokevirtual #15                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        39: return

  public static int test(int, int);
    Code:
         0: iload_0
         1: iload_1
         2: iadd
         3: ireturn
}
</code></pre><p>На этом этапе вам необязательно понимать этот bytecode до мельчайших деталей. На высоком уровне мы видим, что в классе <code>Test</code> присутствуют три метода:</p><ul><li><p><code>&lt;init&gt;</code>: это код конструктора по умолчанию, который вызывает конструктор суперкласса <code>Object</code>. Отметим, что javac автоматически добавил конструктор по умолчанию за нас, несмотря на то, что мы не задавали его в явном виде.</p></li><li><p><code>main</code>: мы видим несколько <code>invokevirtual</code> для <code>println</code>, один <code>invokestatic</code> для <code>test</code> и <code>goto 10</code> инструкцию (она реализует цикл <code>for</code>) в bytecode-е, находящуюся на оффсете <code>28</code> для backedge цикла.</p></li><li><p><code>test</code>: два аргумента типа <code>int</code> помещаются по локальным адресам <code>0</code> и <code>1</code>. <code>iload_0</code> и <code>iload_1</code> берут эти аргументы с их локальных адресов и помещают их на вершину stack-а. <code>iadd</code> убирает два значения типа <code>int</code> с вершины стека, суммирует их, и кладет на вершину стека результат суммы. Далее <code>ireturn</code> инструкция забирает эту сумму с вершины стека и возвращает ее в вызываемый метод.</p></li></ul><p>Если вы хотите узнать больше о Java Bytecode:</p><ul><li><p><a href="https://en.wikipedia.org/wiki/List_of_Java_bytecode_instructions">Java Bytecode (Wikipedia)</a>: полезный справочник, содержащий все существующие JVM bytecode инструкции.</p></li><li><p><a href="https://github.com/openjdk/asmtools">Asmtools</a>: инструмент для ассемблирования / дизассемблирования класс-файлов. Когда я работаю над багом, и у меня есть только класс-файл, я часто инспектирую его с помощью <code>jdis</code>, модифицирую его и снова компилирую с помощью <code>jasm</code>. Так у меня часто получается рано или поздно получить примерное представление об исходном Java коде.</p></li></ul><p><em>Примечание 1: Когда мы напрямую исполняем </em><code><em>Test.java</em></code><em>, JVM неявно сначала компилирует файл в bytecode и затем напрямую выполняет класс-файл. </em><a href="https://dev.java/learn/single-file-program/"><em>Таким образом это работает только начиная с JDK 11</em></a><em>.</em></p><p><em>Примечание 2: </em><code><em>.jar</em></code><em> файлы — это просто zip-каталоги различных </em><code><em>.class</em></code><em> файлов.</em></p><h3>Типы сборок JDK</h3><p>Три наиболее часто встречающихся в моей повседневной работе типа сборок следующие:</p><ul><li><p>Релизная: быстрая, но отлаживать ее труднее. Эта сборка предназначена для пользователей Java. Она не выполняет никакие assert инструкции в С++ коде самой HotSpot VM. Мы регулярно добавляем дополнительный проверочный код в форме assertion-инструкций, когда меняем или добавляем новый код VM. Этот код помогает раньше заметить проблему. Но он может серьезно замедлить выполнение программы на Java. Поэтому мы не включаем такой код в релизные сборки JDK, чтобы достичь максимальной производительности.</p></li></ul><details class="spoiler"><summary>Комментарий от редакции Spring АйО</summary><div class="spoiler__content"><p>Речь идёт о том, что разработчики рантаймов, в частности разработчики HotSpot JVM, добавляют в реализацию самой виртуальной машины большое количество assert-выражений (HotSpot JVM написана на C++, поэтому автор ссылается на инструкции assert в C++). Эти выражения необходимы для проверки того, что все необходимые инварианты при работе того или иного механизма внутри JVM соблюдаются.</p></div></details><ul><li><p>Отладочная (быстрая) или fastdebug: работает медленнее релизной, но выполняет инструкции assert и учитывает флаги VM, предназначенные для дебага.</p></li><li><p>Отладочная (медленная) или slowdebug: работает медленнее, чем быстрая отладочная сборка. Компилятор C++ работает с меньшим количеством оптимизаций, что влияет на производительность финальной сборки, но при этом у VM появляется больше символов, все переменные доступны, инлайнинги отсутствуют и т.д. , что дает лучший отладочный опыт с GDB / RR.</p></li></ul><details class="spoiler"><summary>Комментарий от редакции Spring АйО</summary><div class="spoiler__content"><p>Под символами подразумеваются определённые конструкции в объектных файлах, которые видны линковщику (linker, иногда в русскоязычном сегменте его называют «компоновщик»).

Дело в том, что компиляторы, особенно для нативных языков, достаточно умны. Они отлично справляются с инлайнингом, развёрткой циклов и другими оптимизациями. Из-за таких оптимизаций, например, инлайнинга, компилятор C++ не сформирует в объектных файлах те «символы», которые соответствуют исходному коду, что затрудняет отладку.

Поэтому в индустрии в целом (без привязки к Java) в дебажных сборках обычно отключают все или определённые оптимизации компиляторов.</p></div></details><p>Различия в этих сборках состоит в основном в разных уровнях GCC оптимизации. Отладочные сборки содержат больше отладочных флагов. И только отладочные сборки выполняют инструкции assert (то есть дополнительные проверки).</p><p>Я предпочитаю работать с fastdebug по умолчанию, но переключаюсь на slowdebug, если GDB / RR ведут себя неожиданным образом (например, не прерываются на той строке, где должны).</p><details class="spoiler"><summary>Комментарий от редакции Spring АйО</summary><div class="spoiler__content"><p>Эти дебаггеры, как правило, не встречаются в мире Java, поэтому можно не уделять им особого внимания. Но всё же поясним:</p><p>GDB — GNU DeBugger. RR — ещё один дебаггер, который, вероятно, не очень известен в Java-сообществе. Он построен на основе GDB и предоставляет дополнительный функционал.</p><p>Их чаще всего используют для отладки кода на C/C++.</p></div></details><h2>Вывод лога компиляции при помощи VM CompileCommand</h2><p>Теперь давайте продолжим работать с нашим примером и посмотрим, какие методы скомпилированы. Это можно сделать, используя специальный флаг <code>CompileCommand</code>, который задает различные дополнительные опции управления. Одна из них — это <code>printcompilation</code>, которая выводит на экран лог скомпилированных методов (чтобы получить более подробную информацию о CompileCommand, вы можете воспользоваться командой <code>java -XX:CompileCommand=help --version</code>).</p><pre><code class="java">$ java -XX:CompileCommand=printcompilation,*::* Test.java
CompileCommand: PrintCompilation *.* bool PrintCompilation = true
360    1       3       java.lang.Byte::toUnsignedInt (6 bytes)
363    2       3       java.lang.Object::&lt;init&gt; (1 bytes)
390    3       4       java.lang.Byte::toUnsignedInt (6 bytes)
...
it continues for a while, and ends with
...
10874 2000       3       java.lang.invoke.InvokerBytecodeGenerator::isStaticallyInvocable (168 bytes)
10874 2005       3       sun.nio.fs.UnixPath::getPathForExceptionMessage (5 bytes)
Run
10876 2007       2       Test::test (4 bytes)
Done
10881 2006       3       sun.nio.fs.UnixException::translateToIOException (133 bytes)
</code></pre><p>Из этого лога мы уже можем узнать довольно много от том, как HotSpot компилирует и выполняет наш код:</p><ul><li><p>Здесь довольно много компиляций, которые происходят не из нашего <code>Test.java</code>. Они инициируются Java runtime и библиотеками, например, во время запуска JVM до момента, когда вызывается наш метод <code>main()</code> в <code>Test.java</code>.</p></li><li><p>Первая колонка отображает время, когда происходит компиляция, в миллисекундах. <code>Test::test</code> выполняется через 10876 миллисекунд.</p></li><li><p>Вторая колонка является уникальным идентификатором компиляции, который, как мы видим, растет инкрементально. Отметим, что эти идентификаторы не всегда идут в идеальном порядке, по причине компиляции методов несколькими потоками компилятора, которые работают параллельно, при этом каждая компиляция может занимать разное время. </p></li><li><p>Третья колонка показывает, какой компилятор используется. Уровни 1-3 используются для C1, уровень 4 — для C2.</p></li><li><p>Четвертая колонка показывает имя скомпилированного метода и размер его bytecode.</p></li></ul><p>Обычно нас интересует только компиляция определенных классов. Мы можем ограничить вывод лога некоторыми классами, например нашим классом <code>Test</code>. Этого можно достичь модификацией команды <code>printcompilation</code> следующим образом:</p><pre><code class="bash">$ java -XX:CompileCommand=printcompilation,Test::* Test.java
CompileCommand: PrintCompilation Test.* bool PrintCompilation = true
Run
10405 1983       3       Test::test (4 bytes)
Done</code></pre><h3>Зачем использовать Just In Time (JIT) компилятор?</h3><p>Компилятор типа Ahead Of Time (AOT) компилирует код один раз и выдает исполняемый файл. При использовании GCC вы компилируете ваш C код один раз и отдаёте пользователям исполняемый файл. Этот исполняемый файл может работать только на тех платформах, под которые он был скомпилирован. Вы не можете выполнять файл, скомпилированный под x64, на машине aarch64. Если вы использовали ассемблерные инструкции AVX512 в исполняемом файле, вы сможете запустить его только на тех машинах, которые поддерживают эти инструкции.</p><details class="spoiler"><summary>Комментарий от редакции Spring АйО</summary><div class="spoiler__content"><p>AVX512 — это относительно новый набор расширений для архитектуры x86, предложенный Intel. Его поддерживают большинство современных x86-чипов Intel и AMD, и он используется для различных целей. Типичный пример использования — операции над векторами.</p></div></details><p>Компилятор типа (JIT) компилирует код в рантайме. Это приводит к целому набору как дополнительных вызовов, так и дополнительных возможностей:</p><ul><li><p>Компиляция происходит параллельно с выполнением. Поток интерпретации байткода и его компиляции конкурируют между собой за ресурсы. Таким образом JIT компиляторы имеют сильный стимул для более быстрой компиляции, чтобы минимально задерживать работу приложения.</p></li><li><p>В момент запуска никакой код еще не скомпилирован. Любой исполняемый код работает в режиме интерпретации, что довольно медленно. Так как компиляция “Горячих” фрагментов кода занимает время, перформанс приложения также растет не быстро после старта.</p></li><li><p>Вместо того, чтобы распространять исполняемые файлы, которые зависят от платформы, можно распространять платформонезависимый исходный код (Java код или Java bytecode). JIT компилятор знает все о платформе, на которой работает, и может сгенерировать код, оптимизированный именно под эту архитектуру CPU.</p></li><li><p>Динамическая загрузка нового кода: JVM позволяет новым классам загружаться в рантайме, с возможностью вызывать их методы. AOT компилятор ничего не знал бы о динамических классах времени компиляции. JIT компилятор позволяет новому коду компилироваться в рантайме, таким образом улучшая пропускную способность при выполнении динамического кода.</p></li><li><p>Новые возможности оптимизации: мы можем делать предположения во время компиляции, основанные на гипотезах, что, возможно, позволит генерировать более быстрый код. Если такое гипотетическое предположение опровергается в рантайме, например, проверка данной гипотезы не проходит, мы всегда можем откатить оптимизацию и вернуться обратно к интерпретатору. Вот несколько примеров:</p><ul><li><p>Если интерфейс имеет только одну реализацию, мы можем использовать статические вызовы вместо динамических (то есть виртуальных) вызовов. Если мы когда-либо загрузим вторую реализацию того же интерфейса, можно будет перекомпилировать с использованием динамических вызовов (dynamic dispatch).</p></li><li><p>Мы можем профилировать выполнение в режиме интерпретатора (и также в режиме C1) и использовать эту профильную информацию для управления нашей (C2) компиляцией. Если какая-то ветвь алгоритма никогда не выполняется, мы просто избегаем компиляции этой ветви и проводим деоптимизацию, если переход на нее все же когда-то произойдет. Это снижает время компиляции, потому что мы компилируем меньше кода.</p></li></ul></li></ul><p>Если профайлер говорит нам, что проверка на <code>null</code> ни разу не потерпела неудачу, мы можем использовать неявные проверки на null-checks: мы удаляем проверки на <code>null</code>, и если мы получаем <code>SIGSEGV</code> в этом месте из-за попытки сослаться на <code>nul</code>, мы ловим этот сигнал и деоптимизируем, а также выбрасываем <code>NullPointerException</code> из интерпретатора.</p><details class="spoiler"><summary>Комментарий от редакции Spring АйО</summary><div class="spoiler__content"><p>SIGSEGV — это специальный сигнал операционной системы, который она посылает процессу при обращении к участку памяти, который не существует, либо к участку памяти, к которой у процесса нет доступа.</p></div></details><h3>Многоуровневая компиляции и флаги VM для контроля за компиляцией </h3><p>В приведенном выше примере выполнения программы мы заметили, что из всего содержимого <code>Test.java</code> только <code>Test::test</code> был скомпилирован и только компилятором C1 (уровни 1, 2 или 3). Но почему же <code>main</code> метод не компилируется?</p><p>HotSpot JVM выполняет ваш Java код (bytecode) одним из следующих способов: </p><ul><li><p>Интерпретатор: первоначально весь код выполняется интерпретатором. Это означает, что мы можем начать выполнять код немедленно, но на малой скорости. Мы профилируем какой именно код выполняется, например, посчитав, сколько раз вызывается тот или иной метод. Если мы достигаем определенного порога, мы принимаем решение, что этот метод надо скомпилировать, поэтому мы добавляем этот метод к очереди на компиляцию. Но одновременно с этим мы продолжаем выполнять код в интерпретаторе. Если мы снова попадаем в этот метод, и компиляция уже завершена, мы выполняем скомпилированный код.</p></li><li><p>C1: как только в процессе профилирования выяснилось, что код является достаточно горячим (например, вызывается достаточно часто), мы компилируем метод с использованием C1. Целью C1 является генерация оптимизированного машинного кода с малым избыточным потреблением ресурсов во время компиляции. Получившийся в результате код уже намного быстрее интерпретируемого кода. Чтобы это заработало, C1 выполняет только очень ограниченную оптимизацию, потому что на этой стадии мы пока не хотим тратить на нее больше времени. C1 также добавляет профилированный код к машинному коду, чтобы мы могли продолжать считать количество вызовов. Если мы замечаем, что код вызывается гораздо чаще, мы рано или поздно можем захотеть сгенерировать более оптимизированный машинный код. Если определенное количество вызовов метода превышено, мы помещаем метод в очередь на компиляцию еще раз, но на этот раз с помощью C2.</p></li><li><p>C2: как только мы при профилировании определили, что код является очень горячим, мы хотим сгенерировать высокооптимизированный машинный код. Мы согласны платить за это более долгим временем компиляции, поскольку ожидаем, что в будущем этот код будет выполняться много раз. Сокращение общего времени выполнения с более быстрым кодом (в идеале) перевешивает стоимость времени, затраченного на более сложный алгоритм оптимизации во время компиляции с применением C2.</p></li></ul><p>Еще несколько важных моментов:</p><ul><li><p>Информация, полученная при профилировании, используется не только при подсчете вызовов метода для поиска горячего кода, но также, что наиболее важно, для задания верного направления агрессивной/оптимистичной оптимизации, выполняемой компилятором C2. C2 не только более медленный, при его использовании появляется риск, что скомпилированный код будет сразу же деоптимизирован. </p></li><li><p>Все сказанное — упрощенная картина. Возможны различные пути, то есть иногда мы сразу компилируем на уровне C2 или остаемся на C1, возможны также и разные уровни профилирования.</p></li><li><p>OSR (On Stack Replacement): если у нас есть цикл, который выполняет очень много итераций, мы можем захотеть скомпилировать его, пока находимся в цикле. Как только мы выходим на backedge и компиляция кода завершается, мы можем входить в скомпилированный код в этой точке.</p></li></ul><details class="spoiler"><summary>Комментарий редакции Spring АйО</summary><div class="spoiler__content"><p>Под «backedge» автор имеет в виду локальную инструкцию байткода, которая заставляет instruction pointer потока вернуться на определённый оффсет в памяти. Иными словами, это последняя инструкция в цикле, после которой потенциально начинается повторная итерация.</p></div></details><p>Вернемся к нашему примеру. Мы увидели, что <code>Test::main</code> не был скомпилирован, то есть он, скорее всего, выполнялся исключительно интерпретатором. <code>Test::test</code> сначала выполняется интерпретатором, затем оказывается достаточно горячим для C1 компиляции.</p><p>Мы можем заставить весь код выполняться в интерпретаторе, используя флаг <code>-Xint</code>:</p><pre><code class="bash">$ java -XX:CompileCommand=printcompilation,Test::* -Xint Test.java
CompileCommand: PrintCompilation Test.* bool PrintCompilation = true
Run
Done</code></pre><p>Обычно компиляция происходит в фоновом режиме, что означает, что, когда компиляция метода попадает в очередь, мы продолжаем его выполнение интерпретатором, пока затребованная компиляция не завершится. Это асинхронное поведение может иногда сделать компиляцию немного непредсказуемой. Иногда имеет смысл отключить возможность фоновой компиляции для целей отладки при помощи опции <code>-Xbatch</code>:</p><pre><code class="bash">$ java -XX:CompileCommand=printcompilation,Test::* -Xbatch Test.java
CompileCommand: PrintCompilation Test.* bool PrintCompilation = true
Run
25090 1835    b  3       Test::test (4 bytes)
25090 1836    b  4       Test::test (4 bytes)
Done</code></pre><p>Мы видим, что теперь код компилируется сначала C1 и затем C2. <code>Test::test()</code> был достаточно горячим, чтобы попасть в очередь на  C2 компиляцию. Без <code>-Xbatch</code> выполнение программы успевало полностью завершиться до C2 компиляции метода. При использовании <code>-Xbatch</code> мы в явном виде дожидаемся завершения всех компиляций прежде чем начать выполнять метод. Мы также видим, что блокирующее поведение сделало выполнение всей программы намного более медленным. Это происходит потому, что VM теперь блокирует выполнение всякий раз, когда требуется произвести компиляцию, причем не только в нашем классе <code>Test</code>, но и во время запуска JVM.</p><p>Иногда может быть полезно ограничить компиляцию только некоторыми классами или методами:</p><pre><code class="bash">$ java -XX:CompileCommand=printcompilation,Test::* -Xbatch -XX:CompileCommand=compileonly,Test::test Test.java
CompileCommand: PrintCompilation Test.* bool PrintCompilation = true
CompileCommand: compileonly Test.test bool compileonly = true
Run
7680   85    b  3       Test::test (4 bytes)
7680   86    b  4       Test::test (4 bytes)
Done</code></pre><p>Мы также можем принудительно вызвать немедленную компиляцию всех выполняемых методов и пропустить стадию интерпретатора полностью, используя опцию <code>-Xcomp</code>. В этом случае накладывание ограничений на компиляцию становится еще более важным. Иначе нам придется компилировать все классы и методы, используемые от момента запуска JVM, что может занять много времени.</p><p>Мы можем остановить многоуровневую компиляцию на определенном уровне, например избегать любых C2 компиляций и разрешить только C1:</p><pre><code class="bash">$ java -XX:CompileCommand=printcompilation,Test::* -XX:CompileCommand=compileonly,Test::test -Xbatch -XX:TieredStopAtLevel=3 Test.java
CompileCommand: PrintCompilation Test.* bool PrintCompilation = true
CompileCommand: compileonly Test.test bool compileonly = true
Run
7580   85    b  3       Test::test (4 bytes)
Done</code></pre><p>Используя <code>-XX:-TieredCompilation</code>, мы можем запретить многоуровневую компиляцию, и тогда будет использоваться только C2:</p><pre><code class="bash">$ java -XX:CompileCommand=printcompilation,Test::* -XX:CompileCommand=compileonly,Test::test -Xbatch -XX:-TieredCompilation Test.java
CompileCommand: PrintCompilation Test.* bool PrintCompilation = true
CompileCommand: compileonly Test.test bool compileonly = true
Run
8236   85    b        Test::test (4 bytes)
Done</code></pre><h3>Первый взгляд на C2 IR</h3><p>Большая часть работы компилятора проходит на уровне C2, и лишь незначительная часть на уровне C1. Поэтому мы сосредоточимся на C2 IR.</p><p> Используя опцию <code>-XX:+PrintIdeal</code>, мы можем отобразить машинонезависимое C2 IR (intermediate representation — промежуточное представление), которое иногда называется также “ideal graph” (идеальный граф) или просто “C2 IR”, после того, как большинство оптимизаций уже проведены, но до генерации кода:</p><pre><code class="java">$ java -XX:CompileCommand=printcompilation,Test::* -XX:CompileCommand=compileonly,Test::test -Xbatch -XX:-TieredCompilation -XX:+PrintIdeal Test.java
CompileCommand: PrintCompilation Test.* bool PrintCompilation = true
CompileCommand: compileonly Test.test bool compileonly = true
Run
8211   85    b        Test::test (4 bytes)
AFTER: print_ideal
  0  Root  === 0 24  [[ 0 1 3 ]] inner 
  3  Start  === 3 0  [[ 3 5 6 7 8 9 10 11 ]]  #{0:control, 1:abIO, 2:memory, 3:rawptr:BotPTR, 4:return_address, 5:int, 6:int}
  5  Parm  === 3  [[ 24 ]] Control !jvms: Test::test @ bci:-1 (line 17)
  6  Parm  === 3  [[ 24 ]] I_O !jvms: Test::test @ bci:-1 (line 17)
  7  Parm  === 3  [[ 24 ]] Memory  Memory: @BotPTR *+bot, idx=Bot; !jvms: Test::test @ bci:-1 (line 17)
  8  Parm  === 3  [[ 24 ]] FramePtr !jvms: Test::test @ bci:-1 (line 17)
  9  Parm  === 3  [[ 24 ]] ReturnAdr !jvms: Test::test @ bci:-1 (line 17)
 10  Parm  === 3  [[ 23 ]] Parm0: int !jvms: Test::test @ bci:-1 (line 17)
 11  Parm  === 3  [[ 23 ]] Parm1: int !jvms: Test::test @ bci:-1 (line 17)
 23  AddI  === _ 10 11  [[ 24 ]]  !jvms: Test::test @ bci:2 (line 17)
 24  Return  === 5 6 7 8 9 returns 23  [[ 0 ]] 
Done
</code></pre><p>Вот так выглядит промежуточное представление нашего кода на Java из примера:</p><pre><code class="java">public static int test(int a, int b) {
    return a + b;
}</code></pre><p>Давайте посмотрим на это с конца: у нас есть команда <code>return</code>, которая возвращает результат сложения двух параметров метода <code>a</code> и <code>b</code>. Мы можем найти те же операции в IR из вывода <code>-XX:+PrintIdeal: 24 Return</code> возвращает полученное значение из IR ноды <code>23 AddI</code>. <code>23 AddI</code> складывает два параметра: <code>10 Param</code> и <code>11 Param</code>. Другие ноды нас в настоящий момент не интересуют, но мы вернемся к некоторым из них позже. </p><p>Мы можем визуализировать вывод <code>-XX:+PrintIdeal</code> с использованием IGV.</p><h3>Первый взгляд на сгенерированный ассемблерный код </h3><p>Используя <code>-XX:CompileCommand=print,Test::test</code> , мы можем вывести на экран большое количество информации о компиляции. Ниже приведен пример. Мы проигнорируем большую его часть и поговорим только о том, что представляет для нас интерес на данный момент. </p><details class="spoiler"><summary>Много кода</summary><div class="spoiler__content"><pre><code class="assembly">$ java -XX:CompileCommand=printcompilation,Test::* -XX:CompileCommand=compileonly,Test::test -Xbatch -XX:-TieredCompilation -XX:CompileCommand=print,Test::test Test.java
CompileCommand: PrintCompilation Test.* bool PrintCompilation = true
CompileCommand: compileonly Test.test bool compileonly = true
CompileCommand: print Test.test bool print = true
Run
8254   85    b        Test::test (4 bytes)

============================= C2-compiled nmethod ==============================
#r018 rsi   : parm 0: int
#r016 rdx   : parm 1: int
# -- Old rsp -- Framesize: 32 --
#r623 rsp+28: in_preserve
#r622 rsp+24: return address
#r621 rsp+20: in_preserve
#r620 rsp+16: saved fp register
#r619 rsp+12: pad2, stack alignment
#r618 rsp+ 8: pad2, stack alignment
#r617 rsp+ 4: Fixed slot 1
#r616 rsp+ 0: Fixed slot 0
#
----------------------- MetaData before Compile_id = 85 ------------------------
{method}
 - this oop:          0x00007fc87d0943c8
 - method holder:     'Test'
 - constants:         0x00007fc87d094030 constant pool [36] {0x00007fc87d094030} for 'Test' cache=0x00007fc87d0944d8
 - access:            0x9  public static 
 - flags:             0x4080  queued_for_compilation has_loops_flag_init 
 - name:              'test'
 - signature:         '(II)I'
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       14
 - vtable index:      -2
 - i2i entry:         0x00007fc8ac3ecf00
 - adapters:          AHE@0x00007fc8a8238520: 0xaa i2c: 0x00007fc8ac454380 c2i: 0x00007fc8ac45445e c2iUV: 0x00007fc8ac45443d c2iNCI: 0x00007fc8ac454498
 - compiled entry     0x00007fc8ac45445e
 - code size:         4
 - code start:        0x00007fc87d0943c0
 - code end (excl):   0x00007fc87d0943c4
 - method data:       0x00007fc87d094578
 - checked ex length: 0
 - linenumber start:  0x00007fc87d0943c4
 - localvar length:   0

------------------------ OptoAssembly for Compile_id = 85 -----------------------
#
#  int ( int, int )
#
000     N1: #	out( B1 ) &lt;- in( B1 )  Freq: 1

000     B1: #	out( N1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (96 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

01a     leal    RAX, [RSI + RDX]
01d     addq    rsp, 16	# Destroy frame
	popq    rbp
	cmpq    rsp, poll_offset[r15_thread] 
	ja      #safepoint_stub	# Safepoint: poll for GC

02c     ret

--------------------------------------------------------------------------------
----------------------------------- Assembly -----------------------------------

Compiled method (c2) 8266   85             Test::test (4 bytes)
 total in heap  [0x00007fc8ac567888,0x00007fc8ac5679f8] = 368
 relocation     [0x00007fc8ac567970,0x00007fc8ac567980] = 16
 main code      [0x00007fc8ac567980,0x00007fc8ac5679d0] = 80
 stub code      [0x00007fc8ac5679d0,0x00007fc8ac5679e8] = 24
 oops           [0x00007fc8ac5679e8,0x00007fc8ac5679f0] = 8
 metadata       [0x00007fc8ac5679f0,0x00007fc8ac5679f8] = 8
 immutable data [0x00007fc85c085a10,0x00007fc85c085a50] = 64
 dependencies   [0x00007fc85c085a10,0x00007fc85c085a18] = 8
 scopes pcs     [0x00007fc85c085a18,0x00007fc85c085a48] = 48
 scopes data    [0x00007fc85c085a48,0x00007fc85c085a50] = 8

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00007fc87d0943c8} 'test' '(II)I' in 'Test'
  # parm0:    rsi       = int
  # parm1:    rdx       = int
  #           [sp+0x20]  (sp of caller)
 ;; N1: #	out( B1 ) &lt;- in( B1 )  Freq: 1
 ;; B1: #	out( N1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
  0x00007fc8ac567980:   mov    %eax,-0x18000(%rsp)
  0x00007fc8ac567987:   push   %rbp
  0x00007fc8ac567988:   sub    $0x10,%rsp
  0x00007fc8ac56798c:   cmpl   $0x0,0x20(%r15)
  0x00007fc8ac567994:   jne    0x00007fc8ac5679c3           ;*synchronization entry
                                                            ; - Test::test@-1 (line 17)
  0x00007fc8ac56799a:   lea    (%rsi,%rdx,1),%eax
  0x00007fc8ac56799d:   add    $0x10,%rsp
  0x00007fc8ac5679a1:   pop    %rbp
  0x00007fc8ac5679a2:   cmp    0x28(%r15),%rsp              ;   {poll_return}
  0x00007fc8ac5679a6:   ja     0x00007fc8ac5679ad
  0x00007fc8ac5679ac:   retq   
  0x00007fc8ac5679ad:   movabs $0x7fc8ac5679a2,%r10         ;   {internal_word}
  0x00007fc8ac5679b7:   mov    %r10,0x498(%r15)
  0x00007fc8ac5679be:   jmpq   0x00007fc8ac500760           ;   {runtime_call SafepointBlob}
  0x00007fc8ac5679c3:   callq  Stub::nmethod_entry_barrier  ;   {runtime_call StubRoutines (final stubs)}
  0x00007fc8ac5679c8:   jmpq   0x00007fc8ac56799a
  0x00007fc8ac5679cd:   hlt    
  0x00007fc8ac5679ce:   hlt    
  0x00007fc8ac5679cf:   hlt    
[Exception Handler]
  0x00007fc8ac5679d0:   jmpq   0x00007fc8ac500c60           ;   {no_reloc}
[Deopt Handler Code]
  0x00007fc8ac5679d5:   callq  0x00007fc8ac5679da
  0x00007fc8ac5679da:   subq   $0x5,(%rsp)
  0x00007fc8ac5679df:   jmpq   0x00007fc8ac501ba0           ;   {runtime_call DeoptimizationBlob}
  0x00007fc8ac5679e4:   hlt    
  0x00007fc8ac5679e5:   hlt    
  0x00007fc8ac5679e6:   hlt    
  0x00007fc8ac5679e7:   hlt    
--------------------------------------------------------------------------------
[/Disassembly]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Oops:
  0x00007fc8ac5679e8:   0x00000006357f0c98 a 'com/sun/tools/javac/launcher/MemoryClassLoader'{0x00000006357f0c98}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Metadata:
  0x00007fc8ac5679f0:   0x00007fc87d0943c8 {method} {0x00007fc87d0943c8} 'test' '(II)I' in 'Test'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
pc-bytecode offsets:
PcDesc(pc=0x00007fc8ac56797f offset=ffffffff bits=0):
PcDesc(pc=0x00007fc8ac56799a offset=1a bits=0):
   Test::test@-1 (line 17)
PcDesc(pc=0x00007fc8ac5679e9 offset=69 bits=0):
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
oop maps:ImmutableOopMapSet contains 0 OopMaps

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
scopes:
ScopeDesc(pc=0x00007fc8ac56799a offset=1a):
   Test::test@-1 (line 17)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
relocations:
         @0x00007fc8ac567970: 5822
relocInfo@0x00007fc8ac567970 [type=11(poll_return) addr=0x00007fc8ac5679a2 offset=34]
         @0x00007fc8ac567972: 780b400b
relocInfo@0x00007fc8ac567974 [type=8(internal_word) addr=0x00007fc8ac5679ad offset=11 data=11] | [target=0x00007fc8ac5679a2]
         @0x00007fc8ac567976: 3111
relocInfo@0x00007fc8ac567976 [type=6(runtime_call) addr=0x00007fc8ac5679be offset=17 format=1] | [destination=0x00007fc8ac500760]
         @0x00007fc8ac567978: 3105
relocInfo@0x00007fc8ac567978 [type=6(runtime_call) addr=0x00007fc8ac5679c3 offset=5 format=1] | [destination=0x00007fc8ac45ece0]
         @0x00007fc8ac56797a: 000d
relocInfo@0x00007fc8ac56797a [type=0(none) addr=0x00007fc8ac5679d0 offset=13]
         @0x00007fc8ac56797c: 3100
relocInfo@0x00007fc8ac56797c [type=6(runtime_call) addr=0x00007fc8ac5679d0 offset=0 format=1] | [destination=0x00007fc8ac500c60]
         @0x00007fc8ac56797e: 310f
relocInfo@0x00007fc8ac56797e [type=6(runtime_call) addr=0x00007fc8ac5679df offset=15 format=1] | [destination=0x00007fc8ac501ba0]
         @0x00007fc8ac567980: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Dependencies:
Dependency of type evol_method
  method  = *{method} {0x00007fc87d0943c8} 'test' '(II)I' in 'Test'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ExceptionHandlerTable (size = 0 bytes)
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
ImplicitExceptionTable is empty
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded oops:
#0: 0x0000000000000000 nullptr-oop
#1: 0x00000006357f0c98 a 'com/sun/tools/javac/launcher/MemoryClassLoader'{0x00000006357f0c98}
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Recorded metadata:
#0: 0x0000000000000000 nullptr-oop
#1: 0x00007fc87d0943c8 {method} {0x00007fc87d0943c8} 'test' '(II)I' in 'Test'
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Done
------------------------------------------------------------------------
static Test::test(II)I
  interpreter_invocation_count:        6784
  invocation_counter:                  6784
  backedge_counter:                       0
  decompile_count:                        0
  mdo size: 384 bytes

   0 iload_0
   1 iload_1
   2 iadd
   3 ireturn
------------------------------------------------------------------------
Total MDO size: 384 bytes
</code></pre><p></p></div></details><p>Давайте посмотрим на некоторые детали.</p><pre><code class="assembly">#r018 rsi   : parm 0: int
#r016 rdx   : parm 1: int</code></pre><p>Мы видим, что два аргумента типа <code>int</code> компилируются таким образом, чтобы оказаться в CPU регистрах <code>rsi</code> и <code>rdx</code>. </p><details class="spoiler"><summary>Комментарий от редакции Spring АйО</summary><div class="spoiler__content"><p><code>rsi</code>, <code>rdx</code>, а далее <code>rax</code> — это все 64-битные регистры x86 CPU, которыми оперирует x86-ассемблер. При этом <code>rax</code> часто используется в различных calling convention как регистр для возвращаемого значения функции.

То есть, на машине автора вызывающая функция <code>main</code> будет ожидать возвращаемое значение функции <code>test</code> в регистре <code>rax</code>, что характерно для большинства машин и архитектур.

Регистры <code>rsi</code> и <code>rdx</code>, как правило (хотя и не всегда), являются регистрами общего назначения и хранят произвольную информацию.</p></div></details><p>Это будет интересно, когда мы будем смотреть на ассемблерный код. Давайте сначала посмотрим на <code>OptoAssembly</code>, что представляет собой промежуточную форму ассемблерного типа, которая создается перед генерацией машинного кода:</p><pre><code class="assembly">------------------------ OptoAssembly for Compile_id = 85 -----------------------
#
#  int ( int, int )
#
000     N1: #	out( B1 ) &lt;- in( B1 )  Freq: 1

000     B1: #	out( N1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
000     # stack bang (96 bytes)
	pushq   rbp	# Save rbp
	subq    rsp, #16	# Create frame

01a     leal    RAX, [RSI + RDX]
01d     addq    rsp, 16	# Destroy frame
	popq    rbp
	cmpq    rsp, poll_offset[r15_thread] 
	ja      #safepoint_stub	# Safepoint: poll for GC

02c     ret
</code></pre><p>Важные инструкции здесь следующие:</p><ul><li><p><code>leal RAX, [RSI + RDX]</code>: по сути выполняет <code>rax = rsi + rdx</code>, то есть складывает два аргумента метода.</p></li><li><p><code>ret</code> возвращает значение в <code>rax</code>.</p></li></ul><p>Остальные инструкции относятся к поддержке стек-фреймов и выполнению <a href="https://shipilev.net/jvm/anatomy-quarks/22-safepoint-polls/">safepoint-poll</a>.</p><p>Отметим, что если вас интересует только ассемблерный код, вы можете напрямую использовать опцию <code>-XX:CompileCommand=printassembly,Test::*</code>, которая опускает вывод <code>OptoAssembly</code>.</p><p>Как таковой машинный код <code>x64</code> находится в блоке, приведенном позднее:</p><pre><code class="assembly">[Verified Entry Point]
  # {method} {0x00007fc87d0943c8} 'test' '(II)I' in 'Test'
  # parm0:    rsi       = int
  # parm1:    rdx       = int
  #           [sp+0x20]  (sp of caller)
 ;; N1: #	out( B1 ) &lt;- in( B1 )  Freq: 1
 ;; B1: #	out( N1 ) &lt;- BLOCK HEAD IS JUNK  Freq: 1
  0x00007fc8ac567980:   mov    %eax,-0x18000(%rsp)
  0x00007fc8ac567987:   push   %rbp
  0x00007fc8ac567988:   sub    $0x10,%rsp
  0x00007fc8ac56798c:   cmpl   $0x0,0x20(%r15)
  0x00007fc8ac567994:   jne    0x00007fc8ac5679c3           ;*synchronization entry
                                                            ; - Test::test@-1 (line 17)
  0x00007fc8ac56799a:   lea    (%rsi,%rdx,1),%eax
  0x00007fc8ac56799d:   add    $0x10,%rsp
  0x00007fc8ac5679a1:   pop    %rbp
  0x00007fc8ac5679a2:   cmp    0x28(%r15),%rsp              ;   {poll_return}
  0x00007fc8ac5679a6:   ja     0x00007fc8ac5679ad
  0x00007fc8ac5679ac:   retq   
  0x00007fc8ac5679ad:   movabs $0x7fc8ac5679a2,%r10         ;   {internal_word}
  0x00007fc8ac5679b7:   mov    %r10,0x498(%r15)
  0x00007fc8ac5679be:   jmpq   0x00007fc8ac500760           ;   {runtime_call SafepointBlob}
  0x00007fc8ac5679c3:   callq  Stub::nmethod_entry_barrier  ;   {runtime_call StubRoutines (final stubs)}
  0x00007fc8ac5679c8:   jmpq   0x00007fc8ac56799a
  0x00007fc8ac5679cd:   hlt    
  0x00007fc8ac5679ce:   hlt    
  0x00007fc8ac5679cf:   hlt    
[Exception Handler]
  0x00007fc8ac5679d0:   jmpq   0x00007fc8ac500c60           ;   {no_reloc}
[Deopt Handler Code]
  0x00007fc8ac5679d5:   callq  0x00007fc8ac5679da
  0x00007fc8ac5679da:   subq   $0x5,(%rsp)
  0x00007fc8ac5679df:   jmpq   0x00007fc8ac501ba0           ;   {runtime_call DeoptimizationBlob}
</code></pre><p>Вам придется установить дизассемблер <code>hsdis</code>, иначе вы будете видеть здесь только байты (см. <a href="https://blogs.oracle.com/javamagazine/post/java-hotspot-hsdis-disassembler">этот блог-пост</a> и <a href="https://wiki.openjdk.org/display/HotSpot/PrintAssembly">эту вики</a>).</p><p>Теперь этот код представлен в словесной форме, но он все еще напрямую описывает, что происходит в CPU. Опять же, наиболее важные для нас инструкции следующие:</p><ul><li><p><code>lea (%rsi,%rdx,1),%eax</code></p></li><li><p><code>retq</code></p></li></ul><p>Где-то ближе к концу мы опять находим bytecode:</p><pre><code class="assembly">  0 iload_0
   1 iload_1
   2 iadd
   3 ireturn</code></pre><p>Я советую вам взять этот пример и немного с ним поиграться. Посмотрите, как изменения в методе <code>Test::test</code> влияют на скомпилированный и на скомпилированный ассемблерный код.</p><hr/><figure class="full-width"><img data-src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/c16/4b2/4fe/c164b24fe67857325369e7d0e25ab10e.png" height="520" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/c16/4b2/4fe/c164b24fe67857325369e7d0e25ab10e.png" width="1600"/></figure><p><a href="https://www.springnow.ru">Регистрируйтесь</a> на главную конференцию про Spring на русском языке от сообщества Spring АйО! В мероприятии примут участие не только наши эксперты, но и приглашенные лидеры индустрии.</p><p></p></div></div></div><!-- --><!-- --></div><!-- --><!-- --></div><!--]--><!-- --><div class="tm-article-presenter__meta" data-test-id="article-meta-links"><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Теги:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[java]"><span>java</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[c2]"><span>c2</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[compiler]"><span>compiler</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[jit]"><span>jit</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[jit-%D0%BA%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%82%D0%BE%D1%80]"><span>jit-компилятор</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[jit-%D0%BA%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%86%D0%B8%D1%8F]"><span>jit-компиляция</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[bytecode]"><span>bytecode</span></a><!--]--></li><!--]--><!-- --></ul></div><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Хабы:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/companies/spring_aio/articles/"><!--[--><span>Блог компании Spring АйО</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/hubs/java/"><!--[--><span>Java</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/hubs/kotlin/"><!--[--><span>Kotlin</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/hubs/programming/"><!--[--><span>Программирование</span><!--]--></a><!--]--></li><!--]--><!-- --></ul></div></div><!-- --><!--]--></article><!--]--></div><!-- --></div><div class="tm-article-sticky-panel" data-test-id="article-sticky-panel" style=""><div class="tm-data-icons tm-data-icons tm-data-icons_space-big tm-article-sticky-panel__icons" data-test-id="article-stats-icons"><div class="tm-article-rating tm-data-icons__item"><div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-article tm-article-rating__votes-switcher" title="Всего голосов 10: ↑10 и ↓0"><button class="tm-votes-lever__button" data-test-id="votes-lever-upvote-button" title="Нравится" type="button"><svg class="tm-svg-img tm-votes-lever__icon" height="24" width="24"><title>Нравится</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-vote"></use></svg></button><div class="tm-votes-lever__score tm-votes-lever__score_appearance-article tm-votes-lever__score"><!--[--><span><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter_positive tm-votes-lever__score-counter" data-test-id="votes-score-counter">+11</span></span><!--]--></div><button class="tm-votes-lever__button" data-test-id="votes-lever-downvote-button" title="Не нравится" type="button"><svg class="tm-svg-img tm-votes-lever__icon tm-votes-lever__icon_arrow-down" height="24" width="24"><title>Не нравится</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-vote"></use></svg></button></div><!--teleport start--><!--teleport end--><!-- --></div><!-- --><!-- --><button class="bookmarks-button tm-data-icons__item" title="Добавить в закладки" type="button"><span class="tm-svg-icon__wrapper bookmarks-button__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Добавить в закладки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-favorite"></use></svg></span><span class="bookmarks-button__counter" title="Количество пользователей, добавивших публикацию в закладки">34</span></button><div class="tm-sharing tm-data-icons__item" title="Поделиться"><button class="tm-sharing__button" type="button"><svg class="tm-sharing__icon" viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M13.8 13.8V18l7.2-6.6L13.8 5v3.9C5 8.9 3 18.6 3 18.6c2.5-4.4 6-4.8 10.8-4.8z" fill="currentColor"></path></svg></button><!--teleport start--><!--teleport end--></div><div class="tm-article-comments-counter-link tm-data-icons__item" title="Читать комментарии"><a class="tm-article-comments-counter-link__link" data-test-id="counter-comments" href="/ru/companies/spring_aio/articles/886142/comments/"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value">0</span><!--]--></a><!-- --></div><!--[--><!--[--><!--[--><!-- --><!--]--><!--]--><!--]--><!--teleport start--><!--teleport end--><!-- --></div></div></div><!--[--><!--]--><div class="tm-article-presenter__footer"><!--[--><!--[--><div class="tm-article-blocks"><!-- --><!--[--><section class="tm-block tm-block tm-block_spacing-bottom"><!-- --><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-balanced"><!--[--><div class="tm-article-author" data-test-id="article-author-info"><!--[--><!--[--><div class="tm-article-author__company"><div class="tm-article-author__company-card"><div class="tm-company-snippet"><a class="tm-company-snippet__logo-link" href="/ru/companies/spring_aio/profile/"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="40" src="//habrastorage.org/getpro/habr/company/8f1/91a/458/8f191a4584b8fab12d15af23e447a1d5.png" width="40"/></div></a><div class="tm-company-snippet__info"><a class="tm-company-snippet__title" data-test-id="company-title" href="/ru/companies/spring_aio/profile/"><span>Spring АйО</span></a><div class="tm-company-snippet__description">Компания</div></div></div><div class="tm-article-author__buttons"><!-- --><!-- --></div></div><div class="tm-article-author__company-contacts"><!--[--><a class="tm-article-author__contact" href="https://telegram.me/spring_aio" rel="noopener" target="_blank">Telegram</a><a class="tm-article-author__contact" href="https://www.springnow.ru" rel="noopener" target="_blank">Сайт</a><!--]--></div><div class="tm-article-author__separator"></div></div><!--]--><!--]--><div class="tm-user-card tm-user-card tm-user-card_variant-article tm-article-author__user-card" data-async-called="true"><div class="tm-user-card__info-container"><div class="tm-user-card__header"><div class="tm-user-card__header-data"><a class="tm-user-card__userpic tm-user-card__userpic_size-40" href="/ru/users/spring_aio/"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" src="//habrastorage.org/getpro/habr/avatars/8e0/5e8/a1c/8e05e8a1c5fd4560f661efb2cb00e77e.png"/></div></a><div class="tm-user-card__meta"><div class="tm-counter-container tm-karma tm-karma" title=" 85 голосов "><div class="tm-counter-container__header"><!--[--><div class="karma-display positive" data-v-7635202e="">45</div><!-- --><!--]--></div><div class="tm-counter-container__footer"><!--[--><div class="tm-karma__text">Карма</div><!--teleport start--><!--teleport end--><!--]--></div></div><div class="tm-counter-container" title="Рейтинг пользователя"><div class="tm-counter-container__header"><!--[--><!--[--><!--]--><div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!-- --><div class="tm-votes-lever__score tm-votes-lever__score_appearance-rating tm-votes-lever__score_no-margin tm-votes-lever__score"><!--[--><span><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter_rating tm-votes-lever__score-counter" data-test-id="votes-score-counter">105.9</span></span><!--]--></div><!-- --></div><!--]--></div><div class="tm-counter-container__footer"><!--[--><span class="tm-rating__text tm-rating__text">Рейтинг</span><!--]--></div></div></div></div></div><div class="tm-user-card__info tm-user-card__info_variant-article tm-user-card__info"><div class="tm-user-card__title tm-user-card__title_variant-article tm-user-card__title"><span class="tm-user-card__name tm-user-card__name_variant-article tm-user-card__name">Spring АйО</span><a class="tm-user-card__nickname tm-user-card__nickname tm-user-card__nickname_variant-article" href="/ru/users/spring_aio/"> @spring_aio</a><!-- --></div><p class="tm-user-card__short-info tm-user-card__short-info_variant-article tm-user-card__short-info" data-test-id="user-card-speciality">Главный по Spring</p></div></div><div class="tm-user-card__buttons tm-user-card__buttons_variant-article tm-user-card__buttons"><!-- --><div class="tm-user-card__button"><div class="tm-button-follow tm-user-card__button-follow"><!-- --><button class="tm-button-follow__button tm-button-follow__button_big" data-test-id="follow-button" type="button">Подписаться</button></div></div><!-- --><div class="tm-user-card__button tm-user-card__button_write" data-test-id="user-card-conversations"><svg class="tm-svg-img tm-user-card__button-icon" height="16" width="16"><title>Отправить сообщение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#mail"></use></svg></div><!-- --></div><!-- --></div><!-- --></div><!--]--></div><!--]--><!-- --></section><!-- --><!--[--><!--]--><!--]--><div class="tm-article-blocks__comments"><div class="tm-article-page-comments" id="publication-comments"><div><!--[--><div class="tm-article-comments-counter-link tm-article-comments-counter-button"><a class="tm-article-comments-counter-link__link tm-article-comments-counter-link__link_button-style" data-test-id="counter-comments" href="/ru/companies/spring_aio/articles/886142/comments/"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon tm-article-comments-counter-link__icon_contrasted" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value tm-article-comments-counter-link__value_contrasted"> Комментировать </span><!--]--></a><!-- --></div><!--]--></div></div></div><!--[--><!--[--><!--]--><section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title tm-block__title_variant-large">Публикации</h2><!--[--><!--]--></div><!-- --></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-condensed-slim"><!--[--><!--[--><div class="tm-tabs tm-tabs"><div class=""><!--[--><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_active tm-tabs__tab-link_slim tm-tabs__tab-link">Лучшие за сутки</button></span><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_slim tm-tabs__tab-link">Похожие</button></span><!--]--></div><!-- --></div><div class="similar-and-daily__tab-view"><div class="placeholder-wrapper"><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><div class="tm-placeholder-article-cards"><!--[--><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><!--]--></div><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --></div><!-- --></div><!--]--><!--]--></div><!--]--><!-- --></section><!--[--><!--]--><!-- --><!--[--><!--]--><!--]--></div><!--]--><!--]--></div></div><!--]--><!--]--></div></div><div class="tm-page__sidebar"><!--[--><div class="tm-layout-sidebar"><div class="tm-layout-sidebar__placeholder_initial"></div><div class="tm-sexy-sidebar_initial tm-sexy-sidebar" style="margin-top:0px;"><!--[--><!--]--><!-- --><div class="tm-layout-sidebar__placeholder_initial"></div><!--[--><section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Информация</h2><!--[--><!--]--></div><!-- --></header><!--[--><div class="tm-block__body tm-block__body"><!--[--><div class="tm-company-basic-info"><dl class="tm-description-list tm-description-list tm-description-list_variant-columns-nowrap"><dt class="tm-description-list__title tm-description-list__title_variant-columns-nowrap tm-description-list__title">Сайт</dt><dd class="tm-description-list__body tm-description-list__body_variant-columns-nowrap tm-description-list__body"><!--[--><a class="tm-company-basic-info__link" href="https://t.me/spring_aio" target="_blank">t.me</a><!--]--></dd></dl><dl class="tm-description-list tm-description-list tm-description-list_variant-columns-nowrap"><dt class="tm-description-list__title tm-description-list__title_variant-columns-nowrap tm-description-list__title">Дата регистрации</dt><dd class="tm-description-list__body tm-description-list__body_variant-columns-nowrap tm-description-list__body"><!--[--><time datetime="2024-05-27T07:08:22.000Z" title="2024-05-27, 10:08">27  мая  2024</time><!--]--></dd></dl><!-- --><dl class="tm-description-list tm-description-list tm-description-list_variant-columns-nowrap"><dt class="tm-description-list__title tm-description-list__title_variant-columns-nowrap tm-description-list__title">Численность</dt><dd class="tm-description-list__body tm-description-list__body_variant-columns-nowrap tm-description-list__body"><!--[-->11–30 человек<!--]--></dd></dl><!-- --><!-- --></div><!--]--></div><!--]--><!-- --></section><div class="tm-company-widgets"><!--[--><!--]--></div><!-- --><!-- --><!--]--><!-- --></div></div><!--]--></div></div><!-- --><!--]--></div></div></main><!-- --></div><div class="tm-footer-menu"><div class="tm-page-width"><!--[--><div class="tm-footer-menu__container"><!--[--><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Ваш аккаунт</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a href="/kek/v1/auth/habrahabr/?back=/ru/companies/spring_aio/articles/886142/&amp;hl=ru" rel="nofollow" target="_self">Войти</a></li><li class="tm-footer-menu__list-item"><a href="/kek/v1/auth/habrahabr-register/?back=/ru/companies/spring_aio/articles/886142/&amp;hl=ru" rel="nofollow" target="_self">Регистрация</a></li><!--]--></ul></div></div><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Разделы</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/articles/">Статьи</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/news/">Новости</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/hubs/">Хабы</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/companies/">Компании</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/users/">Авторы</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/sandbox/">Песочница</a></li><!--]--></ul></div></div><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Информация</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/help/">Устройство сайта</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/authors/codex/">Для авторов</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/companies/corpblogs/">Для компаний</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/docs/transparency/">Документы</a></li><li class="tm-footer-menu__list-item"><a href="https://account.habr.com/info/agreement/?hl=ru_RU" target="_blank">Соглашение</a></li><li class="tm-footer-menu__list-item"><a href="https://account.habr.com/info/confidential/?hl=ru_RU" target="_blank">Конфиденциальность</a></li><!--]--></ul></div></div><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Услуги</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/corporate-blogs/" target="_blank">Корпоративный блог</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/advertising/" target="_blank">Медийная реклама</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/native-special/" target="_blank">Нативные проекты</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/education-programs/" target="_blank">Образовательные программы</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/hello-startup/" target="_blank">Стартапам</a></li><!--]--></ul></div></div><!--]--></div><!--]--></div></div><div class="tm-footer"><div class="tm-page-width"><!--[--><div class="tm-footer__container"><!-- --><div class="tm-footer__social"><!--[--><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.facebook.com/habrahabr.ru" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Facebook</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-facebook"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://twitter.com/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Twitter</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-twitter"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://vk.com/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>VK</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-vk"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://telegram.me/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Telegram</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-telegram"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.youtube.com/channel/UCd_sTwKqVrweTt4oAKY5y4w" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Youtube</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-youtube"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://dzen.ru/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Яндекс Дзен</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-dzen"></use></svg></a><!--]--></div><!--teleport start--><!--teleport end--><button class="tm-footer__link"><!-- --> Настройка языка</button><a class="tm-footer__link" href="/ru/feedback/">Техническая поддержка</a><div class="tm-footer-copyright"><span class="tm-copyright"><span class="tm-copyright__years">© 2006–2025, </span><span class="tm-copyright__name"><a class="tm-copyright__link" href="https://company.habr.com/" rel="noopener" target="_blank">Habr</a></span></span></div></div><!--]--></div></div><!-- --><!--]--></div><!-- --></div></div>
<div id="overlays"><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--></div>
</body>
</html>
