<!DOCTYPE html>

<html lang="ru">
<head>
<title>Глубокое погружение в процедуру запуска JVM / Хабр</title>
</head>
<body>
<div id="mount"><div data-async-called="true" id="app"><div class="tm-layout__wrapper"><!--[--><!-- --><div></div><div class="tm-feature tm-feature"><!-- --></div><header class="tm-header" data-test-id="header"><div class="tm-page-width"><!--[--><div class="tm-header__container"><div class="tm-header__burger-nav" data-test-id="burger-nav"><button class="tm-header__button tm-header__button_burger" type="button"><svg class="tm-svg-img tm-header__icon tm-header__icon-burger" height="16" width="16"><title>Меню</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#header-burger"></use></svg></button></div><span class="tm-header__logo-wrap"><a class="tm-header__logo tm-header__logo_hl-ru tm-header__logo" href="/ru/"><svg class="tm-svg-img tm-header__icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a><span class="tm-header__beta-sign" style="display:none;">β</span></span><!-- --><div class="tm-header-user-menu tm-header_user-menu"><a class="tm-header-user-menu__item tm-header-user-menu__search" data-test-id="search-button" href="/ru/search/"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_search" height="24" width="24"><title>Поиск</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#search"></use></svg></a><!-- --><!-- --><div class="tm-header-user-menu__item tm-header-user-menu__write"><div><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_write" height="24" width="24"><title>Написать публикацию</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#write"></use></svg></div><!-- --></div><!--[--><div class="tm-header-user-menu__item"><button class="tm-header-user-menu__toggle" data-test-id="user-menu-settings"><svg class="tm-svg-img tm-header-user-menu__icon" height="24" width="24"><title>Настройки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#page-settings"></use></svg></button></div><a class="tm-header-user-menu__item" href="https://habr.com/kek/v1/auth/habrahabr/?back=/ru/companies/spring_aio/articles/881128/&amp;hl=ru" rel="nofollow"><!--[--><button class="btn btn_solid btn_small tm-header-user-menu__login" type="button"><!--[-->Войти<!--]--></button><!--]--></a><!--]--><!-- --><!--teleport start--><!--teleport end--><!-- --></div></div><!--]--></div></header><div class="tm-layout"><div class="tm-page-progress-bar"></div><!-- --><!-- --><div class="tm-page-width"><!--[--><!--]--></div><main class="tm-layout__container"><div class="tm-page" companyname="spring_aio" data-async-called="true" hl="ru" style="--0c809c5a:16px;--a086013e:100%;--7c457026:0;"><div class="tm-page-width"><!--[--><div class="tm-page__header"><!--[--><!--]--></div><div class="tm-page__wrapper"><div class="tm-page__main_has-sidebar tm-page__main"><div class="pull-down"><!-- --><div class="pull-down__header" style="height:0px;"><div class="pull-down__content" style="bottom:10px;"><svg class="tm-svg-img pull-down__icon pull-down__arrow" height="24" width="24"><title>Обновить</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#pull-arrow"></use></svg></div></div><!--[--><!--[--><div class="tm-article-presenter"><!--[--><!--]--><div class="tm-article-presenter__body" data-test-id="article-body"><div class="tm-misprint-area"><div class="tm-misprint-area__wrapper"><!--[--><article class="tm-article-presenter__content tm-article-presenter__content_narrow"><!--[--><div class="tm-article-presenter__header"><!--[--><!--]--><div class="tm-article-snippet tm-article-snippet tm-article-presenter__snippet"><!--[--><!--]--><div class="tm-article-snippet__meta-container"><div class="tm-article-snippet__meta"><span class="tm-user-info tm-article-snippet__author"><a class="tm-user-info__userpic" data-test-id="user-info-pic" href="/ru/users/spring_aio/" title="spring_aio"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="32" src="//habrastorage.org/r/w64/getpro/habr/avatars/8e0/5e8/a1c/8e05e8a1c5fd4560f661efb2cb00e77e.png" width="32"/></div></a><span class="tm-user-info__user tm-user-info__user_appearance-default" data-test-id="user-info-description"><a class="tm-user-info__username" href="/ru/users/spring_aio/">spring_aio <!-- --></a><!--[--><span class="tm-article-datetime-published"><time datetime="2025-02-11T11:15:23.000Z" title="2025-02-11, 14:15">11  фев   в 14:15</time></span><!--]--></span></span></div><!-- --></div><h1 class="tm-title tm-title_h1" data-test-id="articleTitle" lang="ru"><span>Глубокое погружение в процедуру запуска JVM</span></h1><div class="tm-article-snippet__stats" data-test-id="articleStats"><div class="tm-article-complexity tm-article-complexity_complexity-low"><span class="tm-svg-icon__wrapper tm-article-complexity__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Уровень сложности</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#complexity-low"></use></svg></span><span class="tm-article-complexity__label">Простой</span></div><div class="tm-article-reading-time"><span class="tm-svg-icon__wrapper tm-article-reading-time__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Время на прочтение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#clock"></use></svg></span><span class="tm-article-reading-time__label">17 мин</span></div><span class="tm-icon-counter tm-data-icons__item"><svg class="tm-svg-img tm-icon-counter__icon" height="24" width="24"><title>Количество просмотров</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-views"></use></svg><span class="tm-icon-counter__value" title="7054">7.1K</span></span></div><div class="tm-publication-hubs__container" data-test-id="articleHubsList"><div class="tm-publication-hubs"><!--[--><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/companies/spring_aio/articles/"><!--[--><span>Блог компании Spring АйО</span><!-- --><!--]--></a></span><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/hubs/java/"><!--[--><span>Java</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/hubs/kotlin/"><!--[--><span>Kotlin</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/hubs/programming/"><!--[--><span>Программирование</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><!--]--></div></div><div class="tm-article-labels" data-test-id="articleLabels"><div class="tm-article-labels__container"><div class="tm-publication-label tm-publication-label_variant-review"><span>Обзор</span></div><!--[--><div class="tm-publication-label tm-publication-label_variant-translation"><span>Перевод</span></div><!--]--></div></div><!-- --><!-- --></div></div><!--[--><div class="tm-article-presenter__origin"><a class="tm-article-presenter__origin-link" href="https://inside.java/2025/01/28/jvm-start-up/" target="_blank">Автор оригинала: <span>Billy Korando</span></a></div><div class="tm-article-body" data-gallery-root="" lang="ru"><div><!--[--><!--]--></div><div id="post-content-body"><div><div class="article-formatted-body article-formatted-body article-formatted-body_version-2"><div xmlns="http://www.w3.org/1999/xhtml"><p>Новый перевод от команды <a href="https://t.me/+QmrKn0wA8CdkNjAy">Spring АйО</a> расскажет вам, что происходит при запуске самого простого приложения на Java, какие шаги выполняет JVM, сколько классов ей необходимо загрузить, чтобы просто написать “Hello World!” и как все это выглядит на уровне byte code.  </p><hr/><p>Когда вы запускаете приложение на Java, может возникать тенденция поверить в то, что единственный выполняемый в этот момент код — это Java byte code, передаваемый JVM, то есть файлы <code>.class</code>, скомпилированные <code>javac</code>. На самом деле во время запуска приложения JVM проходит через сложную последовательность шагов, создавая своего рода маленькую вселенную, в которой приложение будет работать. В этой статье мы посмотрим на все шаги, через которые JVM проходит между <code>$ java</code> и выводом строки <code>Hello World</code>. Если вы предпочитаете видео формат, есть также <a href="https://www.youtube.com/watch?v=ED1oc7gn5uY">видео на YouTube</a> на канале Java, где рассказывается все то же самое (но на английском — прим. пер.). </p><h3>Введение</h3><p>Чтобы этот обзор процедуры запуска не превратился в попытку «вскипятить океан», мы добавим кое-какие ограничения, которые я буду использовать при описании процесса:</p><ol><li><p>Я буду описывать процедуру запуска JVM, как она происходит в JDK 23. Спецификацию JVM для Java SE 23 <a href="https://docs.oracle.com/javase/specs/jvms/se23/html/index.html">можно посмотреть здесь</a>.</p></li><li><p>Я буду использовать реализацию<a href="https://en.wikipedia.org/wiki/HotSpot_(virtual_machine)"> HotSpot JVM</a> в качестве примера. Это наиболее часто используемая реализация JVM, многие популярные дистрибутивы JDK используют HotSpot JVM или ее производные. Альтернативные реализации JVM могут слегка отличаться внутренним поведением.</p></li><li><p>Ну и наконец, главным примером кода, используемым для описания процедуры старта JVM, будет <code>HelloWorld</code>, поскольку это приложение, хоть и является самым простым на свете, все еще включает все ключевые части процедуры запуска JVM.</p></li></ol><p>Несмотря на эти ограничения, после прочтения этой статьи у вас появится довольно полное представление о процессах, через которые проходит JVM при запуске, как и о том, для чего они нужны. Это знание поможет вам при отладке приложения, если при его старте появятся проблемы, а в некоторых особых случаях будет полезно и для улучшения производительности. Хотя об этом мы поговорим ближе к концу статьи. </p><h3>Инициализация JVM</h3><p>Когда пользователь вводит команду <code>java</code>, начинается процедура старта JVM, при этом вызывается функция JNI (Java Native Interface), <code>JNI_CreateJavaVM()</code>, код этой функции вы можете просмотреть <a href="https://github.com/openjdk/jdk/blob/jdk-23%2B0/src/hotspot/share/prims/jni.cpp#L3661C1-L3661C93">здесь</a>. Эта функция JNI сама по себе выполняет несколько важных процессов. </p><h4>Валидация ввода пользователя </h4><p>Первый шаг в процедуре старта JVM — это валидация введенных пользователем данных: JVM аргументы, артефакт для выполнения и classpath. Ниже приведен фрагмент лога, который показывает, как происходит валидация:</p><pre><code>[arguments] VM Arguments:
[arguments] jvm_args: -Xlog:all=trace 
[arguments] java_command: HelloWorld
[arguments] java_class_path (initial): .
[arguments] Launcher Type: SUN_STANDARD</code></pre><p><strong>💡 Примечание:</strong> Вы можете увидеть этот лог, воспользовавшись <code>-Xlog:all=trace</code> в JVMarg. </p><h4>Обнаружение системных ресурсов</h4><p>После валидации ввода пользователя следующим шагом становится обнаружение доступных ресурсов системы: процессоров, системной памяти и системных сервисов, которые может использовать JVM. Доступность системных ресурсов может повлиять на принимаемые JVM решения, которые основаны на ее внутренней эвристике. Например, сборщик мусора, выбираемый JVM по умолчанию, будет зависеть от доступного CPU и системной памяти, однако во многих случаях внутреннюю эвристику JVM могут пересиливать явно заданные JVM аргументы.</p><pre><code>[os       ] Initial active processor count set to 11
[gc,heap  ]   Maximum heap size 9663676416
[gc,heap  ]   Initial heap size 603979776
[gc,heap  ]   Minimum heap size 1363144
[metaspace]  - commit_granule_bytes: 65536.
[metaspace]  - commit_granule_words: 8192.
[metaspace]  - virtual_space_node_default_size: 8388608.
[metaspace]  - enlarge_chunks_in_place: 1.
[os       ] Use of CLOCK_MONOTONIC is supported
[os       ] Use of pthread_condattr_setclock is not supported</code></pre><h4>Подготовка окружения</h4><p>Когда JVM поняла, какие системные ресурсы ей доступны, она начинает готовить окружение. В этот момент реализация HotSpot JVM генерирует <code>hsprefdata</code> (данные о производительности HotSpot). Эти данные используются инструментами <code>JConsole</code> и <code>VisualVM</code> для инспекции и профилирования JVM. Эти данные обычно хранятся в системном каталоге <code>/tmp</code>. Ниже приведен пример того, как JVM создает эти данные для профилирования, и это будет продолжаться некоторое время в течение start-up-a приложения, параллельно другим процессам. </p><pre><code>[perf,datacreation] name = sun.rt._sync_Inflations, dtype = 11, variability = 2, units = 4, dsize = 8, vlen = 0, pad_length = 4, size = 56, on_c_heap = FALSE, address = 0x0000000100c2c020, data address = 0x0000000100c2c050</code></pre><p>Важным шагом в процедуре старта JVM является выбор сборщика мусора (англ. garbage collector или GC, прим. пер.). Выбор сборщика мусора может иметь серьезное влияние на производительность приложения. По умолчанию JVM будет выбирать из двух сборщиков, Serial GC и G1 GC, если другие сборщики не указаны в явном виде.</p><p>Начиная с JDK 23, JVM выбирает G1 GC по умолчанию, кроме тех случаев, когда в системе меньше 1792 МБ и/или только один процессор: в этом случае будет выбран Serial GC. Конечно, могут быть доступны для выбора и другие сборщики мусора, включая Parallel GC, ZGC и другие, в зависимости от используемой версии и дистрибутива JDK. Каждый из этих сборщиков мусора имеет свои показатели производительности и идеальные рабочие нагрузки.</p><pre><code>[gc           ] Using G1
[gc,heap,coops] Trying to allocate at address 0x00000005c0000000 heap of size 0x240000000
[os,map       ] Reserved [0x00000005c0000000 - 0x0000000800000000), (9663676416 bytes)
[gc,heap,coops] Heap address: 0x00000005c0000000, size: 9216 MB, Compressed Oops mode: Zero based, Oop shift amount: 3</code></pre><h4>CDS</h4><p>Примерно на этой стадии JVM начинает искать CDS архив. CDS расшифровывается как Cached Data Storage (закешированное хранилище данных), прежнее толкование этой аббревиатуры — Class Data Storage (хранилище данных классов). CDS архив — это архив файлов класса, обработанных заранее для улучшения скорости процедуры старта JVM . Мы расскажем о том, как улучшается производительность во время старта JVM за счет CDS, в разделе «Связывание классов». Однако, не стоит засорять себе память аббревиатурой «CDS», она устарела, мы поговорим об этом, когда будем рассказывать о будущем процедуры старта JVM.</p><details class="spoiler"><summary>Комментарий от редакции Spring АйО:</summary><div class="spoiler__content"><p>На деле, CDS может расшифровываться как Class Data Sharing, Class Data Storage и в более новых версиях JDK — Cached Data Storage. В то время как первые два компонента означают одно и то же, Cached Data Storage, хоть и совсем немного, другим понятием. Более подробно в <a href="https://stackoverflow.com/a/79426816/16785907">ответе эксперта на StackOverFlow</a>.</p></div></details><details class="spoiler"><summary>Комментарий от редакции Spring АйО:</summary><div class="spoiler__content"><p>"Связывание классов" в других источниках может называться "Linkage" или "линковка классов"</p></div></details><pre><code>[cds] trying to map [Java home]/lib/server/classes.jsa
[cds] Opened archive [Java home]/lib/server/classes.jsa.</code></pre><h4>Создание пространства под методы</h4><p>Один из последних шагов инициализации JVM — это создание пространства под методы (method area). Это специальная локация в off-heap памяти, где будут храниться данные классов по мере того, как JVM будет их загружать. В то время как пространство под методы не располагается внутри кучи JVM, сборщик мусора все же управляет им. Данные классов, сохраненные в пространстве под методы, допустимо удалять, если загрузчик класса, связанный с этими данными, уже не используется.  </p><p><strong>💡 Примечание:</strong> Если вы используете реализацию HotSpot для JVM, пространство под методы будет называться метапространством <em>(metaspace)</em>.</p><details class="spoiler"><summary>Комментарий от редакции Spring АйО:</summary><div class="spoiler__content"><p>В общем случае, Method Area — это просто пространство, определенное в JLS, где хранится некоторая метаинформация, например "run-time constant pool, field and method data".</p><p>И в мире Java существует огромное количество споров на тему того:</p><p>- Является ли Metaspace реализацией Method Area в HotSpot JVM<br/>- Является ли Method Area подмножеством Metaspace в HotSpot JVM, иными словами Metaspace содержит Method Area и еще что-нибудь и т.д.</p><p>На деле тут четкого ответа нет. Но, как правило, если Вы будете говорить, что Method Area это Metaspace в HotSpot JVM, в целом, грубо, это верно и Вас поймут. </p></div></details><pre><code>[metaspace,map] Trying to reserve at an EOR-compatible address
[metaspace,map] Mapped at 0x00001fff00000000</code></pre><h3>Загрузка, связывание и инициализация классов </h3><p>После завершения первых шагов, которые можно назвать «работой по домашнему хозяйству» начинается собственно процедура старта JVM, включающая в себя загрузку классов, их связывание и инициализацию.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/2d8/840/de0/2d8840de063330010462861993b0cf4f.png" height="608" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/2d8/840/de0/2d8840de063330010462861993b0cf4f.png" width="1080"/></figure><p>В то время как <a href="https://docs.oracle.com/javase/specs/jvms/se23/html/index.html">спецификация JVM</a> описывает эти процессы последовательно, в разделах 5.3-5.5, в HotSpot JVM эти процессы не обязаны происходить именно в таком порядке для отдельно взятого класса. Как отмечено в нижней части схемы, Разрешение (Resolution), которое является частью процесса связывания классов, может произойти на любом этапе, как до начала проверки, так и после инициализации классов. Некоторые процессы, такие как инициализация классов, технически вообще не обязаны происходить. Мы расскажем об этом подробнее в следующих разделах.  </p><h4>Загрузка классов</h4><p>Процесс загрузки классов описывается в <a href="https://docs.oracle.com/javase/specs/jvms/se23/html/jvms-5.html#jvms-5.3">разделе 5.3 JVM спецификации</a>. Загрузка классов — это трехшаговый процесс, при котором JVM находит бинарное представление класса или интерфейса, извлекает из него класс или интерфейс и загружает эту информацию в пространство под методы (Method Area) в JVM, которое, напомним, называется “metaspace” в реализации HotSpot JVM.</p><p>Одна из сильных сторон JVM, благодаря которой она стала такой популярной платформой — это ее способность <em>динамически</em> загружать классы, что позволяет JVM  загружать сгенерированные классы по мере необходимости в течение всего рантайма JVM. Эта ее способность используется многими популярными фреймворками и инструментами, как, например, Spring и Mockito. На самом деле даже сама JVM может генерировать код по мере необходимости, когда она использует лямбды, как это происходит в <a href="https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/lang/invoke/InnerClassLambdaMetafactory.java">классе InnerClassLambdaMetafactory</a>.</p><p>JVM поддерживает два способа загрузки классов, либо через загрузчик классов bootstrap (<a href="https://docs.oracle.com/javase/specs/jvms/se23/html/jvms-5.html#jvms-5.3.1">5.3.1</a>), либо через кастомизированный загрузчик классов (<a href="https://docs.oracle.com/javase/specs/jvms/se23/html/jvms-5.html#jvms-5.3.2">5.3.2</a>). Во втором случае это будет класс, расширяющий класс <a href="https://github.com/openjdk/jdk/blob/jdk-23%2B0/src/java.base/share/classes/java/lang/ClassLoader.java">java.lang.ClassLoader</a>. На практике кастомизированные загрузчики классов часто будут определяться как библиотеки от третьих сторон, чтобы поддержать поведение, свойственное такой библиотеке.</p><p>В рамках этой статьи мы сфокусируемся на загрузчике bootstrap, который является специальным загрузчиком классов, написанным на машинном коде и предоставляемым JVM. Он инстанцируется на поздних этапах работы метода <code>JNI_CreateJavaVM()</code>.</p><p>Чтобы лучше понимать процесс загрузки классов, нам надо посмотреть на проект <code>HelloWorld</code> как его видит JVM:</p><pre><code class="java">public class HelloWorld extends Object {
	public static void main(String[] args){
		System.out.println(“Hello World!”);
	}
}</code></pre><p>Все классы так или иначе расширяют <code>java.lang.Object</code>. Чтобы JVM могла загрузить <code>HelloWorld</code>, прежде всего ей надо загрузить все классы, от которых <code>HelloWorld</code> явно или неявно зависит. Давайте посмотрим на сигнатуры методов в <code>java.lang.Object</code>: </p><pre><code class="java">public class Object {
    public Object() {}
    public final native Class&lt;?&gt; getClass()
    public native int hashCode()
    public boolean equals(Object obj)
    protected native Object clone() throws CloneNotSupportedException
    public String toString()
    public final native void notify();
    public final native void notifyAll();
    public final void wait() throws InterruptedException
    public final void wait(long timeoutMillis) throws InterruptedException
    public final void wait(long timeoutMillis, int nanos) throws InterruptedException
    protected void finalize() throws Throwable { }
}</code></pre><p>Два важных метода здесь — это <code>public final native Class&lt;?&gt; getClass()</code> и <code>public String toString()</code>, поскольку оба эти метода ссылаются на другой класс: <code>java.lang.Class</code> и <code>java.lang.String</code> соответственно.</p><p>Если мы посмотрим на <code>java.lang.String</code>, он реализует несколько интерфейсов:</p><pre><code class="java">public final class String
implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence,
Constable, ConstantDesc</code></pre><p>Чтобы загрузить класс <code>java.lang.String</code>, сначала надо загрузить все интерфейсы, которые он реализует, и если мы посмотрим на лог загрузки, мы увидим, что эти классы загружаются в том же порядке, в котором они были определены, при этом  <code>java.lang.String</code> загружается последним: </p><pre><code>[class,load] java.io.Serializable source: jrt:/java.base
[class,load] java.lang.Comparable source: jrt:/java.base
[class,load] java.lang.CharSequence source: jrt:/java.base
[class,load] java.lang.constant.Constable source: jrt:/java.base
[class,load] java.lang.constant.ConstantDesc source: jrt:/java.base
[class,load] java.lang.String source: jrt:/java.base</code></pre><p>Если мы перейдем к <code>java.lang.Class</code>, мы увидим, что и он реализует несколько интерфейсов, и некоторые из этих интерфейсов те же самые, которые реализовывает <code>java.lang.String</code>, а именно <code>java.io.Serializable</code> и <code>java.lang.constant.Constable</code>. </p><pre><code class="java">public final class Class&lt;T&gt; 
implements java.io.Serializable,GenericDeclaration,Type,AnnotatedElement,
TypeDescriptor.OfField&lt;Class&lt;?&gt;&gt;,Constable</code></pre><p>Если мы посмотрим на логи JVM, мы увидим, что интерфейсы снова загружаются в том порядке, в каком они были определены, и уже после них загружается класс  <code>java.lang.Class</code>. Классы <code>java.io.Serializable</code> и <code>java.lang.constant.Constable</code> загружены не будут, поскольку они загрузились раньше в процессе загрузки класса <code>java.lang.String</code>. </p><pre><code>[class,load] java.lang.reflect.AnnotatedElement source: jrt:/java.base
[class,load] java.lang.reflect.GenericDeclaration source: jrt:/java.base
[class,load] java.lang.reflect.Type source: jrt:/java.base
[class,load] java.lang.invoke.TypeDescriptor source: jrt:/java.base
[class,load] java.lang.invoke.TypeDescriptor$OfField source: jrt:/java.base
[class,load] java.lang.Class source: jrt:/java.base</code></pre><p><strong>💡 Примечание:</strong> Обычно JVM придерживается стратегии lazy для своих процессов, в данном случае для загрузки классов. Это означает, что класс загружается только тогда, когда на него активно ссылается другой класс, но поскольку <code>java.lang.Object</code> является тем корнем, из которого вырастают все классы Java, то JVM применит стратегию eager к классам <code>java.lang.Class</code> и <code>java.lang.String</code>. Если вы посмотрите на сигнатуры методов для <code>java.lang.Class</code> (<a href="https://docs.oracle.com/en/java/javase/23/docs/api/java.base/java/lang/Class.html">JavaDoc</a>) и <code>java.lang.String</code> (<a href="https://docs.oracle.com/en/java/javase/23/docs/api/java.base/java/lang/String.html">JavaDoc</a>), вы можете заметить, что многие из этих классов не будут загружаться при выполнении приложений, подобных <code>HelloWorld</code>. Например, никаких ссылок на <code>Optional&lt;String&gt; describeConstable()</code> здесь не будет, а значит загрузки <code>java.util.Optional</code> не произойдет. Это живой пример свойственной HotSpot стратегии lazy.</p><p>Процесс загрузки классов будет продолжаться на протяжении большей части процедуры старта JVM, а в случае настоящего приложения также и во время начала жизненного цикла самого приложения, пока не завершится со временем. Суммарно JVM загрузит примерно 450 классов для сценария <code>HelloWorld</code>, и именно поэтому я применил аналогию со вселенной, которую JVM создает при старте, поскольку тут реально очень много работы. </p><p>Продолжим погружаться во вселенную стартовой процедуры JVM и посмотрим на связывание классов.</p><h4>Связывание классов</h4><p>Связывание классов, описанное в разделе <a href="https://docs.oracle.com/javase/specs/jvms/se23/html/jvms-5.html#jvms-5.4">5.4 спецификации JVM</a>, является одним из наиболее комплексных процессов, так как включает три отдельных подпроцесса:</p><ul><li><p>Проверка (Verification) —<a href="https://docs.oracle.com/javase/specs/jvms/se23/html/jvms-5.html#jvms-5.4.1"> 5.4.1</a></p></li><li><p>Подготовка (Preparation) —<a href="https://docs.oracle.com/javase/specs/jvms/se23/html/jvms-5.html#jvms-5.4.2"> 5.4.2</a></p></li><li><p>Разрешение (Resolution) —<a href="https://docs.oracle.com/javase/specs/jvms/se23/html/jvms-5.html#jvms-5.4.3"> 5.4.3</a></p></li></ul><p>В рамках связывания классов присутствуют еще три процесса: контроль доступа (Access Control), переопределение методов (Method Overriding), и выбор метода (Method Selection), но о них мы в рамках данной статьи говорить не будем.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/217/a7e/0ae/217a7e0ae1db8d783b39b3159807264e.png" height="608" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/217/a7e/0ae/217a7e0ae1db8d783b39b3159807264e.png" width="1080"/></figure><p>Если вернуться к диаграмме, проверка, подготовка и разрешение не обязательно происходят в том порядке, в котором они будут описаны в этой статье. Разрешение может пройти раньше проверки, но это может случиться и гораздо позже, после инициализации класса. </p><h3>Проверка (Verification)</h3><p>Проверка<a href="https://docs.oracle.com/javase/specs/jvms/se23/html/jvms-5.html#jvms-5.4.1"> (5.4.1</a>) — это процесс, в ходе которого JVM убеждается в том, что класс или интерфейс структурно корректен. Этот процесс может вызвать загрузку других классов, если это необходимо, хотя для загруженных таким образом классов не требуется проводить проверку или подготовку.</p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/28c/ab1/b17/28cab1b17159cb12a16ce8724a7d1b46.png" height="608" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/28c/ab1/b17/28cab1b17159cb12a16ce8724a7d1b46.png" width="1080"/></figure><p>Возвращаясь к теме CDS, в большинстве нормальных ситуаций классы JDK не будут проходить через активную фазу проверки. Это объясняется тем, что одним из преимуществ CDS является предварительная проверка классов внутри архива, что снижает количество работы, которую JVM должна проделать при старте. Что, в свою очередь, улучшает производительность на старте.</p><p>Если вы хотите узнать больше о CDS, вы можете посмотреть мое <a href="https://youtu.be/vvlQv1Dh-HU">Stack Walker видео</a> на эту тему, почитать наши <a href="https://dev.java/learn/jvm/cds-appcds/">статьи по dev.java на CDS</a>, или <a href="https://inside.java/2022/09/26/sip067/">эту статью по inside.java</a>, где рассказывается о том, как включать классы вашего приложения в архив CDS.</p><p>Один из классов, который <em>надо</em> подвергнуть проверке — это <code>HelloWorld</code>, и мы видим, как JVM это делает, в следующих логах:</p><pre><code>[class,init             ] Start class verification for: HelloWorld
[verification           ] Verifying class HelloWorld with new format
[verification           ] Verifying method HelloWorld.&lt;init&gt;()V
[verification           ] table = { 
[verification           ]  }
[verification           ] bci: @0
[verification           ] flags: { flagThisUninit }
[verification           ] locals: { uninitializedThis }
[verification           ] stack: { }
[verification           ] offset = 0,  opcode = aload_0
[verification           ] bci: @1</code></pre><h3>Подготовка (preparation)</h3><p>Подготовка<a href="https://docs.oracle.com/javase/specs/jvms/se23/html/jvms-5.html#jvms-5.4.2"> (5.4.2</a>) отвечает за инициализацию статических полей в классе их значениями по умолчанию.</p><p>Чтобы лучше понять, как это работает, давайте посмотрим на этот простой пример класса:</p><pre><code class="java">class MyClass {
  static int myStaticInt = 10; //Initialized to 0
  static int myStaticInitializedInt; //Initialized to 0
  int myInstanceInt = 30; //Not initialized
  static {
    myStaticInitializedInt = 20;
  }
} </code></pre><p>Класс содержит три целочисленных поля: <code>myStaticInt</code>, <code>myStaticInitializedInt</code>, и <code>myInstanceInt</code>.</p><p>В этом примере как <code>myStaticInt</code>, так и <code>myStaticInitializedInt</code> инициализировались бы числом <code>0</code>,  то есть значением по умолчанию для примитивного типа <code>int</code>.</p><p>При этом поле <code>myInstanceInt</code> не будет инициализировано, так как это поле экземпляра, а не класса. </p><p>Чуть позже мы немного расскажем о том, когда поля <code>myStaticInt</code> и <code>myStaticInitializedInt</code> инициализируются значениями <code>10</code> и <code>20</code>.</p><h3>Разрешение (Resolution)</h3><p>Цель процесса разрешения<a href="https://docs.oracle.com/javase/specs/jvms/se23/html/jvms-5.html#jvms-5.4.3"> (5.4.3</a>) состоит в том, чтобы разрешить символические ссылки в пуле констант класса для использования инструкциями JVM.</p><p>Для лучшего понимания этого процесса мы воспользуемся <a href="https://docs.oracle.com/en/java/javase/23/docs/specs/man/javap.html">инструментом</a> <code>javap</code>. Это стандартный инструмент командной строки JDK, предназначенный для дизассемблирования <code>.class</code> файлов Java. Если запускать его с опцией <code>-verbose</code>, он даст нам представление о том, как JVM интерпретирует загружаемые классы. Давайте запустим <code>javap</code> на <code>MyClass</code>:</p><pre><code class="java">$ javap –verbose MyClass
class MyClass {
  static int myStaticInt = 10; //Initialized to 0
  static int myStaticInitializedInt; //Initialized to 0
  int myInstanceInt = 30; //Not initialized
  static {
    myStaticInitializedInt = 20;
  }
} </code></pre><p>Результат работы этой команды приведен ниже (под спойлером):  </p><details class="spoiler"><summary>Много кода:</summary><div class="spoiler__content"><pre><code class="assembly">Constant pool:
   #1 = Methodref          #2.#3          // java/lang/Object."&lt;init&gt;":()V
   #2 = Class              #4             // java/lang/Object
   #3 = NameAndType        #5:#6          // "&lt;init&gt;":()V
   #4 = Utf8               java/lang/Object
   #5 = Utf8               &lt;init&gt;
   #6 = Utf8               ()V
   #7 = Fieldref           #8.#9          // MyClass.myInstanceInt:I
   #8 = Class              #10            // MyClass
   #9 = NameAndType        #11:#12        // myInstanceInt:I
  #10 = Utf8               MyClass
  #11 = Utf8               myInstanceInt
  #12 = Utf8               I
  #13 = Fieldref           #8.#14         // MyClass.myStaticInt:I
  #14 = NameAndType        #15:#12        // myStaticInt:I
  #15 = Utf8               myStaticInt
  #16 = Fieldref           #8.#17         // MyClass.myStaticInitializedInt:I
  #17 = NameAndType        #18:#12        // myStaticInitializedInt:I
  #18 = Utf8               myStaticInitializedInt
  #19 = Utf8               Code
  #20 = Utf8               LineNumberTable
  #21 = Utf8               &lt;clinit&gt;
  #22 = Utf8               SourceFile
  #23 = Utf8               MyClass.java
{
  static int myStaticInt;
    descriptor: I
    flags: (0x0008) ACC_STATIC

  static int myStaticInitializedInt;
    descriptor: I
    flags: (0x0008) ACC_STATIC

  int myInstanceInt;
    descriptor: I
    flags: (0x0000)

  MyClass();
    descriptor: ()V
    flags: (0x0000)
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V
         4: aload_0
         5: bipush        30
         7: putfield      #7                  // Field myInstanceInt:I
        10: return
      LineNumberTable:
        line 1: 0
        line 4: 4

  static {};
    descriptor: ()V
    flags: (0x0008) ACC_STATIC
    Code:
      stack=1, locals=0, args_size=0
         0: bipush        10
         2: putstatic     #13                 // Field myStaticInt:I
         5: bipush        20
         7: putstatic     #16                 // Field myStaticInitializedInt:I
        10: return
      LineNumberTable:
        line 2: 0
        line 6: 5
        line 7: 10
}</code></pre><p></p></div></details><p><strong>💡 Примечание:</strong> Этот вывод был немного обрезан, чтобы удалить метаданные, не относящиеся к теме данной статьи. </p><p>Здесь довольно много данных, так что давайте разобьем их на части и пройдемся по ним шаг за шагом, чтобы понять, что все это значит. </p><p>Приведенный ниже фрагмент является конструктором по умолчанию для класса <code>MyClass</code> и генерируется автоматически. Он начинается с вызова конструктора по умолчанию для родительского класса, а именно <code>java.lang.Object</code>, а затем <code>myInstanceInt</code> устанавливается в <code>30</code>.</p><pre><code class="assembly">MyClass();
  descriptor: ()V
  flags: (0x0000)
  Code:
    stack=2, locals=1, args_size=1
       0: aload_0
       1: invokespecial #1 //Method java/lang/Object."&lt;init&gt;":()V
       4: aload_0
       5: bipush        30
       7: putfield      #7 //Field myInstanceInt:I
      10: return
    LineNumberTable:
      line 1: 0
      line 4: 4</code></pre><p><strong>💡 Примечание:</strong> Несомненно, вы заметили <code>aload_0</code>, <code>invokespecial</code>, <code>bipush</code>, <code>putfield</code>, и т.д. Это <a href="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html">JVM инструкции</a>,<a href="https://en.wikipedia.org/wiki/Opcode"> opcode</a>, который JVM использует для выполнения своей работы.</p><p>Справа от <code>invokespecial</code> и <code>putfield</code> находятся числа <code>#1</code> и <code>#7</code> соответственно. Это ссылки на пул констант <code>MyClass</code> (<a href="https://docs.oracle.com/javase/specs/jvms/se23/html/jvms-4.html#jvms-4.4">4.4</a>). Давайте посмотрим на него более пристально:</p><pre><code class="assembly">Constant pool:
   #1 = Methodref          #2.#3          // java/lang/Object."&lt;init&gt;":()V
   #2 = Class              #4             // java/lang/Object
   #3 = NameAndType        #5:#6          // "&lt;init&gt;":()V
   #4 = Utf8               java/lang/Object
   #5 = Utf8               &lt;init&gt;
   #6 = Utf8               ()V
   #7 = Fieldref           #8.#9          // MyClass.myInstanceInt:I
   #8 = Class              #10            // MyClass
   #9 = NameAndType        #11:#12        // myInstanceInt:I
  #10 = Utf8               MyClass
  #11 = Utf8               myInstanceInt
  #12 = Utf8               I
  #13 = Fieldref           #8.#14         // MyClass.myStaticInt:I
  #14 = NameAndType        #15:#12        // myStaticInt:I
  #15 = Utf8               myStaticInt
  #16 = Fieldref           #8.#17         // MyClass.myStaticInitializedInt:I
  #17 = NameAndType        #18:#12        // myStaticInitializedInt:I
  #18 = Utf8               myStaticInitializedInt
  #19 = Utf8               Code
  #20 = Utf8               LineNumberTable
  #21 = Utf8               &lt;clinit&gt;
  #22 = Utf8               SourceFile
  #23 = Utf8               MyClass.java</code></pre><p>В пуле констант класса <code>MyClass</code> находятся все его символические ссылки. Чтобы JVM могла выполнить JVM инструкцию <code>invokespecial</code>,ей необходимо разрешить связь с конструктором по умолчанию класса<code>java.lang.Object</code>. Если вернуться к пулу констант, строки 1-6 предоставляют информацию, необходимую для формирования такой связи. </p><p><strong>💡 Примечание:</strong> <code>&lt;init&gt;</code> — это специальный метод, который <code>javac</code> автоматически генерирует для каждого конструктора в классе.</p><p>Тот же паттерн повторяется для команды putfield, которая ссылается на строку 7 в пуле констант, которая в комбинации со строками 8-12 предоставляет необходимую информацию для разрешения связей для установки значения переменной <code>myInstanceInt</code>. Чтобы узнать больше о пуле констант, обратитесь к <a href="https://docs.oracle.com/javase/specs/jvms/se23/html/jvms-4.html#jvms-4.4">соответствующему разделу спецификации JVM</a>.</p><p>Причина того, что процесс разрешения может произойти как до проверки, так и после инициализации класса, состоит в том, что он выполняется в режиме lazy, только когда JVM пытается выполнить JVM инструкцию в классе. Не все загруженные классы содержат исполняемые JVM инструкции. Например, класс <code>java.lang.SecurityManager</code> загружается, но не используется, <a href="https://openjdk.org/jeps/486">потому что он устарел и выводится из обращения</a>. Возможна и такая ситуация, когда в классе нечего инициализировать, и он автоматически помечается JVM как инициализированный. Что подводит нас к теме инициализации классов… </p><h4>Инициализация классов</h4><p>Мы наконец-то добрались до инициализации классов, о которой рассказывается в <a href="https://docs.oracle.com/javase/specs/jvms/se23/html/jvms-5.html#jvms-5.5">разделе 5.5 JVM спецификации</a>. Инициализация классов включает в себя присвоение значения <code>ConstantValue</code> статическим полям и выполнение любых статических блоков инициализации в классе, если они там есть. Этот процесс начинается, когда JVM вызывает любые <code>new</code>, <code>getstatic</code>, <code>putstatic</code> или <code>invokestatic</code> JVM инструкции на классе. </p><p>Инициализация класса осуществляется специальным no args методом, <code>void &lt;clinit&gt;</code>, который, как и <code>&lt;init&gt;</code>, автоматически генерируется <code>javac</code>. Угловые скобки (<code>&lt; &gt;</code>) были включены специально, так как они не являются валидными символами для имени метода и таким образом не позволяют пользователям Java написать собственные кастомизированные методы <code>&lt;init&gt;</code> или <code>&lt;clinit&gt;</code>.</p><p>Это не является гарантией того, что метод <code>&lt;clinit&gt;</code> будет создаваться всегда, поскольку он нужен только если в классе присутствуют статические блоки инициализации или поля. Если в классе нет ни того, ни другого, <code>&lt;clinit&gt;</code> не генерируется, а JVM сразу помечает класс как инициализированный, если на нем вызывается <code>new</code>, по сути пропуская этап инициализации класса. Таким образом разрешение может произойти <em>после</em> инициализации класса. </p><p>Поскольку в <code>MyClass</code> присутствуют два статических поля и статический блок инициализации, в нем есть метод <code>&lt;clinit&gt;</code>, что возвращает нас к выводу команды <code>javap</code>:</p><pre><code class="assembly">  static {};
    descriptor: ()V
    flags: (0x0008) ACC_STATIC
    Code:
      stack=1, locals=0, args_size=0
         0: bipush        10
         2: putstatic     #13                 // Field myStaticInt:I
         5: bipush        20
         7: putstatic     #16                 // Field myStaticInitializedInt:I
        10: return
      LineNumberTable:
        line 2: 0
        line 6: 5
        line 7: 10</code></pre><p>Структура <code>&lt;clinit&gt;</code> напоминает <code>&lt;init&gt;</code>, но без вызова конструктора родительского класса, а вместо <code>putfield</code> используются такие конструкции JVM, как <code>putstatic</code>.</p><h3>Hello World!</h3><p>Рано или поздно наступит момент, когда JVM выполнит всю подготовительную работу. Необходимую для начала выполнения пользовательского кода внутри <code>public static void main()</code>, где и находится сообщение <code>Hello World!</code>:</p><pre><code>[0.062s][debug][class,resolve] java.io.FileOutputStream
... 
Hello World!</code></pre><p>По итогу JVM загрузит примерно 450 классов, и некоторая часть этих классов будет также связана и инициализирована. На моем M4 MacBook Pro, как можно увидеть по логам, весь процесс занял всего 62 миллисекунды, даже с учетом ОЧЕНЬ подробного логирования. Полный лог можно посмотреть <a href="https://gist.github.com/wkorando/34294017e1c7653ab9f9ed5c02f017a3">на GitHub</a>. </p><h3>Project Leyden</h3><p>Сейчас для процесса старта JVM наступили очень интересные времена. Этот процесс и раньше постоянно совершенствовался с каждым релизом, а начиная с JDK 24 первая наработка из <a href="https://openjdk.org/projects/leyden/">Project Leyden</a> будет включена в релиз JDK в его главную ветку.</p><p>Project Leyden ставит целью сократить: время старта, время достижения пиковой производительности и memory footprint. Он вырос из CDS и продолжает его традиции. По мере интеграции Project Leyden CDS постепенно уступит место AOT (ahead-of-time). Возможности Project Leyden позволят записать поведение JVM во время тестового прогона, сохранить эту информацию в кеше и затем загрузить ее из кеша при следующих запусках. Если вы хотите узнать больше о Project Leyden, обязательно посмотрите <a href="https://youtu.be/z9XgILeSwzk">это видео</a>.</p><p>Главной возможностью Project Leyden станет<a href="https://openjdk.org/jeps/483"> JEP 483: AOT загрузка классов и их связывание</a>. Мы уже рассказали о загрузке и связывании классов в этой статье, так что преимущества AOT выполнения этих процедур вместо того, чтобы выполнять их при старте, должны быть очевидны. </p><h3>Заключение</h3><p>Как видно из этой статьи, процедура запуска JVM — это очень комплексная процедура. Возможность реагировать на доступность системных ресурсов, предоставить средства для инспектирования и профилирования JVM, динамической загрузки классов и многого другого приводит к серьезному усложнению всей процедуры. </p><p>Какие выводы можно сделать из всего сказанного, помимо более глубокого понимания JVM? Как минимум два аспекта стоят того, чтобы обратить на них внимание, отладка и производительность, хотя возможность их применения может быть несколько ограниченной. </p><h4>Отладка</h4><p>Процедура запуска JVM довольно надежна, и, как правило, если происходит ошибка, то ее причиной является ошибка пользователя или, возможно,какая-то проблема в библиотеке, полученной от третьей стороны. Мы надеемся, что более глубокое понимание того, что JVM пытается сделать и почему, может помочь вам разобраться с самыми трудно устранимыми или сложными в понимании проблемами процедуры запуска. </p><h4>Улучшения производительности</h4><p>Другое потенциальное преимущество состоит в том, что, вооружившись этим знанием, вы можете найти пусть и небольшие, но возможности для улучшения производительности вашего приложения на старте. Особенно учитывая, что JEP 483 интегрируется в JDK 24, вынос загрузки классов и их связывание в AOT может еще больше улучшить производительность при старте.</p><p>Однако, я бы напомнил вам о том, что в большинстве случаев код «первой стороны» (то есть ваш) составляет лишь незначительную часть от кода, который выполняет JVM. С учетом всех библиотек, фреймворков и самого JDK, зачастую код вашего приложения оказывается лишь верхушкой айсберга. </p><figure class="full-width"><img data-src="https://habrastorage.org/getpro/habr/upload_files/db1/875/8cb/db18758cbc9573562c704b7708bf7f6d.png" height="608" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/db1/875/8cb/db18758cbc9573562c704b7708bf7f6d.png" width="1080"/></figure><figure class="full-width"><img data-src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/f82/06b/9bd/f8206b9bd27786a8b1c004f0b9c3b147.png" height="334" src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/f82/06b/9bd/f8206b9bd27786a8b1c004f0b9c3b147.png" width="1560"/></figure><p>Присоединяйтесь к русскоязычному сообществу разработчиков на Spring Boot в телеграм — <a href="https://t.me/+oBwACbkvJ19iODAy">Spring АйО</a>, чтобы быть в курсе последних новостей из мира разработки на Spring Boot и всего, что с ним связано.</p><p></p></div></div></div><!-- --><!-- --></div><!-- --><!-- --></div><!--]--><!-- --><div class="tm-article-presenter__meta" data-test-id="article-meta-links"><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Теги:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[java]"><span>java</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[start-up]"><span>start-up</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[jvm]"><span>jvm</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[byte+code]"><span>byte code</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[garbage+collector]"><span>garbage collector</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[method+area]"><span>method area</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[cds]"><span>cds</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[loading]"><span>loading</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[linking]"><span>linking</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[initialization]"><span>initialization</span></a><!--]--></li><!--]--><!-- --></ul></div><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Хабы:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/companies/spring_aio/articles/"><!--[--><span>Блог компании Spring АйО</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/hubs/java/"><!--[--><span>Java</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/hubs/kotlin/"><!--[--><span>Kotlin</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/hubs/programming/"><!--[--><span>Программирование</span><!--]--></a><!--]--></li><!--]--><!-- --></ul></div></div><!-- --><!--]--></article><!--]--></div><!-- --></div><div class="tm-article-sticky-panel" data-test-id="article-sticky-panel" style=""><div class="tm-data-icons tm-data-icons tm-data-icons_space-big tm-article-sticky-panel__icons" data-test-id="article-stats-icons"><div class="tm-article-rating tm-data-icons__item"><div class="tm-votes-meter tm-article-rating__votes-switcher"><svg class="tm-svg-img tm-votes-meter__icon tm-votes-meter__icon tm-votes-meter__icon_appearance-article" height="24" width="24"><title>Всего голосов 25: ↑25 и ↓0</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-rating"></use></svg><span class="tm-votes-meter__value tm-votes-meter__value_positive tm-votes-meter__value_appearance-article tm-votes-meter__value_rating tm-votes-meter__value" data-test-id="votes-meter-value" title="Всего голосов 25: ↑25 и ↓0">+26</span></div><!--teleport start--><!--teleport end--><!-- --></div><!-- --><!-- --><button class="bookmarks-button tm-data-icons__item" title="Добавить в закладки" type="button"><span class="tm-svg-icon__wrapper bookmarks-button__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Добавить в закладки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-favorite"></use></svg></span><span class="bookmarks-button__counter" title="Количество пользователей, добавивших публикацию в закладки">81</span></button><div class="tm-sharing tm-data-icons__item" title="Поделиться"><button class="tm-sharing__button" type="button"><svg class="tm-sharing__icon" viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M13.8 13.8V18l7.2-6.6L13.8 5v3.9C5 8.9 3 18.6 3 18.6c2.5-4.4 6-4.8 10.8-4.8z" fill="currentColor"></path></svg></button><!--teleport start--><!--teleport end--></div><div class="tm-article-comments-counter-link tm-data-icons__item" title="Читать комментарии"><a class="tm-article-comments-counter-link__link" data-test-id="counter-comments" href="/ru/companies/spring_aio/articles/881128/comments/"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value">0</span><!--]--></a><!-- --></div><!--[--><!--[--><!--[--><!-- --><!--]--><!--]--><!--]--><!--teleport start--><!--teleport end--><!-- --></div></div></div><!--[--><!--]--><div class="tm-article-presenter__footer"><!--[--><!--[--><div class="tm-article-blocks"><!-- --><!--[--><section class="tm-block tm-block tm-block_spacing-bottom"><!-- --><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-balanced"><!--[--><div class="tm-article-author" data-test-id="article-author-info"><!--[--><!--[--><div class="tm-article-author__company"><div class="tm-article-author__company-card"><div class="tm-company-snippet"><a class="tm-company-snippet__logo-link" href="/ru/companies/spring_aio/profile/"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="40" src="//habrastorage.org/getpro/habr/company/8f1/91a/458/8f191a4584b8fab12d15af23e447a1d5.png" width="40"/></div></a><div class="tm-company-snippet__info"><a class="tm-company-snippet__title" data-test-id="company-title" href="/ru/companies/spring_aio/profile/"><span>Spring АйО</span></a><div class="tm-company-snippet__description">Компания</div></div></div><div class="tm-article-author__buttons"><!-- --><!-- --></div></div><div class="tm-article-author__company-contacts"><!--[--><a class="tm-article-author__contact" href="https://telegram.me/spring_aio" rel="noopener" target="_blank">Telegram</a><a class="tm-article-author__contact" href="https://www.springnow.ru" rel="noopener" target="_blank">Сайт</a><!--]--></div><div class="tm-article-author__separator"></div></div><!--]--><!--]--><div class="tm-user-card tm-user-card tm-user-card_variant-article tm-article-author__user-card" data-async-called="true"><div class="tm-user-card__info-container"><div class="tm-user-card__header"><div class="tm-user-card__header-data"><a class="tm-user-card__userpic tm-user-card__userpic_size-40" href="/ru/users/spring_aio/"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" src="//habrastorage.org/getpro/habr/avatars/8e0/5e8/a1c/8e05e8a1c5fd4560f661efb2cb00e77e.png"/></div></a><div class="tm-user-card__meta"><div class="tm-counter-container tm-karma tm-karma" title=" 85 голосов "><div class="tm-counter-container__header"><!--[--><div class="karma-display positive" data-v-7635202e="">45</div><!-- --><!--]--></div><div class="tm-counter-container__footer"><!--[--><div class="tm-karma__text">Карма</div><!--teleport start--><!--teleport end--><!--]--></div></div><div class="tm-counter-container" title="Рейтинг пользователя"><div class="tm-counter-container__header"><!--[--><!--[--><!--]--><div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!-- --><div class="tm-votes-lever__score tm-votes-lever__score_appearance-rating tm-votes-lever__score_no-margin tm-votes-lever__score"><!--[--><span><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter_rating tm-votes-lever__score-counter" data-test-id="votes-score-counter">105.9</span></span><!--]--></div><!-- --></div><!--]--></div><div class="tm-counter-container__footer"><!--[--><span class="tm-rating__text tm-rating__text">Рейтинг</span><!--]--></div></div></div></div></div><div class="tm-user-card__info tm-user-card__info_variant-article tm-user-card__info"><div class="tm-user-card__title tm-user-card__title_variant-article tm-user-card__title"><span class="tm-user-card__name tm-user-card__name_variant-article tm-user-card__name">Spring АйО</span><a class="tm-user-card__nickname tm-user-card__nickname tm-user-card__nickname_variant-article" href="/ru/users/spring_aio/"> @spring_aio</a><!-- --></div><p class="tm-user-card__short-info tm-user-card__short-info_variant-article tm-user-card__short-info" data-test-id="user-card-speciality">Главный по Spring</p></div></div><div class="tm-user-card__buttons tm-user-card__buttons_variant-article tm-user-card__buttons"><!-- --><div class="tm-user-card__button"><div class="tm-button-follow tm-user-card__button-follow"><!-- --><button class="tm-button-follow__button tm-button-follow__button_big" data-test-id="follow-button" type="button">Подписаться</button></div></div><!-- --><div class="tm-user-card__button tm-user-card__button_write" data-test-id="user-card-conversations"><svg class="tm-svg-img tm-user-card__button-icon" height="16" width="16"><title>Отправить сообщение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#mail"></use></svg></div><!-- --></div><!-- --></div><!-- --></div><!--]--></div><!--]--><!-- --></section><!-- --><!--[--><!--]--><!--]--><div class="tm-article-blocks__comments"><div class="tm-article-page-comments" id="publication-comments"><div><!--[--><div class="tm-article-comments-counter-link tm-article-comments-counter-button"><a class="tm-article-comments-counter-link__link tm-article-comments-counter-link__link_button-style" data-test-id="counter-comments" href="/ru/companies/spring_aio/articles/881128/comments/"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon tm-article-comments-counter-link__icon_contrasted" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value tm-article-comments-counter-link__value_contrasted"> Комментировать </span><!--]--></a><!-- --></div><!--]--></div></div></div><!--[--><!--[--><!--]--><section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title tm-block__title_variant-large">Публикации</h2><!--[--><!--]--></div><!-- --></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-condensed-slim"><!--[--><!--[--><div class="tm-tabs tm-tabs"><div class=""><!--[--><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_active tm-tabs__tab-link_slim tm-tabs__tab-link">Лучшие за сутки</button></span><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_slim tm-tabs__tab-link">Похожие</button></span><!--]--></div><!-- --></div><div class="similar-and-daily__tab-view"><div class="placeholder-wrapper"><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><div class="tm-placeholder-article-cards"><!--[--><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><!--]--></div><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --></div><!-- --></div><!--]--><!--]--></div><!--]--><!-- --></section><!--[--><!--]--><!-- --><!--[--><!--]--><!--]--></div><!--]--><!--]--></div></div><!--]--><!--]--></div></div><div class="tm-page__sidebar"><!--[--><!-- --><!--]--></div></div><!-- --><!--]--></div></div></main><!-- --></div><!-- --><div class="tm-footer"><div class="tm-page-width"><!--[--><div class="tm-footer__container"><div class="tm-footer__title"><a class="tm-svg-icon__wrapper tm-footer__title-link" href="/ru/"><svg class="tm-svg-img tm-svg-icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a></div><div class="tm-footer__social"><!--[--><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.facebook.com/habrahabr.ru" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Facebook</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-facebook"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://twitter.com/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Twitter</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-twitter"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://vk.com/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>VK</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-vk"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://telegram.me/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Telegram</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-telegram"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.youtube.com/channel/UCd_sTwKqVrweTt4oAKY5y4w" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Youtube</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-youtube"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://dzen.ru/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Яндекс Дзен</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-dzen"></use></svg></a><!--]--></div><!--teleport start--><!--teleport end--><button class="tm-footer__link"><svg class="tm-svg-img tm-footer__icon" height="16" width="16"><title>Язык</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#lang"></use></svg> Настройка языка</button><a class="tm-footer__link" href="/ru/feedback/">Техническая поддержка</a><div class="tm-footer-copyright"><span class="tm-copyright"><span class="tm-copyright__years">© 2006–2025, </span><span class="tm-copyright__name"><a class="tm-copyright__link" href="https://company.habr.com/" rel="noopener" target="_blank">Habr</a></span></span></div></div><!--]--></div></div><!-- --><!--]--></div><!-- --></div></div>
<div id="overlays"><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--></div>
</body>
</html>
