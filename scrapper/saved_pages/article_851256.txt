<!DOCTYPE html>

<html lang="ru">
<head>
<title>Как я писал суперкастомизированное Android-приложение в 2024 году / Хабр</title>
</head>
<body>
<div id="mount"><div data-async-called="true" id="app"><div class="tm-layout__wrapper"><!--[--><!-- --><div></div><!-- --><header class="tm-header" data-test-id="header"><div class="tm-page-width"><!--[--><div class="tm-header__container"><!-- --><span class="tm-header__logo-wrap"><a class="tm-header__logo tm-header__logo_hl-ru tm-header__logo" href="/ru/"><svg class="tm-svg-img tm-header__icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a><span class="tm-header__beta-sign" style="display:none;">β</span></span><!--[--><div class="tm-dropdown tm-header__projects"><div class="tm-dropdown__head"><!--[--><button class="tm-header__dropdown-toggle"><svg class="tm-svg-img tm-header__icon tm-header__icon_dropdown" height="16" width="16"><title>Открыть список</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#arrow-down"></use></svg></button><!--]--></div><!-- --></div><a class="tm-header__become-author-btn" href="/ru/sandbox/start/">Как стать автором</a><div class="tm-feature tm-feature tm-feature_variant-inline tm-header__feature"><!-- --></div><!-- --><!--]--><!-- --></div><!--]--></div></header><div class="tm-layout"><div class="tm-page-progress-bar"></div><div class="tm-base-layout__header_is-sticky tm-base-layout__header" data-menu-sticky="true"><div class="tm-page-width"><!--[--><div class="tm-base-layout__header-wrapper"><div class="tm-main-menu"><div class="tm-main-menu__section"><nav class="tm-main-menu__section-content"><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/feed/">Моя лента</a><!--]--><!--[--><a class="tm-main-menu__item" href="/ru/articles/">Все потоки</a><!--]--><!--[--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/develop/">Разработка</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/admin/">Администрирование</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/design/">Дизайн</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/management/">Менеджмент</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/marketing/">Маркетинг</a><!--]--><!--[--><a class="tm-main-menu__item" data-test-id="main-menu-item" href="/ru/flows/popsci/">Научпоп</a><!--]--><!--]--></nav></div></div><div class="tm-header-user-menu tm-base-layout__user-menu"><a class="tm-header-user-menu__item tm-header-user-menu__search" data-test-id="search-button" href="/ru/search/"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_search tm-header-user-menu__icon_dark" height="24" width="24"><title>Поиск</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#search"></use></svg></a><!-- --><!-- --><div class="tm-header-user-menu__item tm-header-user-menu__write"><div><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_write tm-header-user-menu__icon_dark" height="24" width="24"><title>Написать публикацию</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#write"></use></svg></div><!-- --></div><!--[--><div class="tm-header-user-menu__item"><button class="tm-header-user-menu__toggle" data-test-id="user-menu-settings"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_dark" height="24" width="24"><title>Настройки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#page-settings"></use></svg></button></div><a class="tm-header-user-menu__item" href="https://habr.com/kek/v1/auth/habrahabr/?back=/ru/companies/ruvds/articles/851256/&amp;hl=ru" rel="nofollow"><!--[--><button class="btn btn_solid btn_small tm-header-user-menu__login" type="button"><!--[-->Войти<!--]--></button><!--]--></a><!--]--><!-- --><!--teleport start--><!--teleport end--><!-- --></div></div><!--]--></div></div><!-- --><div class="tm-page-width"><!--[--><!--]--></div><main class="tm-layout__container"><div class="tm-page" companyname="ruvds" data-async-called="true" hl="ru" style="--0c809c5a:16px;--a086013e:100%;--7c457026:0;"><div class="tm-page-width"><!--[--><div class="tm-page__header"><!--[--><div class="tm-company-card__branding tm-company-card__branding_loading tm-company-article__branding" data-test-id="company-card-branding"><div class="tm-company-card__branding-placeholder"><!-- --></div><a href="https://ruvds.com/ru/ispmanager?utm_source=habr&amp;utm_medium=banner&amp;utm_campaign=promo&amp;utm_content=link&amp;?erid=LjN8KAR3S"><img class="tm-company-card__branding-image" src="//habrastorage.org/getpro/habr/branding/fb6/ef6/713/fb6ef6713c7ac645ad9668af3b7aa161.png"/></a></div><!--]--></div><div class="tm-page__wrapper"><div class="tm-page__main_has-sidebar tm-page__main"><div class="pull-down"><!-- --><div class="pull-down__header" style="height:0px;"><div class="pull-down__content" style="bottom:10px;"><svg class="tm-svg-img pull-down__icon pull-down__arrow" height="24" width="24"><title>Обновить</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#pull-arrow"></use></svg></div></div><!--[--><!--[--><div class="tm-article-presenter"><!--[--><!--[--><!-- --><div class="tm-company-profile-card tm-company-article__profile-card"><div class="tm-company-card tm-company-profile-card__info"><div class="tm-company-card__header"><a class="tm-company-card__avatar" href="/ru/companies/ruvds/profile/"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="48" src="//habrastorage.org/getpro/habr/company/18c/bff/d8f/18cbffd8f66af293efcc352f43cdca35.png" width="48"/></div></a><!--[--><!-- --><div class="tm-counter-container tm-company-card__rating"><div class="tm-counter-container__header"><!--[--><!--[--><!--]--><div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!-- --><div class="tm-votes-lever__score tm-votes-lever__score_appearance-rating tm-votes-lever__score_no-margin tm-votes-lever__score"><!--[--><span><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter_rating tm-votes-lever__score-counter" data-test-id="votes-score-counter">2699.57</span></span><!--]--></div><!-- --></div><!--]--></div><div class="tm-counter-container__footer"><!--[--><span class="tm-rating__text tm-rating__text">Рейтинг</span><!--]--></div></div><!-- --><!--]--></div><div class="tm-company-card__info"><a class="tm-company-card__name" href="/ru/companies/ruvds/profile/"><span>RUVDS.com</span></a><div class="tm-company-card__description">VDS/VPS-хостинг. Скидка 15% по коду <b>HABR15</b></div></div></div><div class="tm-company-profile-card__buttons"><div class="tm-button-follow tm-company-profile-card__button tm-company-profile-card__button_follow"><!-- --><button class="tm-button-follow__button tm-button-follow__button_big" data-test-id="follow-button" type="button">Подписаться</button></div><!-- --><!-- --><!-- --></div></div><!-- --><!--]--><!--]--><div class="tm-article-presenter__body" data-test-id="article-body"><div class="tm-misprint-area"><div class="tm-misprint-area__wrapper"><!--[--><article class="tm-article-presenter__content tm-article-presenter__content_narrow"><!--[--><div class="tm-article-presenter__header"><!--[--><!--]--><div class="tm-article-snippet tm-article-snippet tm-article-presenter__snippet"><!--[--><!--]--><div class="tm-article-snippet__meta-container"><div class="tm-article-snippet__meta"><span class="tm-user-info tm-article-snippet__author"><a class="tm-user-info__userpic" data-test-id="user-info-pic" href="/ru/users/DmitryTsyvtsyn/" title="DmitryTsyvtsyn"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="24" src="//habrastorage.org/r/w48/getpro/habr/avatars/db6/bea/5ea/db6bea5ea945afec3614eae955a8f2b1.jpeg" width="24"/></div></a><span class="tm-user-info__user tm-user-info__user_appearance-default" data-test-id="user-info-description"><a class="tm-user-info__username" href="/ru/users/DmitryTsyvtsyn/">DmitryTsyvtsyn <!-- --></a><!--[--><span class="tm-article-datetime-published"><time datetime="2024-11-05T09:01:47.000Z" title="2024-11-05, 12:01">5  ноя  2024 в 12:01</time></span><!--]--></span></span></div><!-- --></div><h1 class="tm-title tm-title_h1" data-test-id="articleTitle" lang="ru"><span>Как я писал суперкастомизированное Android-приложение в 2024 году</span></h1><div class="tm-article-snippet__stats" data-test-id="articleStats"><div class="tm-article-complexity tm-article-complexity_complexity-medium"><span class="tm-svg-icon__wrapper tm-article-complexity__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Уровень сложности</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#complexity-medium"></use></svg></span><span class="tm-article-complexity__label">Средний</span></div><div class="tm-article-reading-time"><span class="tm-svg-icon__wrapper tm-article-reading-time__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Время на прочтение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#clock"></use></svg></span><span class="tm-article-reading-time__label">19 мин</span></div><span class="tm-icon-counter tm-data-icons__item"><svg class="tm-svg-img tm-icon-counter__icon" height="24" width="24"><title>Количество просмотров</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-views"></use></svg><span class="tm-icon-counter__value" title="6334">6.3K</span></span></div><div class="tm-publication-hubs__container" data-test-id="articleHubsList"><div class="tm-publication-hubs"><!--[--><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/companies/ruvds/articles/"><!--[--><span>Блог компании RUVDS.com</span><!-- --><!--]--></a></span><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/hubs/kotlin/"><!--[--><span>Kotlin</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/hubs/algorithms/"><!--[--><span>Алгоритмы</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/hubs/mobile_dev/"><!--[--><span>Разработка мобильных приложений</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a class="tm-publication-hub__link" href="/ru/hubs/android_dev/"><!--[--><span>Разработка под Android</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><!--]--></div></div><div class="tm-article-labels" data-test-id="articleLabels"><div class="tm-article-labels__container"><div class="tm-publication-label tm-publication-label_variant-case"><span>Кейс</span></div><!--[--><!--]--></div></div><!-- --><!-- --></div></div><!--[--><!-- --><div class="tm-article-body" data-gallery-root="" lang="ru"><div><!--[--><!--]--></div><div id="post-content-body"><div><div class="article-formatted-body article-formatted-body article-formatted-body_version-1"><div xmlns="http://www.w3.org/1999/xhtml"><a href="https://habr.com/en/companies/ruvds/articles/851256/"><div style="text-align:center;"><img data-blurred="true" data-src="https://habrastorage.org/webt/aw/cs/dk/awcsdkn8nxulfgozpnwidutz3su.jpeg" src="https://habrastorage.org/r/w780q1/webt/aw/cs/dk/awcsdkn8nxulfgozpnwidutz3su.jpeg"/></div></a><i><font color="#999999">Как я писал супер кастомизированное Android приложение в 2024 году</font></i><br/>
<br/>
В начале года у меня появилась прикольная идея: сделать Android-приложение, которое будет показывать анимации для алгоритмов сортировки. Чтобы вы сразу поняли, что представляет из себя приложение, на <a href="https://github.com/DmitryTsyvtsyn/AlgoSortingAnimations">GitHub</a> есть скрины и короткие видео. Давайте по кусочкам разберём мой проект.<a name="habracut"></a><br/>
<br/>
<h2><font color="#3AC1EF">▍ Минимум библиотек, максимум самописных решений</font></h2><br/>
В моём приложении используется всего три Gradle зависимости:<br/>
<br/>
<ol>
<li><a href="https://developer.android.com/jetpack/androidx/releases/core">Androidx Core</a> — можно было обойтись без этой зависимости, только пришлось бы немного заморочиться с edge-to-edge и писать дополнительный код, который уже есть в библиотечных классах <a href="https://developer.android.com/reference/androidx/core/view/WindowCompat">WindowCompat</a> и <a href="https://developer.android.com/reference/androidx/core/view/ViewCompat">ViewCompat</a>.</li>
<li><a href="https://developer.android.com/kotlin/coroutines">Kotlin Coroutines</a> — не стал заморачиваться с асинхронными задачами и усложнять код callback'ами, к тому же корутинки одна из любимых моих библиотек, поэтому почему бы не затащить, весит всё равно немного.</li>
<li><a href="https://junit.org/junit4/">Junit 4</a> — как же без тестирования.</li>
</ol><br/>
Как видите, нет никакого <a href="https://developer.android.com/compose">Jetpack Compose</a> или фрагментов, вообще основной задачей было сделать всё с минимальными зависимостями вплоть до самописных ViewModel и навигации на View, на закусочку вместо xml разметки я писал вёрстку кодом.<br/>
<br/>
<h2><font color="#3AC1EF">▍ Навигация на View</font></h2><br/>
Для навигации на View был написан кастомный <code>Navigator</code>:<br/>
<br/>
<pre><code class="kotlin">/*
parent — родительская View, куда кладутся экраны (дочерние View),
в моём случае это FrameLayout

viewModelProvider — штука, которая используется для создания ViewModel,
используется для сохранения / восстановления состояния при
изменении конфигурации устройства (переворот экрана)

onBackPressedDispatcher — обработчик кнопки "Назад", я тупо скопировал код
этого класса из новых версий Android SDK
*/
class Navigator(
    private val parent: ViewGroup,
    private val viewModelProvider: ViewModelProvider,
    private val onBackPressedDispatcher: OnBackPressedDispatcher
) {

    // список экранов в backstack'е
    private val stack = mutableListOf&lt;NavigationScreen&gt;()
    // список callback'ов для обработки кнопки "Назад"
    private val callbacks = mutableListOf&lt;OnBackPressedCallback&gt;()
    // ViewModelProvider'ы для создания ViewModel
    private val providers = mutableMapOf&lt;String, ViewModelProvider&gt;()

    private val stackId = R.id.navigation_stack

    private val NavigationScreen.viewModelKey: String
        get() = "ViewModelProvider.SubProvider.Key.${this::class.java.canonicalName}"

    // добавляем новый экран (View) и создаём для него ViewModelProvider с 
    // callback'ом если он кладётся в backstack
    fun navigateForward(screen: NavigationScreen, isAddToBackStack: Boolean = true) {
        when {
            isAddToBackStack -&gt; {
                val key = screen.viewModelKey

                /*
                ViewModelProvider построен по принципу дерева (паттерн Компоновщик)
                при навигации на экран создаётся собственный ViewModelProvider,
                который хранит ViewModel'и для этого экрана
                */
                val provider = parentViewModelProvider().createChildProvider(key)
                providers[key] = provider
              
                parent.addView(screen.view(BaseParams(parent.context, this, provider)))
                stack.add(screen)

                // когда добавляем экран в backstack 
                // обязательно создаём callback для кнопки "Назад"
                val callback = createOnBackPressedCallback()
                callbacks.add(callback)
                onBackPressedDispatcher.addCallback(callback)
            }
            else -&gt; {
                parent.addView(screen.view(BaseParams(parent.context, this, viewModelProvider)))
            }
        }
    }

    /*
    тут всё очень просто, либо ничего не делаем, если backstack пустой,
    либо удаляем всё, что возможно: сам экран, ViewModelProvider и 
    View из родителя
    */
    fun navigateBack(): Boolean {
        if (stack.isEmpty()) return false

        val screen = stack.removeLast()
        val key = screen.viewModelKey
        viewModelProvider.removeChildProvider(key)
        providers.remove(key)
        parent.removeLast()
        callbacks.removeLast().changeIsEnabled(false)

        return true
    }

    // восстановление экранов (backstack'а) происходит 
    // через чтение Memory кэша
    fun onRestoreBackStack(cache: MemoryIDIdentityCache) {
        val cachedStack = cache.read&lt;MutableList&lt;NavigationScreen&gt;&gt;(stackId) ?: return
        cache.remove(stackId)

        stack.clear()
        callbacks.clear()

        var index = 0
        while (index &lt; cachedStack.size) {
            navigateForward(cachedStack[index])

            index++
        }
    }

    // список экранов или backstack сохраняется через Memory кэш
    fun onSaveBackStack(cache: MemoryIDIdentityCache) {
        callbacks.forEach { it.changeIsEnabled(false) }

        cache.save(stackId, stack)
    }

    private fun createOnBackPressedCallback() =
        object : OnBackPressedCallback(true) {
            override fun handleOnBackPressed() {
                navigateBack()
            }
        }

    /*
    возвращает либо самый верхнеуровневый ViewModelProvider,
    либо берёт ViewModelProvidr по ключу последнего экрана 
    из backstack'а
    */
    private fun parentViewModelProvider(): ViewModelProvider {
        if (stack.isEmpty()) return viewModelProvider

        val key = stack.last().viewModelKey
        return providers[key] ?: throw IllegalStateException("Not found such a ViewModelProvider with the key: $key")
    }

}</code></pre><br/>
Думаю, вы заметили, что мой навигатор при переходе на новый экран тупо добавляет его View, ничего не делая с View предыдущего экрана, при таком поведении может случиться переполнение памяти, если будет очень глубокий стэк навигации, но для моего приложения это более чем оправдано, так как в нём всего 2-5 экранов.<br/>
<br/>
Теперь разберёмся, что такое <code>NavigationScreen</code>, это всего лишь простой интерфейс, возвращающий View:<br/>
<br/>
<pre><code class="kotlin">fun interface NavigationScreen {
    fun view(params: BaseParams): View
}

// хранит базовые штуки для каждого экрана
class BaseParams(
    val context: Context,
    val navigator: Navigator,
    val viewModelProvider: ViewModelProvider
)</code></pre><br/>
В итоге каждый экран выглядит примерно так:<br/>
<br/>
<pre><code class="kotlin">@SuppressLint("ViewConstructor")
class SortingAlgorithmMainFragment(params: BaseParams) : CoreLinearLayout(params.context) {

    private val navigator = params.navigator
    private val viewModel = params.viewModelProvider.provide(SortingAlgorithmViewModel::class.java) {
        SortingAlgorithmViewModel()
    }
  
    init {
        orientation = VERTICAL
        
        val toolbarView = ToolbarView(context)
        toolbarView.changeMenuButtonDrawable(R.drawable.ic_settings)
        toolbarView.changeMenuClickListener {
            navigator.navigateForward(::SortingAlgorithmSelectionFragment)
        }
        addView(toolbarView)

        ...
    }
    
}</code></pre><br/>
А навигация происходит следующим образом:<br/>
<br/>
<pre><code class="kotlin">// краткая запись
navigator.navigateForward(
    screen = ::SortingAlgorithmMainFragment, 
    isAddToBackStack = false
)

// более развёрнутая запись
navigator.navigateForward(
    screen = { params -&gt;
        SortingAlgorithmMainFragment(params)
    },
    isAddToBackStack = false
)</code></pre><br/>
Простенько и изящно, что ещё добавить.<br/>
<br/>
<h2><font color="#3AC1EF">▍ Реализация Memory кэша</font></h2><br/>
Memory кэш реализован очень просто, во-первых, он лежит в Application классе, чтобы не умереть при изменении конфигурации (переворот экрана) или при смерти процесса:<br/>
<br/>
<pre><code class="kotlin">class App : Application() {

    val cache = MemoryIDIdentityCache()

}</code></pre><br/>
Во-вторых, он построен на структуре данных <a href="https://developer.android.com/reference/android/util/SparseArray">SparseArray</a>, где ключами являются числа типа Int, для которых я использую Android id:<br/>
<br/>
<pre><code class="kotlin">class MemoryIDIdentityCache {

    private val data = SparseArray&lt;Any&gt;()

    fun save(@IdRes key: Int, value: Any) {
        data[key] = value
    }

    fun &lt;T&gt; read(@IdRes key: Int): T? {
        return data[key] as? T
    }

    fun remove(@IdRes key: Int) {
        data.remove(key)
    }

}</code></pre><br/>
Если не шарите за SparseArray, в моём канале был пост <a href="https://t.me/android_under_the_hood/26">на эту тему</a>.<br/>
<br/>
<h2><font color="#3AC1EF">▍ Реализация ViewModelProvider</font></h2><br/>
Это всего лишь частный случай <a href="https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BC%D0%BF%D0%BE%D0%BD%D0%BE%D0%B2%D1%89%D0%B8%D0%BA_(%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)">паттерна «Компоновщик»</a>:<br/>
<br/>
<pre><code class="kotlin">/*
ViewModelProvider является наследником CoreViewModel,
это как раз нужно для построения иерархии ViewModelProvider'ов
напомню, что на каждый экран в backstack'е создаётся свой ViewModelProvider
*/
class ViewModelProvider : CoreViewModel {

    // ViewModel хранится в хэш-таблице
    private val cache = hashMapOf&lt;String, CoreViewModel&gt;()

    // создаёт дочерний ViewModelProvider, если такой уже есть, то вернёт его
    fun createChildProvider(key: String): ViewModelProvider {
        val provider = cache[key]
        if (provider != null &amp;&amp; provider is ViewModelProvider) return provider

        val childProvider = ViewModelProvider()
        val childProviderCache = childProvider.cache
        // child ViewModelProviders must have access to parent ViewModels
        cache.forEach { (key, value) -&gt;
            if (value !is ViewModelProvider) {
                childProviderCache[key] = value
            }
        }

        cache[key] = childProvider

        return childProvider
    }

    // удаляет дочерний ViewModelProvider
    fun removeChildProvider(key: String) {
        val provider = cache[key]
        if (provider is ViewModelProvider) {
            provider.cache.clear()
            cache.remove(key)
        }
    }

    // возвращает ViewModel или бросает ошибку, если её нет 
    // в текущем ViewModelProvider'е    
    fun &lt;T : CoreViewModel&gt; provide(viewModelClass: Class&lt;T&gt;): T {
        val key = key(viewModelClass)
        return cache[key] as? T ?: throw IllegalStateException("Not found such a ViewModel with the key: $key")
    }

    // возвращает ViewModel или создаёт её, сохраняя 
    // в текущем ViewModelProvider'е
    fun &lt;T : CoreViewModel&gt; provide(viewModelClass: Class&lt;T&gt;, factory: () -&gt; T): T {
        val key = key(viewModelClass)
        val cachedViewModel = cache[key]
        if (cachedViewModel != null) return cachedViewModel as T

        val viewModel = factory.invoke()
        cache[key] = viewModel
        return viewModel
    }

    private fun &lt;T&gt; key(viewModelClass: Class&lt;T&gt;): String =
        "ViewModelProvider.Key.${viewModelClass.canonicalName}"

}</code></pre><br/>
Алгоритм следующий:<br/>
<br/>
<ol>
<li>Создаётся корневой ViewModelProvider для самого первого экрана.</li>
<li>Самый первый экран создаёт ViewModel и кладёт её в корневой ViewModelProvider.</li>
<li>Пользователь нажимает кнопку на первом экране и переходит на второй.</li>
<li>Создаётся дочерний ViewModelProvider для второго экрана.</li>
<li>Второй экран создаёт ViewModel и кладёт её в дочерний ViewModelProvider.</li>
<li>При переходе на третий экран создаётся дочерний ViewModelProvider для предыдущего и т. д.</li>
</ol><br/>
В итоге получаем некоторое дерево из ViewModelProvider'ов, в которых хранятся ViewModel'и экранов.<br/>
<br/>
Чтобы при изменении конфигурации не потерять состояния ViewModel'ей корневой ViewModelProvider сохраняется через <code>onRetainNonConfigurationInstance()</code> метод:<br/>
<br/>
<pre><code class="kotlin">class MainActivity : Activity() {

    private var viewModelProvider by Delegates.notNull&lt;ViewModelProvider&gt;()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // создаём корневой ViewModelProvider или получаем его
        // если он ранее был уже сохранён
        viewModelProvider = lastNonConfigurationInstance as? ViewModelProvider ?: ViewModelProvider()
    }

    // сохраняем корневой ViewModelProvider
    override fun onRetainNonConfigurationInstance() = viewModelProvider

}</code></pre><br/>
Также я написал Junit тесты для логики ViewModelProvider'а, если интересно можете глянуть <a href="https://github.com/DmitryTsyvtsyn/AlgoSortingAnimations">в исходниках</a> и запустить.<br/>
<br/>
<h2><font color="#3AC1EF">▍ Реализация темы</font></h2><br/>
Вся вёрстка в проекте сделана кодом без использования xml файлов и библиотек, таких как <a href="https://developer.android.com/compose">Jetpack Compose</a>:<br/>
<br/>
<pre><code class="kotlin">class MainActivity : Activity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        val fragmentContainerView = CoreFrameLayout(this)
        fragmentContainerView.layoutParams(viewGroupLayoutParams().match())
        setContentView(fragmentContainerView)

        ...

    }

}</code></pre><br/>
Так как xml вёрстки нет, то и поддержка темы реализована через самописное решение, а точнее через кастомизированные наследники для каждой View:<br/>
<br/>
<pre><code class="kotlin">open class CoreFrameLayout @JvmOverloads constructor(
    ctx: Context,
    // цвета и shape указываются через аттрибуты темы
    private val backgroundColor: ColorAttributes = ColorAttributes.primaryBackgroundColor,
    private val shape: ShapeAttribute = ShapeAttribute.medium,
    private val shapeTreatmentStrategy: ShapeTreatmentStrategy = ShapeTreatmentStrategy.None()
): FrameLayout(ctx), ThemeManager.ThemeManagerListener {

    /*
    переопределённый метод из ThemeManager.ThemeManagerListener интерфейса, 
    принимает на вход тему и WindowInsets (поддержка edge-to-edge), 
    если последние были изменены
    */
    override fun onThemeChanged(insets: ThemeManager.WindowInsets, theme: CoreTheme) {
        val gradientDrawable = GradientDrawable()
        /*
        shapeTreatmentStrategy возвращает FloatArray со значениями для каждого угла,
        могут быть разные стратегии, например, только закруглённые верхние углы или
        наоборот, только нижние и тд.

        theme.shapeStyle[shape] возвращает Float значение для радиуса закругления
        
        context.dp() принимает эквивалент в dp единицах, возвращает в пикселях
        */
        gradientDrawable.cornerRadii = shapeTreatmentStrategy.floatArrayOf(context.dp(theme.shapeStyle[shape]))
        // возвращает конкретный цвет для текущей темы
        gradientDrawable.setColor(theme.colors[backgroundColor])
        background = gradientDrawable
    }

    // когда View присоединена к Window, она подписывается на изменения темы
    override fun onAttachedToWindow() {
        super.onAttachedToWindow()
        ThemeManager.addThemeListener(this)
    }

    // когда View отсоединена от Window, она отписывается от изменений темы
    override fun onDetachedFromWindow() {
        super.onDetachedFromWindow()
        ThemeManager.removeThemeListener(this)
    }

}</code></pre><br/>
Всё достаточно просто: подписываемся на изменение темы, когда View актуальна и отписываемся, когда неактуальна через специальный класс <code>ThemeManager</code>, последний всего лишь хранит callback'и и оповещает иерархию View, когда тема или <code>WindowInsets</code> поменялись (паттерн Наблюдатель):<br/>
<br/>
<pre><code class="kotlin">/*
object означает, что объект является синглетоном, поэтому 
очень важно отписываться для View от callback'ов, чтобы
не произошла ситуация, когда View была уничтожена, а 
ThemeManager хранит неактуальный callback
*/
object ThemeManager {

    private var theme = CoreTheme.LIGHT
    private var insets: WindowInsets = WindowInsets(0, 0, 0, 0)
    // набор callback'ов, используется множество, чтобы не было дубликатов
    private val themeListeners = mutableSetOf&lt;ThemeManagerListener&gt;()

    // когда View актуальна (onAttachedToWindow) callback добавляется
    fun addThemeListener(listener: ThemeManagerListener) {
        themeListeners.add(listener)
        listener.notify()
    }

    // когда View неактуальна (onDetachedFromWindow) callback удаляется
    fun removeThemeListener(listener: ThemeManagerListener) {
        themeListeners.remove(listener)
        listener.notify()
    }

    // при изменении темы все callback'и оповещаются
    fun changeTheme(newTheme: CoreTheme) {
        if (theme == newTheme) return

        theme = newTheme
        themeListeners.notifyAll()
    }

    // при изменении WindowInsets все callback'и оповещаются
    fun changeInsets(newInsets: WindowInsets) {
        if (insets == newInsets) return
      
        insets = newInsets
        themeListeners.notifyAll()
    }

    private fun Set&lt;ThemeManagerListener&gt;.notifyAll() {
        forEach { listener -&gt; listener.notify() }
    }

    // при оповещении передаются актуальные параметры для insets и theme
    private fun ThemeManagerListener.notify() {
        onThemeChanged(insets, theme)
    }

    fun interface ThemeManagerListener {
        fun onThemeChanged(insets: WindowInsets, theme: CoreTheme)
    }

    data class WindowInsets(
        val start: Int,
        val top: Int,
        val end: Int,
        val bottom: Int
    )

}</code></pre><br/>
Всё предельно просто:<br/>
<br/>
<ol>
<li>Создаётся View и подписывается на изменения, <code>ThemeManager</code> сохраняет у себя callback.</li>
<li>Меняется тема или WindowInsets, <code>ThemeManager</code> пробегается по всем callback'ам и передаёт актуальные данные, иерархия View получает эти изменения.</li>
<li>При уничтожении View отписывается от изменений, а <code>ThemeManager</code> удаляет у себя callback.</li>
</ol><br/>
Теперь поговорим о такой штуке как аттрибуты, название, кстати, взято из Android xml тем, вообще, если вы делали кастомные темы в Jetpack Compose, то знаете, что нет необходимости придумывать что-то похожее, можно просто обратиться к конкретной переменной:<br/>
<br/>
<pre><code class="kotlin">Text(
    color = CustomTheme.colors.primaryTextColor,
    text = "..."
)</code></pre><br/>
В случае с View не совсем так, в отличие от Jetpack Compose, где при изменении темы происходит перерисовка дерева с актуальными параметрами, в иерархии View такого нет и поэтому остаётся либо вариант, когда мы всегда конфигурируем View:<br/>
<br/>
<pre><code class="kotlin">val textView1 = TextView(context)
textView.setTextColor(theme.colors.primaryTextColor)
textView.background = ...
textView.typeface = ...

val textView2 = TextView(context)
textView.setTextColor(theme.colors.primaryTextColor)
textView.background = ...
textView.typeface = ...

val textView3 = TextView(context)
textView.setTextColor(theme.colors.primaryTextColor)
textView.background = ...
textView.typeface = ...</code></pre><br/>
Либо используем аттрибуты и особо не думаем о каждом параметре:<br/>
<br/>
<pre><code class="kotlin">val textView1 = CoreTextView(
    ctx = context,
    textColor = ColorAttributes.primaryTextColor,
    textStyle = TypefaceAttribute.Body1
)

// primaryTextColor is default
val textView2 = CoreTextView(
    ctx = context,
    textStyle = TypefaceAttribute.Body2
)

// primaryTextColor is default
val textView3 = CoreTextView(
    ctx = context,
    textStyle = TypefaceAttribute.Body3
)</code></pre><br/>
У каждого варианта есть свои нюансы, в первом всё равно нужно будет где-то подписываться на изменения темы и брать актуальные значения, что породит ещё больше шаблонного кода, во втором всё инкапсулировано в конкретные наследники View, но приходится добавлять аттрибуты.<br/>
<br/>
Почему нельзя поместить всё в пределах View и не использовать аттрибуты? Всё просто, вы не сможете поменять параметры в таком случае: <br/>
<br/>
<pre><code class="kotlin">open class CoreTextView @JvmOverloads constructor(
    ctx: Context,
    private val textColor: ColorAttributes = ColorAttributes.primaryTextColor,
    ...
): TextView(ctx), ThemeManager.ThemeManagerListener {

    override fun onThemeChanged(insets: ThemeManager.WindowInsets, theme: CoreTheme) {
        ...
        // нельзя поменять цвет текста, например на primaryColor,
        // так как цвет текста завязан на primaryTextColor
        setTextColor(theme.colors.primaryTextColor)

        // с аттрибутами можно, достаточно передать другой аттрибут
        setTextColor(theme.colors[textColor])
    }

    ...

}</code></pre><br/>
Есть, конечно, гибридный способ решить проблему — создать отдельные наследники на каждый параметр:<br/>
<br/>
<pre><code class="kotlin">class PrimaryTextColorTextView @JvmOverloads constructor(
    ctx: Context
): TextView(ctx), ThemeManager.ThemeManagerListener {

    override fun onThemeChanged(insets: ThemeManager.WindowInsets, theme: CoreTheme) {
        setTextColor(theme.colors.primaryTextColor)
    }

}

class PrimaryColorTextView @JvmOverloads constructor(
    ctx: Context
): TextView(ctx), ThemeManager.ThemeManagerListener {

    override fun onThemeChanged(insets: ThemeManager.WindowInsets, theme: CoreTheme) {
        setTextColor(theme.colors.primaryColor)
    }

}

class SecondaryColorTextView @JvmOverloads constructor(
    ctx: Context
): TextView(ctx), ThemeManager.ThemeManagerListener {

    override fun onThemeChanged(insets: ThemeManager.WindowInsets, theme: CoreTheme) {
        setTextColor(theme.colors.secondaryColor)
    }

}</code></pre><br/>
Но в таком случае придётся плодить множество наследников и писать кучу шаблонного кода, поэтому аттрибуты здесь явно выигрывают.<br/>
<br/>
Давайте глянем, как под капотом устроены эти самые аттрибуты:<br/>
<br/>
<pre><code class="kotlin">// есть список аттрибутов
enum class ColorAttributes {
    primaryColor,
    primaryDarkColor,
    colorOnPrimary,
    primaryBackgroundColor,
    secondaryBackgroundColor,
    disabledBackgroundColor,
    selectableBackgroundColor,
    primaryTextColor,
    transparent
}

// есть конкретные цвета, которые прописываются в каждой теме
class Colors(
    private val primaryColor: Int = CoreColors.greenMedium,
    private val primaryDarkColor: Int = CoreColors.greenDark,
    private val colorOnPrimary: Int = CoreColors.white,
    private val primaryBackgroundColor: Int,
    private val secondaryBackgroundColor: Int,
    private val disabledBackgroundColor: Int,
    private val primaryTextColor: Int,
    private val selectableBackgroundColor: Int
) {

    // возвращает определённый цвет темы по аттрибуту (у каждой темы свои значения цветов)
    operator fun get(type: ColorAttributes): Int {
        return when(type) {
            ColorAttributes.primaryColor -&gt; primaryColor
            ColorAttributes.primaryDarkColor -&gt; primaryDarkColor
            ColorAttributes.colorOnPrimary -&gt; colorOnPrimary
            ColorAttributes.primaryBackgroundColor -&gt; primaryBackgroundColor
            ColorAttributes.secondaryBackgroundColor -&gt; secondaryBackgroundColor
            ColorAttributes.disabledBackgroundColor -&gt; disabledBackgroundColor
            ColorAttributes.primaryTextColor -&gt; primaryTextColor
            ColorAttributes.selectableBackgroundColor -&gt; selectableBackgroundColor
            ColorAttributes.transparent -&gt; CoreColors.transparent
        }
    }

}

open class CoreFrameLayout @JvmOverloads constructor(
    ctx: Context,
    private val backgroundColor: ColorAttributes = ColorAttributes.primaryBackgroundColor,
    ...
): FrameLayout(ctx), ThemeManager.ThemeManagerListener {

    override fun onThemeChanged(insets: ThemeManager.WindowInsets, theme: CoreTheme) {
        val gradientDrawable = GradientDrawable()
        /*
        берём актуальный цвет для текущей темы по аттрибуту,
        если нужно поменять цвет передаём другой аттрибут
        */
        gradientDrawable.setColor(theme.colors[backgroundColor])
        background = gradientDrawable
    }

    ...
    
}
</code></pre><br/>
Аттрибут — это всего лишь интерфейс, через который мы получаем актуальный цвет, при этом мы не знаем, какая сейчас выбрана тема, то есть работаем только через интерфейс и не думаем о конкретных значениях.<br/>
<br/>
Ну и, собственно, объявление конкретных цветов для конкретных тем выглядит следующим образом:<br/>
<br/>
<pre><code class="kotlin">enum class CoreTheme(
    ...   
    val colors: Colors
) {

    // для конкретной темы прописываются конкретные цвета
    LIGHT(
        colors = Colors(
            primaryBackgroundColor = CoreColors.white,
            secondaryBackgroundColor = CoreColors.white,
            disabledBackgroundColor = CoreColors.grayMedium,
            primaryTextColor = CoreColors.black,
            selectableBackgroundColor = CoreColors.grayLight
        )
    ),

    DARK(
        colors = Colors(
            primaryBackgroundColor = CoreColors.black,
            secondaryBackgroundColor = CoreColors.grayBold,
            disabledBackgroundColor = CoreColors.grayMedium,
            primaryTextColor = CoreColors.white,
            selectableBackgroundColor = CoreColors.grayLight
        )
    )

}</code></pre><br/>
Вроде бы разобрались с аттрибутами, идём дальше.<br/>
<br/>
С цветами и радиусом закругления проблем особо нет, это всего лишь Int и Float значения, а вот со шрифтами посложнее, так как они связаны с Android SDK: <br/>
<br/>
<pre><code class="kotlin">// чтобы создать шрифт нужен Context
val robotoLight = Typeface.createFromAsset(context.assets, "roboto_light.ttf")
val robotoRegular = Typeface.createFromAsset(context.assets, "roboto_regular.ttf")
val robotoBold = Typeface.createFromAsset(context.assets, "roboto_bold.ttf")</code></pre><br/>
Для работы со шрифтами я решил создать вспомогательный класс:<br/>
<br/>
<pre><code class="kotlin">object TypefaceManager {

    // при запуске MainActivity создаётся слабая ссылка на AssetManager
    private var assetManagerReference: WeakReference&lt;AssetManager&gt;? = null
    // шрифты создаются только один раз, после этого кэшируются в хэш-таблице
    private val typefaces = hashMapOf&lt;String, Typeface&gt;()

    fun setAssets(assetManager: AssetManager) {
        assetManagerReference = WeakReference(assetManager)
    }

    // создаёт шрифт с помощью AssetManager и кэширует его
    // если шрифт уже был закэширован, то возвращает его
    fun typeface(weight: TypefaceWeight): Typeface {
        val path = weight.assetPath
        val savedTypeface = typefaces[path]
        if (savedTypeface != null) {
            return savedTypeface
        }

        val assetManager = assetManagerReference?.get() 
            ?: throw IllegalStateException("assetManager is null, first call setAssets")
        val typeface = Typeface.createFromAsset(assetManager, path)
        typefaces[path] = typeface
        typeface
    }

}

// шрифты лежат в assets папке Android приложения
enum class TypefaceWeight(val assetPath: String) {
    LIGHT("sf_pro_rounded_light.ttf"),
    REGULAR("sf_pro_rounded_regular.ttf"),
    MEDIUM("sf_pro_rounded_medium.ttf"),
    SEMI_BOLD("sf_pro_rounded_semibold.ttf"),
    BOLD("sf_pro_rounded_bold.ttf")
}</code></pre><br/>
Чтобы не произошло краша из-за пустой ссылки на <code>AssetManager</code>, надо добавить следующий код в <code>MainActivity</code>:<br/>
<br/>
<pre><code class="kotlin">class MainActivity : Activity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        TypefaceManager.setAssets(assets)

        ...

    }

}</code></pre><br/>
Глянем, как <code>TypefaceManager</code> используется в кастомизированной версии TextView:<br/>
<br/>
<pre><code class="kotlin">open class CoreTextView @JvmOverloads constructor(
    ctx: Context,
    private val textColor: ColorAttributes = ColorAttributes.primaryTextColor,
    private val textStyle: TypefaceAttribute = TypefaceAttribute.Body1
): TextView(ctx), ThemeManager.ThemeManagerListener {

    override fun onThemeChanged(insets: ThemeManager.WindowInsets, theme: CoreTheme) {
        // fontFamily это TypefaceWeight, а textSize — обыкновенное Float значение
        val (fontFamily, textSize) = theme.textStyle[textStyle]
        // создаём или получаем шрифт, если он был закэширован
        typeface = TypefaceManager.typeface(fontFamily)
        // fontSize это Kotlin Extension, устанавливает размер шрифта в sp единицах
        fontSize(textSize)
        setTextColor(theme.colors[textColor])
    }

    ...

}</code></pre><br/>
Как видите, стиль текста хранит не только <code>TypefaceWeight</code>, но и ещё размер, под капотом это выглядит так:<br/>
<br/>
<pre><code class="kotlin">class TypefaceStyle(
    private val title1: Pair&lt;TypefaceWeight, Float&gt;,
    private val title2: Pair&lt;TypefaceWeight, Float&gt;,
    private val body1: Pair&lt;TypefaceWeight, Float&gt;,
    private val body2: Pair&lt;TypefaceWeight, Float&gt;,
    private val caption1: Pair&lt;TypefaceWeight, Float&gt;
) {

    // также как цвет получаем стиль текста по аттрибуту
    operator fun get(attr: TypefaceAttribute): Pair&lt;TypefacePath, Float&gt; {
        return when (attr) {
            TypefaceAttribute.Title1 -&gt; title1
            TypefaceAttribute.Title2 -&gt; title2
            TypefaceAttribute.Body1 -&gt; body1
            TypefaceAttribute.Body2 -&gt; body2
            TypefaceAttribute.Caption1 -&gt; caption1
        }
    }

}

// аттрибуты для стилей текста
enum class TypefaceAttribute {
    Title1,
    Title2,
    Body1,
    Body2,
    Caption1
}</code></pre><br/>
Знакомая картина, не правда ли? (аттрибуты для цветов реализованы по такой же схеме)<br/>
<br/>
Также я написал дополнительные расширения для работы с <a href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams">ViewGroup.LayoutParams</a> и другими штуками, связанными с View, чтобы верстать кодом было намного проще и удобнее:<br/>
<br/>
<pre><code class="kotlin">val closeView = CoreImageButtonView(
    ctx = context,
    shape = ShapeAttribute.medium,
    shapeTreatmentStrategy = ShapeTreatmentStrategy.StartBottomTopEndRounded()
)
closeView.setOnClickListener { viewModel.navigateBack() }
// Kotlin Extension для установки внутренних отступов
closeView.padding(context.dp(12))
closeView.setImageResource(R.drawable.ic_close)
// удобный builder в стиле Kotlin'а для создания LayoutParams
closeView.layoutParams(frameLayoutParams()
    .width(context.dp(48))
    .height(context.dp(48))
    .gravity(Gravity.END))
titleContentView.addView(closeView)</code></pre><br/>
Остальные расширения и прикольные фишки можете найти в исходниках.<br/>
<br/>
<h2><font color="#3AC1EF">▍ Реализация MVI на битовых масках</font></h2><br/>
Основная идея MVI состоит в едином неизменяемом состоянии, для такого архитектурного подхода существует проблема в перерисовки UI в случае больших состояний, поэтому надо научиться отрисовывать состояние по кусочкам.<br/>
<br/>
Посмотрим, как выглядит отрисовка состояния в моём проекте:<br/>
<br/>
<pre><code class="kotlin">// переменная для кэширования предыдущего состояния
var cachedState = SortingAlgorithmState()
coroutineScope.launch {
    viewModel.state.collect {

        /*
        метод difference() принимает на вход предыдущее состояние 
        и возвращает новое с битовой маской, которая используется 
        для определения того, что было изменено
        */
        val state = it.difference(cachedState); cachedState = it

        // если был изменён текущий алгоритм сортировки, то
        // установливаем новые текстовки
        if (state.hasChanged(SortingAlgorithmState.selectedAlgorithmChanged)) {
            with(state.selectedAlgorithm) {
                toolbarView.changeTitle(context.getString(title))

                worstTimeComplexityView.changeDescription(worstTimeComplexity)
                bestTimeComplexityView.changeDescription(bestTimeComplexity)
                averageTimeComplexityView.changeDescription(averageTimeComplexity)
                worstSpaceComplexityView.changeDescription(worstSpaceComplexity)
            }
        }

        // если было изменено состояние кнопки "Старт", меняем иконку 
        // и обработчик нажатия
        if (state.hasChanged(SortingAlgorithmState.buttonStateChanged)) {
            val (imageResource, clickListener) = when (state.buttonState) {
                SortingAnimationButtonState.NONE,
                SortingAnimationButtonState.PAUSED -&gt; R.drawable.ic_play to OnClickListener {
                    sortingAlgorithmView.startAnimation()
                    viewModel.toggleAnimation()
                }
                SortingAnimationButtonState.RUNNING -&gt; R.drawable.ic_pause to OnClickListener {
                    sortingAlgorithmView.pauseAnimation()
                    viewModel.toggleAnimation()
                }
            }

            playPauseButtonView.setImageResource(imageResource)
            playPauseButtonView.setOnClickListener(clickListener)
        }

        // если был изменён массив для сортировки, меняем его
        if (state.hasChanged(SortingAlgorithmState.sortingArrayChanged)) {
            sortingAlgorithmView.changeArray(state.sortingArray)
        }

        // если был изменён массив для сортировки или алгоритм сортировки, 
        // меняем шаги анимации
        if (state.hasChanged(SortingAlgorithmState.selectedAlgorithmChanged)
            or state.hasChanged(SortingAlgorithmState.sortingArrayChanged)) {
            sortingAlgorithmView.changeAnimationSteps(state.steps(resources))
        }

    }
}</code></pre><br/>
Алгоритм достаточно простой:<br/>
<br/>
<ol>
<li>Берём новое и старое состояния, сравниваем их c помощью метода <code>SortingAlgorithmState.difference()</code>.</li>
<li>Получаем новое состояние с битовой маской, в которой указано всё, что было изменено.</li>
<li>Проверяем, что было изменено, и обновляем UI</li>
</ol><br/>
Посмотрим, как под капотом устроен <code>SortingAlgorithmState</code>:<br/>
<br/>
<pre><code class="kotlin">class SortingAlgorithmState(
    val selectedAlgorithm: SortingAlgorithm = EmptyAlgorithm(),
    val buttonState: SortingAnimationButtonState = SortingAnimationButtonState.NONE,
    val sortingArray: IntArray = intArrayOf(),
    // битовая маска, если все биты равны нулю, значит, ничего не изменилось 
    private val compared: Int = 7 // low byte: 00000111
) {

    // если указанный бит (pieceState) равен единице, значит 
    // состояние было изменено
    fun hasChanged(pieceState: Int): Boolean = 
        (compared and pieceState) == pieceState

    /*
    сравнивает текущее состояние с указанным (other) 
    и возвращает новое состояние с обновлённой битовой маской,
    в которой указано всё, что было изменено
    */
    fun difference(other: SortingAlgorithmState): SortingAlgorithmState {
        var compared = 0

        // если был изменён текущий алгоритм сортировки, устанавливаем бит
        if (selectedAlgorithm != other.selectedAlgorithm) {
            compared = compared or selectedAlgorithmChanged
        }

        // если поменялось состояние кнопки, устанавливаем бит
        if (buttonState != other.buttonState) {
            compared = compared or buttonStateChanged
        }

        // если поменялся массив для сортировки, устанавливаем бит
        if (!sortingArray.contentEquals(other.sortingArray)) {
            compared = compared or sortingArrayChanged
        }

        return SortingAlgorithmState(selectedAlgorithm, buttonState, sortingArray, compared)
    }

    fun steps(resources: Resources): List&lt;SortingAlgorithmStep&gt; {
        return selectedAlgorithm.sort(sortingArray.copyOf(), resources)
    }

    fun changedWith(selectedAlgorithm: SortingAlgorithm) =
        SortingAlgorithmState(selectedAlgorithm, buttonState, sortingArray)

    fun changedWith(buttonState: SortingAnimationButtonState) =
        SortingAlgorithmState(selectedAlgorithm, buttonState, sortingArray)

    fun changedWith(sortingArray: IntArray) =
        SortingAlgorithmState(selectedAlgorithm, buttonState, sortingArray)

    companion object {
        // константы для определения соответствующего бита
        const val selectedAlgorithmChanged: Int = 1 // low byte: 00000001
        const val buttonStateChanged: Int = 2 // low byte: 00000010
        const val sortingArrayChanged: Int = 4 // low byte: 00000100
    }
}</code></pre><br/>
Давайте пошагово разберём, как это работает:<br/>
<br/>
<ol>
<li>У нас есть сложный экран с кучей кнопок, изображений и текста, сейчас он находится в состоянии X.</li>
<li>Нажимаем кнопку, неважно какую, выполняется какая-то логика и обновляется состояние, теперь оно Y.</li>
<li>Так как состояние было изменено, надо обновить UI, но мы не можем обновить всё без раздумий, это не очень производительно, поэтому надо обновить то, что было изменено, для этого сравниваем состояние X и состояние Y, на основе сравнения устанавливаем биты для тех штук, которые были изменены.</li>
<li>Когда нужно применить состояние в UI, смотрим, что было изменено, и обновляем по кусочкам.</li>
</ol><br/>
Вот и всё, немного битовой арифметики и ничего сложного, кстати, в Jetpack Compose тоже есть похожий механизм, только он скрыт под капотом.<br/>
<br/>
<h2><font color="#3AC1EF">▍ Заключение</font></h2><br/>
К сожалению, я не смог добраться до кастомной View, которая рисует анимации алгоритмов сортировки, вообще, основной целью статьи изначально было рассмотреть, как устроена эта самая вьюшка, но так уж получилось, что я начал рассматривать другие части проекта, и статья разрослась прилично, поэтому, если текущий материал зайдёт, скорее всего, начеркаю вторую часть…<br/>
<br/>
Полезные ссылки:<br/>
<br/>
<ol>
<li><a href="https://t.me/android_under_the_hood">Мой телеграм канал.</a></li>
<li><a href="https://github.com/DmitryTsyvtsyn/AlgoSortingAnimations">Github проекта</a></li>
<li><a href="https://habr.com/en/users/DmitryTsyvtsyn/publications/articles/">Другие статьи.</a></li>
</ol><br/>
Пишите в комментах ваше мнение и всем хорошего кода!<br/>
<br/>
© 2024 ООО «МТ ФИНАНС»<br/>
<br/>
<blockquote><b><font color="#3AC1EF"><a href="https://t.me/ruvds_community">Telegram-канал со скидками, розыгрышами призов и новостями IT 💻</a></font></b></blockquote><a href="http://ruvds.com/ru-rub?utm_source=habr&amp;utm_medium=article&amp;utm_campaign=DmitryTsyvtsyn&amp;utm_content=kak_ya_pisal_superkastomizirovannoe_android_prilozhenie_v_2024_godu"><img data-blurred="true" data-src="https://habrastorage.org/webt/7u/o0/_9/7uo0_9itb0bkl_y8_0_n1a57vuc.jpeg" src="https://habrastorage.org/r/w780q1/webt/7u/o0/_9/7uo0_9itb0bkl_y8_0_n1a57vuc.jpeg"/></a></div></div></div><!-- --><!-- --></div><!-- --><!-- --></div><!--]--><!-- --><div class="tm-article-presenter__meta" data-test-id="article-meta-links"><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Теги:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[ruvds_%D1%81%D1%82%D0%B0%D1%82%D1%8C%D0%B8]"><span>ruvds_статьи</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[android]"><span>android</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[android+view]"><span>android view</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[kotlin]"><span>kotlin</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[application]"><span>application</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[algorithms]"><span>algorithms</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[sorting+algorithms]"><span>sorting algorithms</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[viewmodel]"><span>viewmodel</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[viewmodelprovider]"><span>viewmodelprovider</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[sparse+array]"><span>sparse array</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[custom+view]"><span>custom view</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[bitwise+operators]"><span>bitwise operators</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[mvvm]"><span>mvvm</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-tags-list__link" href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[mvi]"><span>mvi</span></a><!--]--></li><!--]--><!-- --></ul></div><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Хабы:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/companies/ruvds/articles/"><!--[--><span>Блог компании RUVDS.com</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/hubs/kotlin/"><!--[--><span>Kotlin</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/hubs/algorithms/"><!--[--><span>Алгоритмы</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/hubs/mobile_dev/"><!--[--><span>Разработка мобильных приложений</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a class="tm-hubs-list__link" href="/ru/hubs/android_dev/"><!--[--><span>Разработка под Android</span><!--]--></a><!--]--></li><!--]--><!-- --></ul></div></div><!-- --><!--]--></article><!--]--></div><!-- --></div><div class="tm-article-sticky-panel" data-test-id="article-sticky-panel" style=""><div class="tm-data-icons tm-data-icons tm-data-icons_space-big tm-article-sticky-panel__icons" data-test-id="article-stats-icons"><div class="tm-article-rating tm-data-icons__item"><div class="tm-votes-meter tm-article-rating__votes-switcher"><svg class="tm-svg-img tm-votes-meter__icon tm-votes-meter__icon tm-votes-meter__icon_appearance-article" height="24" width="24"><title>Всего голосов 22: ↑22 и ↓0</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-rating"></use></svg><span class="tm-votes-meter__value tm-votes-meter__value_positive tm-votes-meter__value_appearance-article tm-votes-meter__value_rating tm-votes-meter__value" data-test-id="votes-meter-value" title="Всего голосов 22: ↑22 и ↓0">+36</span></div><!--teleport start--><!--teleport end--><!-- --></div><!-- --><!-- --><button class="bookmarks-button tm-data-icons__item" title="Добавить в закладки" type="button"><span class="tm-svg-icon__wrapper bookmarks-button__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Добавить в закладки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-favorite"></use></svg></span><span class="bookmarks-button__counter" title="Количество пользователей, добавивших публикацию в закладки">49</span></button><div class="tm-sharing tm-data-icons__item" title="Поделиться"><button class="tm-sharing__button" type="button"><svg class="tm-sharing__icon" viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M13.8 13.8V18l7.2-6.6L13.8 5v3.9C5 8.9 3 18.6 3 18.6c2.5-4.4 6-4.8 10.8-4.8z" fill="currentColor"></path></svg></button><!--teleport start--><!--teleport end--></div><div class="tm-article-comments-counter-link tm-data-icons__item" title="Читать комментарии"><a class="tm-article-comments-counter-link__link" data-test-id="counter-comments" href="/ru/companies/ruvds/articles/851256/comments/"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value">1</span><!--]--></a><!-- --></div><!--[--><!--[--><!--[--><!-- --><!--]--><!--]--><!--]--><!--teleport start--><!--teleport end--><!-- --></div></div></div><!--[--><!--]--><div class="tm-article-presenter__footer"><!--[--><!--[--><div class="tm-article-blocks"><!-- --><!--[--><section class="tm-block tm-block tm-block_spacing-bottom"><!-- --><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-balanced"><!--[--><div class="tm-article-author" data-test-id="article-author-info"><!--[--><!--[--><div class="tm-article-author__company"><div class="tm-article-author__company-card"><div class="tm-company-snippet"><a class="tm-company-snippet__logo-link" href="/ru/companies/ruvds/profile/"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="40" src="//habrastorage.org/getpro/habr/company/18c/bff/d8f/18cbffd8f66af293efcc352f43cdca35.png" width="40"/></div></a><div class="tm-company-snippet__info"><a class="tm-company-snippet__title" data-test-id="company-title" href="/ru/companies/ruvds/profile/"><span>RUVDS.com</span></a><div class="tm-company-snippet__description">VDS/VPS-хостинг. Скидка 15% по коду <b>HABR15</b></div></div></div><div class="tm-article-author__buttons"><!-- --><!-- --></div></div><div class="tm-article-author__company-contacts"><!--[--><a class="tm-article-author__contact" href="https://telegram.me/ruvds_community" rel="noopener" target="_blank">Telegram</a><a class="tm-article-author__contact" href="https://vk.com/ru_vds" rel="noopener" target="_blank">ВКонтакте</a><a class="tm-article-author__contact" href="https://twitter.com/ru_vds" rel="noopener" target="_blank">Twitter</a><!--]--></div><div class="tm-article-author__separator"></div></div><!--]--><!--]--><div class="tm-user-card tm-user-card tm-user-card_variant-article tm-article-author__user-card" data-async-called="true"><div class="tm-user-card__info-container"><div class="tm-user-card__header"><div class="tm-user-card__header-data"><a class="tm-user-card__userpic tm-user-card__userpic_size-40" href="/ru/users/DmitryTsyvtsyn/"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" src="//habrastorage.org/getpro/habr/avatars/db6/bea/5ea/db6bea5ea945afec3614eae955a8f2b1.jpeg"/></div></a><div class="tm-user-card__meta"><div class="tm-counter-container tm-karma tm-karma" title=" 24 голоса "><div class="tm-counter-container__header"><!--[--><div class="karma-display positive" data-v-7635202e="">20</div><!-- --><!--]--></div><div class="tm-counter-container__footer"><!--[--><div class="tm-karma__text">Карма</div><!--teleport start--><!--teleport end--><!--]--></div></div><div class="tm-counter-container" title="Рейтинг пользователя"><div class="tm-counter-container__header"><!--[--><!--[--><!--]--><div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!-- --><div class="tm-votes-lever__score tm-votes-lever__score_appearance-rating tm-votes-lever__score"><!--[--><span><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter_rating tm-votes-lever__score-counter" data-test-id="votes-score-counter">4</span></span><!--]--></div><!-- --></div><!--]--></div><div class="tm-counter-container__footer"><!--[--><span class="tm-rating__text tm-rating__text">Рейтинг</span><!--]--></div></div></div></div></div><div class="tm-user-card__info tm-user-card__info_variant-article tm-user-card__info"><div class="tm-user-card__title tm-user-card__title_variant-article tm-user-card__title"><span class="tm-user-card__name tm-user-card__name_variant-article tm-user-card__name">Dmitry Tsyvtsyn</span><a class="tm-user-card__nickname tm-user-card__nickname tm-user-card__nickname_variant-article" href="/ru/users/DmitryTsyvtsyn/"> @DmitryTsyvtsyn</a><!-- --></div><p class="tm-user-card__short-info tm-user-card__short-info_variant-article tm-user-card__short-info" data-test-id="user-card-speciality">Android developer, photographer and traveler</p></div></div><div class="tm-user-card__buttons tm-user-card__buttons_variant-article tm-user-card__buttons"><!-- --><div class="tm-user-card__button"><div class="tm-button-follow tm-user-card__button-follow"><!-- --><button class="tm-button-follow__button tm-button-follow__button_big" data-test-id="follow-button" type="button">Подписаться</button></div></div><!-- --><div class="tm-user-card__button tm-user-card__button_write" data-test-id="user-card-conversations"><svg class="tm-svg-img tm-user-card__button-icon" height="16" width="16"><title>Отправить сообщение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#mail"></use></svg></div><!-- --></div><!-- --></div><!-- --></div><!--]--></div><!--]--><!-- --></section><!-- --><!--[--><!--]--><!--]--><div class="tm-article-blocks__comments"><div class="tm-article-page-comments" id="publication-comments"><div><!--[--><div class="tm-article-comments-counter-link tm-article-comments-counter-button"><a class="tm-article-comments-counter-link__link tm-article-comments-counter-link__link_button-style" data-test-id="counter-comments" href="/ru/companies/ruvds/articles/851256/comments/"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon tm-article-comments-counter-link__icon_contrasted" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value tm-article-comments-counter-link__value_contrasted"> Комментарии 1 </span><!--]--></a><!-- --></div><!--]--></div></div></div><!--[--><!--[--><!--]--><section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title tm-block__title_variant-large">Публикации</h2><!--[--><!--]--></div><!-- --></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-condensed-slim"><!--[--><!--[--><div class="tm-tabs tm-tabs"><div class=""><!--[--><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_active tm-tabs__tab-link_slim tm-tabs__tab-link">Лучшие за сутки</button></span><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_slim tm-tabs__tab-link">Похожие</button></span><!--]--></div><!-- --></div><div class="similar-and-daily__tab-view"><div class="placeholder-wrapper"><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><div class="tm-placeholder-article-cards"><!--[--><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><!--]--></div><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --></div><!-- --></div><!--]--><!--]--></div><!--]--><!-- --></section><!--[--><!--[--><div class="placeholder-wrapper"><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><div class="tm-placeholder-inset tm-placeholder-vacancies"><div class="tm-placeholder-inset__header"><div class="tm-placeholder__line tm-placeholder__line_inset-header loads"></div></div><div class="tm-placeholder-inset__body"><ul class="tm-placeholder-list"><!--[--><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><!--]--></ul></div><div class="tm-placeholder-inset__footer"><div class="tm-placeholder__line tm-placeholder__line_inset-footer loads"></div></div></div><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --><!-- --></div><!--]--><!--]--><!-- --><!--[--><!--]--><!--]--></div><!--]--><!--]--></div></div><!--]--><!--]--></div></div><div class="tm-page__sidebar"><!--[--><div class="tm-layout-sidebar"><div class="tm-layout-sidebar__placeholder_initial"></div><div class="tm-sexy-sidebar_initial tm-sexy-sidebar" style="margin-top:0px;"><!--[--><!--]--><!-- --><div class="tm-layout-sidebar__placeholder_initial"></div><!--[--><section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Информация</h2><!--[--><!--]--></div><!-- --></header><!--[--><div class="tm-block__body tm-block__body"><!--[--><div class="tm-company-basic-info"><dl class="tm-description-list tm-description-list tm-description-list_variant-columns-nowrap"><dt class="tm-description-list__title tm-description-list__title_variant-columns-nowrap tm-description-list__title">Сайт</dt><dd class="tm-description-list__body tm-description-list__body_variant-columns-nowrap tm-description-list__body"><!--[--><a class="tm-company-basic-info__link" href="https://ruvds.com" target="_blank">ruvds.com</a><!--]--></dd></dl><dl class="tm-description-list tm-description-list tm-description-list_variant-columns-nowrap"><dt class="tm-description-list__title tm-description-list__title_variant-columns-nowrap tm-description-list__title">Дата регистрации</dt><dd class="tm-description-list__body tm-description-list__body_variant-columns-nowrap tm-description-list__body"><!--[--><time datetime="2016-03-18T05:43:01.000Z" title="2016-03-18, 08:43">18  марта  2016</time><!--]--></dd></dl><dl class="tm-description-list tm-description-list tm-description-list_variant-columns-nowrap"><dt class="tm-description-list__title tm-description-list__title_variant-columns-nowrap tm-description-list__title">Дата основания</dt><dd class="tm-description-list__body tm-description-list__body_variant-columns-nowrap tm-description-list__body"><!--[--><time datetime="2015-07-26T21:00:00.000Z" title="2015-07-27, 00:00">27  июля  2015</time><!--]--></dd></dl><dl class="tm-description-list tm-description-list tm-description-list_variant-columns-nowrap"><dt class="tm-description-list__title tm-description-list__title_variant-columns-nowrap tm-description-list__title">Численность</dt><dd class="tm-description-list__body tm-description-list__body_variant-columns-nowrap tm-description-list__body"><!--[-->11–30 человек<!--]--></dd></dl><dl class="tm-description-list tm-description-list tm-description-list_variant-columns-nowrap"><dt class="tm-description-list__title tm-description-list__title_variant-columns-nowrap tm-description-list__title">Местоположение</dt><dd class="tm-description-list__body tm-description-list__body_variant-columns-nowrap tm-description-list__body"><!--[-->Россия<!--]--></dd></dl><dl class="tm-description-list tm-description-list tm-description-list_variant-columns-nowrap"><dt class="tm-description-list__title tm-description-list__title_variant-columns-nowrap tm-description-list__title">Представитель</dt><dd class="tm-description-list__body tm-description-list__body_variant-columns-nowrap tm-description-list__body"><!--[--><a class="tm-company-basic-info__link" href="/ru/users/ruvds/">ruvds</a><!--]--></dd></dl></div><!--]--></div><!--]--><!-- --></section><div class="tm-company-widgets"><!--[--><!--]--></div><!-- --><!-- --><!--]--><!-- --></div></div><!--]--></div></div><!-- --><!--]--></div></div></main><!-- --></div><div class="tm-footer-menu"><div class="tm-page-width"><!--[--><div class="tm-footer-menu__container"><!--[--><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Ваш аккаунт</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a href="/kek/v1/auth/habrahabr/?back=/ru/companies/ruvds/articles/851256/&amp;hl=ru" rel="nofollow" target="_self">Войти</a></li><li class="tm-footer-menu__list-item"><a href="/kek/v1/auth/habrahabr-register/?back=/ru/companies/ruvds/articles/851256/&amp;hl=ru" rel="nofollow" target="_self">Регистрация</a></li><!--]--></ul></div></div><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Разделы</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/articles/">Статьи</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/news/">Новости</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/hubs/">Хабы</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/companies/">Компании</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/users/">Авторы</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/sandbox/">Песочница</a></li><!--]--></ul></div></div><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Информация</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/help/">Устройство сайта</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/authors/codex/">Для авторов</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/companies/corpblogs/">Для компаний</a></li><li class="tm-footer-menu__list-item"><a class="footer-menu__item-link" href="/ru/docs/docs/transparency/">Документы</a></li><li class="tm-footer-menu__list-item"><a href="https://account.habr.com/info/agreement/?hl=ru_RU" target="_blank">Соглашение</a></li><li class="tm-footer-menu__list-item"><a href="https://account.habr.com/info/confidential/?hl=ru_RU" target="_blank">Конфиденциальность</a></li><!--]--></ul></div></div><div class="tm-footer-menu__block"><p class="tm-footer-menu__block-title">Услуги</p><div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><!--[--><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/corporate-blogs/" target="_blank">Корпоративный блог</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/advertising/" target="_blank">Медийная реклама</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/native-special/" target="_blank">Нативные проекты</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/education-programs/" target="_blank">Образовательные программы</a></li><li class="tm-footer-menu__list-item"><a href="https://company.habr.com/ru/hello-startup/" target="_blank">Стартапам</a></li><!--]--></ul></div></div><!--]--></div><!--]--></div></div><div class="tm-footer"><div class="tm-page-width"><!--[--><div class="tm-footer__container"><!-- --><div class="tm-footer__social"><!--[--><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.facebook.com/habrahabr.ru" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Facebook</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-facebook"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://twitter.com/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Twitter</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-twitter"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://vk.com/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>VK</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-vk"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://telegram.me/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Telegram</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-telegram"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.youtube.com/channel/UCd_sTwKqVrweTt4oAKY5y4w" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Youtube</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-youtube"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://dzen.ru/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Яндекс Дзен</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-dzen"></use></svg></a><!--]--></div><!--teleport start--><!--teleport end--><button class="tm-footer__link"><!-- --> Настройка языка</button><a class="tm-footer__link" href="/ru/feedback/">Техническая поддержка</a><div class="tm-footer-copyright"><span class="tm-copyright"><span class="tm-copyright__years">© 2006–2025, </span><span class="tm-copyright__name"><a class="tm-copyright__link" href="https://company.habr.com/" rel="noopener" target="_blank">Habr</a></span></span></div></div><!--]--></div></div><!-- --><!--]--></div><!-- --></div></div>
<div id="overlays"><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--><!-- --><!--teleport anchor--></div>
</body>
</html>
